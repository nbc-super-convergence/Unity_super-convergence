// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/protocol.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from protos/protocol.proto</summary>
public static partial class ProtocolReflection {

  #region Descriptor
  /// <summary>File descriptor for protos/protocol.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ProtocolReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChVwcm90b3MvcHJvdG9jb2wucHJvdG8iLwoIVXNlckRhdGESEQoJc2Vzc2lv",
          "bklkGAEgASgJEhAKCG5pY2tuYW1lGAIgASgJIqwBCghSb29tRGF0YRIOCgZy",
          "b29tSWQYASABKAkSDwoHb3duZXJJZBgCIAEoCRIQCghyb29tTmFtZRgDIAEo",
          "CRIPCgdsb2JieUlkGAQgASgJEh0KBXN0YXRlGAUgASgOMg4uUm9vbVN0YXRl",
          "VHlwZRIYCgV1c2VycxgGIAMoCzIJLlVzZXJEYXRhEg8KB21heFVzZXIYByAB",
          "KAUSEgoKcmVhZHlVc2VycxgIIAMoCSIpCgZWZWN0b3ISCQoBeBgBIAEoAhIJ",
          "CgF5GAIgASgCEgkKAXoYAyABKAIiJwoEUmFuaxIRCglzZXNzaW9uSWQYASAB",
          "KAkSDAoEcmFuaxgCIAEoBSJYCg9Cb2FyZFBsYXllckRhdGESEQoJc2Vzc2lv",
          "bklkGAEgASgJEgwKBGdvbGQYAiABKAUSDgoGdHJvcGh5GAMgASgFEhQKDHRp",
          "bGVMb2NhdGlvbhgEIAEoBSKSAQoMRGljZUdhbWVEYXRhEhEKCXNlc3Npb25J",
          "ZBgBIAEoCRINCgV2YWx1ZRgCIAEoBRIMCgRyYW5rGAMgASgFEhAKCGRpc3Rh",
          "bmNlGAQgASgCEhYKBWFuZ2xlGAUgASgLMgcuVmVjdG9yEhkKCGxvY2F0aW9u",
          "GAYgASgLMgcuVmVjdG9yEg0KBXBvd2VyGAcgASgCIoMBCgxEYXJ0R2FtZURh",
          "dGESEQoJc2Vzc2lvbklkGAEgASgJEgwKBHJhbmsYAiABKAUSEAoIZGlzdGFu",
          "Y2UYAyABKAISFgoFYW5nbGUYBCABKAsyBy5WZWN0b3ISGQoIbG9jYXRpb24Y",
          "BSABKAsyBy5WZWN0b3ISDQoFcG93ZXIYBiABKAIiQQoJRGFuY2VQb29sEhIK",
          "CnRlYW1OdW1iZXIYASABKAUSIAoLZGFuY2VUYWJsZXMYAiADKAsyCy5EYW5j",
          "ZVRhYmxlIi0KCkRhbmNlVGFibGUSHwoIY29tbWFuZHMYASADKAsyDS5EYW5j",
          "ZUNvbW1hbmQiRgoMRGFuY2VDb21tYW5kEh0KCWRpcmVjdGlvbhgBIAEoDjIK",
          "LkRpcmVjdGlvbhIXCg90YXJnZXRTZXNzaW9uSWQYAiABKAkiMwoKUGxheWVy",
          "SW5mbxIRCglzZXNzaW9uSWQYASABKAkSEgoKdGVhbU51bWJlchgCIAEoBSI/",
          "CgpUZWFtUmVzdWx0EhEKCXNlc3Npb25JZBgBIAMoCRINCgVzY29yZRgCIAEo",
          "BRIPCgdlbmRUaW1lGAMgASgDImMKE0MyU19SZWdpc3RlclJlcXVlc3QSDwoH",
          "bG9naW5JZBgBIAEoCRIQCghwYXNzd29yZBgCIAEoCRIXCg9wYXNzd29yZENv",
          "bmZpcm0YAyABKAkSEAoIbmlja25hbWUYBCABKAkiSgoUUzJDX1JlZ2lzdGVy",
          "UmVzcG9uc2USDwoHc3VjY2VzcxgBIAEoCBIhCghmYWlsQ29kZRgCIAEoDjIP",
          "Lkdsb2JhbEZhaWxDb2RlIjUKEEMyU19Mb2dpblJlcXVlc3QSDwoHbG9naW5J",
          "ZBgBIAEoCRIQCghwYXNzd29yZBgCIAEoCSJaChFTMkNfTG9naW5SZXNwb25z",
          "ZRIPCgdzdWNjZXNzGAEgASgIEhEKCXNlc3Npb25JZBgCIAEoCRIhCghmYWls",
          "Q29kZRgDIAEoDjIPLkdsb2JhbEZhaWxDb2RlIicKEkMyU19Mb2dnb3V0UmVx",
          "dWVzdBIRCglzZXNzaW9uSWQYASABKAkiMAobUzJDX0Nsb3NlU29ja2V0Tm90",
          "aWZpY2F0aW9uEhEKCXNlc3Npb25JZBgBIAEoCSI3ChRDMlNfR2FtZVN0YXJ0",
          "UmVxdWVzdBIRCglzZXNzaW9uSWQYASABKAkSDAoEdHVybhgCIAEoBSLJAQoZ",
          "UzJDX0dhbWVTdGFydE5vdGlmaWNhdGlvbhIPCgdzdWNjZXNzGAEgASgIEjYK",
          "B3BsYXllcnMYAiADKAsyJS5TMkNfR2FtZVN0YXJ0Tm90aWZpY2F0aW9uLlBs",
          "YXllckRhdGESIQoIZmFpbENvZGUYAyABKA4yDy5HbG9iYWxGYWlsQ29kZRpA",
          "CgpQbGF5ZXJEYXRhEg4KBnVzZXJJZBgBIAEoCRIQCghuaWNrbmFtZRgCIAEo",
          "CRIQCghwb3NpdGlvbhgDIAEoBSIoChNDMlNfUm9sbERpY2VSZXF1ZXN0EhEK",
          "CXNlc3Npb25JZBgBIAEoCSJeChRTMkNfUm9sbERpY2VSZXNwb25zZRIPCgdz",
          "dWNjZXNzGAEgASgIEhIKCmRpY2VSZXN1bHQYAiABKAUSIQoIZmFpbENvZGUY",
          "AyABKA4yDy5HbG9iYWxGYWlsQ29kZSJBChhTMkNfUm9sbERpY2VOb3RpZmlj",
          "YXRpb24SEQoJc2Vzc2lvbklkGAEgASgJEhIKCmRpY2VSZXN1bHQYAiABKAUi",
          "XwoaQzJTX01vdmVQbGF5ZXJCb2FyZFJlcXVlc3QSEQoJc2Vzc2lvbklkGAEg",
          "ASgJEhwKC3RhcmdldFBvaW50GAIgASgLMgcuVmVjdG9yEhAKCHJvdGF0aW9u",
          "GAMgASgCIlEKG1MyQ19Nb3ZlUGxheWVyQm9hcmRSZXNwb25zZRIPCgdzdWNj",
          "ZXNzGAEgASgIEiEKCGZhaWxDb2RlGAIgASgOMg8uR2xvYmFsRmFpbENvZGUi",
          "ZAofUzJDX01vdmVQbGF5ZXJCb2FyZE5vdGlmaWNhdGlvbhIRCglzZXNzaW9u",
          "SWQYASABKAkSHAoLdGFyZ2V0UG9pbnQYAiABKAsyBy5WZWN0b3ISEAoIcm90",
          "YXRpb24YAyABKAIiOgoXQzJTX1B1cmNoYXNlVGlsZVJlcXVlc3QSEQoJc2Vz",
          "c2lvbklkGAEgASgJEgwKBHRpbGUYAiABKAUimAEKGFMyQ19QdXJjaGFzZVRp",
          "bGVSZXNwb25zZRIPCgdzdWNjZXNzGAEgASgIEgwKBHRpbGUYAiABKAUSJAoK",
          "cGxheWVySW5mbxgDIAEoCzIQLkJvYXJkUGxheWVyRGF0YRIUCgxwdXJjaGFz",
          "ZUdvbGQYBCABKAUSIQoIZmFpbENvZGUYBSABKA4yDy5HbG9iYWxGYWlsQ29k",
          "ZSJ7ChxTMkNfUHVyY2hhc2VUaWxlTm90aWZpY2F0aW9uEhEKCXNlc3Npb25J",
          "ZBgBIAEoCRIMCgR0aWxlGAIgASgFEiQKCnBsYXllckluZm8YAyABKAsyEC5C",
          "b2FyZFBsYXllckRhdGESFAoMcHVyY2hhc2VHb2xkGAQgASgFIi4KF1MyQ19H",
          "YW1lRW5kTm90aWZpY2F0aW9uEhMKBHJhbmsYASADKAsyBS5SYW5rIi0KGEMy",
          "U19CYWNrVG9UaGVSb29tUmVxdWVzdBIRCglzZXNzaW9uSWQYASABKAkiaAoZ",
          "UzJDX0JhY2tUb1RoZVJvb21SZXNwb25zZRIPCgdzdWNjZXNzGAEgASgIEhcK",
          "BHJvb20YAiABKAsyCS5Sb29tRGF0YRIhCghmYWlsQ29kZRgDIAEoDjIPLkds",
          "b2JhbEZhaWxDb2RlIjIKHVMyQ19CYWNrVG9UaGVSb29tTm90aWZpY2F0aW9u",
          "EhEKCXNlc3Npb25JZBgBIAEoCSItChhDMlNfU3RhcnRNaW5pR2FtZVJlcXVl",
          "c3QSEQoJc2Vzc2lvbklkGAEgASgJIi0KHVMyQ19TdGFydE1pbmlHYW1lTm90",
          "aWZpY2F0aW9uEgwKBGdhbWUYASABKAUiPAoZQzJTX1B1cmNoYXNlVHJvcGh5",
          "UmVxdWVzdBIRCglzZXNzaW9uSWQYASABKAkSDAoEdGlsZRgCIAEoBSKIAQoa",
          "UzJDX1B1cmNoYXNlVHJvcGh5UmVzcG9uc2USDwoHc3VjY2VzcxgBIAEoCBIQ",
          "CghuZXh0VGlsZRgCIAEoBRIkCgpwbGF5ZXJJbmZvGAMgASgLMhAuQm9hcmRQ",
          "bGF5ZXJEYXRhEiEKCGZhaWxDb2RlGAQgASgOMg8uR2xvYmFsRmFpbENvZGUi",
          "gAEKHlMyQ19QdXJjaGFzZVRyb3BoeU5vdGlmaWNhdGlvbhIRCglzZXNzaW9u",
          "SWQYASABKAkSEgoKYmVmb3JlVGlsZRgCIAEoBRIQCghuZXh0VGlsZRgDIAEo",
          "BRIlCgtwbGF5ZXJzSW5mbxgEIAMoCzIQLkJvYXJkUGxheWVyRGF0YSI5ChZD",
          "MlNfVGlsZVBlbmFsdHlSZXF1ZXN0EhEKCXNlc3Npb25JZBgBIAEoCRIMCgR0",
          "aWxlGAIgASgFInQKF1MyQ19UaWxlUGVuYWx0eVJlc3BvbnNlEg8KB3N1Y2Nl",
          "c3MYASABKAgSJQoLcGxheWVyc0luZm8YAiADKAsyEC5Cb2FyZFBsYXllckRh",
          "dGESIQoIZmFpbENvZGUYAyABKA4yDy5HbG9iYWxGYWlsQ29kZSJlChtTMkNf",
          "VGlsZVBlbmFsdHlOb3RpZmljYXRpb24SEQoJc2Vzc2lvbklkGAEgASgJEgwK",
          "BHRpbGUYAiABKAUSJQoLcGxheWVyc0luZm8YAyADKAsyEC5Cb2FyZFBsYXll",
          "ckRhdGEifAoTQzJTX0RpY2VHYW1lUmVxdWVzdBIRCglzZXNzaW9uSWQYASAB",
          "KAkSEAoIZGlzdGFuY2UYAiABKAISFgoFYW5nbGUYAyABKAsyBy5WZWN0b3IS",
          "GQoIbG9jYXRpb24YBCABKAsyBy5WZWN0b3ISDQoFcG93ZXIYBSABKAIiaQoU",
          "UzJDX0RpY2VHYW1lUmVzcG9uc2USDwoHc3VjY2VzcxgBIAEoCBIdCgZyZXN1",
          "bHQYAiADKAsyDS5EaWNlR2FtZURhdGESIQoIZmFpbENvZGUYAyABKA4yDy5H",
          "bG9iYWxGYWlsQ29kZSI5ChhTMkNfRGljZUdhbWVOb3RpZmljYXRpb24SHQoG",
          "cmVzdWx0GAEgAygLMg0uRGljZUdhbWVEYXRhIicKEkMyU19UdXJuRW5kUmVx",
          "dWVzdBIRCglzZXNzaW9uSWQYASABKAkiGQoXUzJDX1R1cm5FbmROb3RpZmlj",
          "YXRpb24iKQoUQzJTX0xvYmJ5Sm9pblJlcXVlc3QSEQoJc2Vzc2lvbklkGAEg",
          "ASgJImQKFVMyQ19Mb2JieUpvaW5SZXNwb25zZRIPCgdzdWNjZXNzGAEgASgI",
          "EhcKBHVzZXIYAiABKAsyCS5Vc2VyRGF0YRIhCghmYWlsQ29kZRgDIAEoDjIP",
          "Lkdsb2JhbEZhaWxDb2RlIioKFUMyU19Mb2JieUxlYXZlUmVxdWVzdBIRCglz",
          "ZXNzaW9uSWQYASABKAkiTAoWUzJDX0xvYmJ5TGVhdmVSZXNwb25zZRIPCgdz",
          "dWNjZXNzGAEgASgIEiEKCGZhaWxDb2RlGAIgASgOMg8uR2xvYmFsRmFpbENv",
          "ZGUiLQoYQzJTX0xvYmJ5VXNlckxpc3RSZXF1ZXN0EhEKCXNlc3Npb25JZBgB",
          "IAEoCSJhChlTMkNfTG9iYnlVc2VyTGlzdFJlc3BvbnNlEg8KB3N1Y2Nlc3MY",
          "ASABKAgSEAoIdXNlckxpc3QYAiADKAkSIQoIZmFpbENvZGUYAyABKA4yDy5H",
          "bG9iYWxGYWlsQ29kZSJIChpDMlNfTG9iYnlVc2VyRGV0YWlsUmVxdWVzdBIR",
          "CglzZXNzaW9uSWQYASABKAkSFwoPdGFyZ2V0U2Vzc2lvbklkGAIgASgJImoK",
          "G1MyQ19Mb2JieVVzZXJEZXRhaWxSZXNwb25zZRIPCgdzdWNjZXNzGAEgASgI",
          "EhcKBHVzZXIYAiABKAsyCS5Vc2VyRGF0YRIhCghmYWlsQ29kZRgDIAEoDjIP",
          "Lkdsb2JhbEZhaWxDb2RlIigKE0MyU19Sb29tTGlzdFJlcXVlc3QSEQoJc2Vz",
          "c2lvbklkGAEgASgJImQKFFMyQ19Sb29tTGlzdFJlc3BvbnNlEg8KB3N1Y2Nl",
          "c3MYASABKAgSGAoFcm9vbXMYAiADKAsyCS5Sb29tRGF0YRIhCghmYWlsQ29k",
          "ZRgDIAEoDjIPLkdsb2JhbEZhaWxDb2RlIjwKFUMyU19DcmVhdGVSb29tUmVx",
          "dWVzdBIRCglzZXNzaW9uSWQYASABKAkSEAoIcm9vbU5hbWUYAiABKAkiZQoW",
          "UzJDX0NyZWF0ZVJvb21SZXNwb25zZRIPCgdzdWNjZXNzGAEgASgIEhcKBHJv",
          "b20YAiABKAsyCS5Sb29tRGF0YRIhCghmYWlsQ29kZRgDIAEoDjIPLkdsb2Jh",
          "bEZhaWxDb2RlIjgKE0MyU19Kb2luUm9vbVJlcXVlc3QSEQoJc2Vzc2lvbklk",
          "GAEgASgJEg4KBnJvb21JZBgCIAEoCSJjChRTMkNfSm9pblJvb21SZXNwb25z",
          "ZRIPCgdzdWNjZXNzGAEgASgIEhcKBHJvb20YAiABKAsyCS5Sb29tRGF0YRIh",
          "CghmYWlsQ29kZRgDIAEoDjIPLkdsb2JhbEZhaWxDb2RlIjMKGFMyQ19Kb2lu",
          "Um9vbU5vdGlmaWNhdGlvbhIXCgRyb29tGAEgASgLMgkuUm9vbURhdGEiKQoU",
          "QzJTX0xlYXZlUm9vbVJlcXVlc3QSEQoJc2Vzc2lvbklkGAEgASgJIksKFVMy",
          "Q19MZWF2ZVJvb21SZXNwb25zZRIPCgdzdWNjZXNzGAEgASgIEiEKCGZhaWxD",
          "b2RlGAIgASgOMg8uR2xvYmFsRmFpbENvZGUiNAoZUzJDX0xlYXZlUm9vbU5v",
          "dGlmaWNhdGlvbhIXCgRyb29tGAEgASgLMgkuUm9vbURhdGEiPAoWQzJTX0dh",
          "bWVQcmVwYXJlUmVxdWVzdBIRCglzZXNzaW9uSWQYASABKAkSDwoHaXNSZWFk",
          "eRgCIAEoCCJeChdTMkNfR2FtZVByZXBhcmVSZXNwb25zZRIPCgdzdWNjZXNz",
          "GAEgASgIEg8KB2lzUmVhZHkYAiABKAgSIQoIZmFpbENvZGUYAyABKA4yDy5H",
          "bG9iYWxGYWlsQ29kZSJmChtTMkNfR2FtZVByZXBhcmVOb3RpZmljYXRpb24S",
          "FwoEdXNlchgBIAEoCzIJLlVzZXJEYXRhEg8KB2lzUmVhZHkYAiABKAgSHQoF",
          "c3RhdGUYAyABKA4yDi5Sb29tU3RhdGVUeXBlIrMBCiBTMkNfSWNlTWluaUdh",
          "bWVSZWFkeU5vdGlmaWNhdGlvbhI/CgdwbGF5ZXJzGAEgAygLMi4uUzJDX0lj",
          "ZU1pbmlHYW1lUmVhZHlOb3RpZmljYXRpb24uc3RhcnRQbGF5ZXJzGk4KDHN0",
          "YXJ0UGxheWVycxIRCglzZXNzaW9uSWQYASABKAkSGQoIcG9zaXRpb24YAiAB",
          "KAsyBy5WZWN0b3ISEAoIcm90YXRpb24YAyABKAIiLAoXQzJTX0ljZUdhbWVS",
          "ZWFkeVJlcXVlc3QSEQoJc2Vzc2lvbklkGAEgASgJIjEKHFMyQ19JY2VHYW1l",
          "UmVhZHlOb3RpZmljYXRpb24SEQoJc2Vzc2lvbklkGAEgASgJIiIKIFMyQ19J",
          "Y2VNaW5pR2FtZVN0YXJ0Tm90aWZpY2F0aW9uInEKGEMyU19JY2VQbGF5ZXJT",
          "eW5jUmVxdWVzdBIRCglzZXNzaW9uSWQYASABKAkSGQoIcG9zaXRpb24YAiAB",
          "KAsyBy5WZWN0b3ISEAoIcm90YXRpb24YAyABKAISFQoFc3RhdGUYBCABKA4y",
          "Bi5TdGF0ZSJ2Ch1TMkNfSWNlUGxheWVyU3luY05vdGlmaWNhdGlvbhIRCglz",
          "ZXNzaW9uSWQYASABKAkSGQoIcG9zaXRpb24YAiABKAsyBy5WZWN0b3ISEAoI",
          "cm90YXRpb24YAyABKAISFQoFc3RhdGUYBCABKA4yBi5TdGF0ZSIvChpDMlNf",
          "SWNlUGxheWVyRGFtYWdlUmVxdWVzdBIRCglzZXNzaW9uSWQYASABKAkiNAof",
          "UzJDX0ljZVBsYXllckRhbWFnZU5vdGlmaWNhdGlvbhIRCglzZXNzaW9uSWQY",
          "ASABKAkiMwoeUzJDX0ljZVBsYXllckRlYXRoTm90aWZpY2F0aW9uEhEKCXNl",
          "c3Npb25JZBgBIAEoCSIcChpTMkNfSWNlTWFwU3luY05vdGlmaWNhdGlvbiJE",
          "ChtTMkNfSWNlR2FtZU92ZXJOb3RpZmljYXRpb24SFAoFcmFua3MYASADKAsy",
          "BS5SYW5rEg8KB2VuZFRpbWUYAiABKAMiMgodUzJDX0ljZVBsYXllckV4aXRO",
          "b3RpZmljYXRpb24SEQoJc2Vzc2lvbklkGAEgASgJIqgBCiFTMkNfRHJvcE1p",
          "bmlHYW1lUmVhZHlOb3RpZmljYXRpb24SQAoHcGxheWVycxgBIAMoCzIvLlMy",
          "Q19Ecm9wTWluaUdhbWVSZWFkeU5vdGlmaWNhdGlvbi5zdGFydFBsYXllcnMa",
          "QQoMc3RhcnRQbGF5ZXJzEhEKCXNlc3Npb25JZBgBIAEoCRIMCgRzbG90GAIg",
          "ASgFEhAKCHJvdGF0aW9uGAMgASgCIi0KGEMyU19Ecm9wR2FtZVJlYWR5UmVx",
          "dWVzdBIRCglzZXNzaW9uSWQYASABKAkiMgodUzJDX0Ryb3BHYW1lUmVhZHlO",
          "b3RpZmljYXRpb24SEQoJc2Vzc2lvbklkGAEgASgJIjYKIVMyQ19Ecm9wTWlu",
          "aUdhbWVTdGFydE5vdGlmaWNhdGlvbhIRCglzdGFydFRpbWUYASABKAMiZQoZ",
          "QzJTX0Ryb3BQbGF5ZXJTeW5jUmVxdWVzdBIRCglzZXNzaW9uSWQYASABKAkS",
          "DAoEc2xvdBgCIAEoBRIQCghyb3RhdGlvbhgDIAEoAhIVCgVzdGF0ZRgEIAEo",
          "DjIGLlN0YXRlImoKHlMyQ19Ecm9wUGxheWVyU3luY05vdGlmaWNhdGlvbhIR",
          "CglzZXNzaW9uSWQYASABKAkSDAoEc2xvdBgCIAEoBRIQCghyb3RhdGlvbhgD",
          "IAEoAhIVCgVzdGF0ZRgEIAEoDjIGLlN0YXRlIjQKH1MyQ19Ecm9wUGxheWVy",
          "RGVhdGhOb3RpZmljYXRpb24SEQoJc2Vzc2lvbklkGAEgASgJIiAKHlMyQ19E",
          "cm9wTGV2ZWxTdGFydE5vdGlmaWNhdGlvbiItChxTMkNfRHJvcExldmVsRW5k",
          "Tm90aWZpY2F0aW9uEg0KBWhvbGVzGAEgAygFIkUKHFMyQ19Ecm9wR2FtZU92",
          "ZXJOb3RpZmljYXRpb24SFAoFcmFua3MYASADKAsyBS5SYW5rEg8KB2VuZFRp",
          "bWUYAiABKAMiQgoiUzJDX0RhbmNlTWluaUdhbWVSZWFkeU5vdGlmaWNhdGlv",
          "bhIcCgdwbGF5ZXJzGAEgAygLMgsuUGxheWVySW5mbyIqChVDMlNfRGFuY2VS",
          "ZWFkeVJlcXVlc3QSEQoJc2Vzc2lvbklkGAEgASgJIi8KGlMyQ19EYW5jZVJl",
          "YWR5Tm90aWZpY2F0aW9uEhEKCXNlc3Npb25JZBgBIAEoCSIvChpTMkNfRGFu",
          "Y2VTdGFydE5vdGlmaWNhdGlvbhIRCglzdGFydFRpbWUYASABKAMiUAobQzJT",
          "X0RhbmNlVGFibGVDcmVhdGVSZXF1ZXN0EhEKCXNlc3Npb25JZBgBIAEoCRIe",
          "CgpkYW5jZVBvb2xzGAIgAygLMgouRGFuY2VQb29sIjwKGlMyQ19EYW5jZVRh",
          "YmxlTm90aWZpY2F0aW9uEh4KCmRhbmNlUG9vbHMYASADKAsyCi5EYW5jZVBv",
          "b2wiSwoYQzJTX0RhbmNlS2V5UHJlc3NSZXF1ZXN0EhEKCXNlc3Npb25JZBgB",
          "IAEoCRIcCghwcmVzc0tleRgCIAEoDjIKLkRpcmVjdGlvbiJ3ChlTMkNfRGFu",
          "Y2VLZXlQcmVzc1Jlc3BvbnNlEg8KB3N1Y2Nlc3MYASABKAgSDwoHY29ycmVj",
          "dBgCIAEoCBIVCgVzdGF0ZRgDIAEoDjIGLlN0YXRlEiEKCGZhaWxDb2RlGAQg",
          "ASgOMg8uR2xvYmFsRmFpbENvZGUiWwodUzJDX0RhbmNlS2V5UHJlc3NOb3Rp",
          "ZmljYXRpb24SEgoKdGVhbU51bWJlchgBIAEoBRIPCgdjb3JyZWN0GAIgASgI",
          "EhUKBXN0YXRlGAMgASgOMgYuU3RhdGUifwodUzJDX0RhbmNlR2FtZU92ZXJO",
          "b3RpZmljYXRpb24SEAoIVGVhbVJhbmsYASADKAUSGwoGcmVzdWx0GAIgAygL",
          "MgsuVGVhbVJlc3VsdBIeCgZyZWFzb24YAyABKA4yDi5HYW1lRW5kUmVhc29u",
          "Eg8KB2VuZFRpbWUYBCABKAMiXwogUzJDX0RhbmNlQ2xvc2VTb2NrZXROb3Rp",
          "ZmljYXRpb24SHQoVZGlzY29ubmVjdGVkU2Vzc2lvbklkGAEgASgJEhwKFHJl",
          "cGxhY2VtZW50U2Vzc2lvbklkGAIgASgJIkMKHUMyU19EYW5jZVRhYmxlQ29t",
          "cGxldGVSZXF1ZXN0EhEKCXNlc3Npb25JZBgBIAEoCRIPCgdlbmRUaW1lGAIg",
          "ASgDIswBCiFTMkNfQm9tYk1pbmlHYW1lUmVhZHlOb3RpZmljYXRpb24SQAoH",
          "cGxheWVycxgBIAMoCzIvLlMyQ19Cb21iTWluaUdhbWVSZWFkeU5vdGlmaWNh",
          "dGlvbi5zdGFydFBsYXllcnMaZQoMc3RhcnRQbGF5ZXJzEhEKCXNlc3Npb25J",
          "ZBgBIAEoCRIZCghwb3NpdGlvbhgCIAEoCzIHLlZlY3RvchIQCghyb3RhdGlv",
          "bhgDIAEoAhIVCg1ib21iU2Vzc2lvbklkGAQgASgJIi0KGEMyU19Cb21iR2Ft",
          "ZVJlYWR5UmVxdWVzdBIRCglzZXNzaW9uSWQYASABKAkiMgodUzJDX0JvbWJH",
          "YW1lUmVhZHlOb3RpZmljYXRpb24SEQoJc2Vzc2lvbklkGAEgASgJIiMKIVMy",
          "Q19Cb21iTWluaUdhbWVTdGFydE5vdGlmaWNhdGlvbiJyChlDMlNfQm9tYlBs",
          "YXllclN5bmNSZXF1ZXN0EhEKCXNlc3Npb25JZBgBIAEoCRIZCghwb3NpdGlv",
          "bhgCIAEoCzIHLlZlY3RvchIQCghyb3RhdGlvbhgDIAEoAhIVCgVzdGF0ZRgE",
          "IAEoDjIGLlN0YXRlIncKHlMyQ19Cb21iUGxheWVyU3luY05vdGlmaWNhdGlv",
          "bhIRCglzZXNzaW9uSWQYASABKAkSGQoIcG9zaXRpb24YAiABKAsyBy5WZWN0",
          "b3ISEAoIcm90YXRpb24YAyABKAISFQoFc3RhdGUYBCABKA4yBi5TdGF0ZSJL",
          "Ch9TMkNfQm9tYlBsYXllckRlYXRoTm90aWZpY2F0aW9uEhEKCXNlc3Npb25J",
          "ZBgBIAEoCRIVCg1ib21iU2Vzc2lvbklkGAIgASgJIjwKE0MyU19Cb21iTW92",
          "ZVJlcXVlc3QSEQoJc2Vzc2lvbklkGAEgASgJEhIKCmJvbWJVc2VySWQYAiAB",
          "KAkiLQoYUzJDX0JvbWJNb3ZlTm90aWZpY2F0aW9uEhEKCXNlc3Npb25JZBgB",
          "IAEoCSKLAQocUzJDX0JvbWJHYW1lT3Zlck5vdGlmaWNhdGlvbhIxCgVyYW5r",
          "cxgBIAMoCzIiLlMyQ19Cb21iR2FtZU92ZXJOb3RpZmljYXRpb24uUmFuaxIP",
          "CgdlbmRUaW1lGAIgASgDGicKBFJhbmsSEQoJc2Vzc2lvbklkGAEgASgJEgwK",
          "BHJhbmsYAiABKAUitQEKIVMyQ19EYXJ0TWluaUdhbWVSZWFkeU5vdGlmaWNh",
          "dGlvbhJACgdwbGF5ZXJzGAEgAygLMi8uUzJDX0RhcnRNaW5pR2FtZVJlYWR5",
          "Tm90aWZpY2F0aW9uLnN0YXJ0UGxheWVycxpOCgxzdGFydFBsYXllcnMSEQoJ",
          "c2Vzc2lvbklkGAEgASgJEhkKCHBvc2l0aW9uGAIgASgLMgcuVmVjdG9yEhAK",
          "CHJvdGF0aW9uGAMgASgCIi0KGEMyU19EYXJ0R2FtZVJlYWR5UmVxdWVzdBIR",
          "CglzZXNzaW9uSWQYASABKAkiMgodUzJDX0RhcnRHYW1lUmVhZHlOb3RpZmlj",
          "YXRpb24SEQoJc2Vzc2lvbklkGAEgASgJIoEBChhDMlNfRGFydEdhbWVUaHJv",
          "d1JlcXVlc3QSEQoJc2Vzc2lvbklkGAEgASgJEhAKCGRpc3RhbmNlGAIgASgC",
          "EhYKBWFuZ2xlGAMgASgLMgcuVmVjdG9yEhkKCGxvY2F0aW9uGAQgASgLMgcu",
          "VmVjdG9yEg0KBXBvd2VyGAUgASgCIjYKIVMyQ19EYXJ0TWluaUdhbWVTdGFy",
          "dE5vdGlmaWNhdGlvbhIRCglzdGFydFRpbWUYASABKAMiPgodUzJDX0RhcnRH",
          "YW1lVGhyb3dOb3RpZmljYXRpb24SHQoGcmVzdWx0GAEgASgLMg0uRGFydEdh",
          "bWVEYXRhIp8BChxTMkNfRGFydEdhbWVPdmVyTm90aWZpY2F0aW9uEjEKBXJh",
          "bmtzGAEgAygLMiIuUzJDX0RhcnRHYW1lT3Zlck5vdGlmaWNhdGlvbi5SYW5r",
          "Eg8KB2VuZFRpbWUYAiABKAMaOwoEUmFuaxIRCglzZXNzaW9uSWQYASABKAkS",
          "DAoEcmFuaxgCIAEoBRISCgp0b3RhbFBvaW50GAMgASgFIkkKGUMyU19EYXJ0",
          "UGFubmVsU3luY1JlcXVlc3QSEQoJc2Vzc2lvbklkGAEgASgJEhkKCGxvY2F0",
          "aW9uGAIgASgLMgcuVmVjdG9yIk4KHlMyQ19EYXJ0UGFubmVsU3luY05vdGlm",
          "aWNhdGlvbhIRCglzZXNzaW9uSWQYASABKAkSGQoIbG9jYXRpb24YAiABKAsy",
          "By5WZWN0b3IiQAoTQzJTX0RhcnRTeW5jUmVxdWVzdBIRCglzZXNzaW9uSWQY",
          "ASABKAkSFgoFYW5nbGUYAiABKAsyBy5WZWN0b3IiRQoYUzJDX0RhcnRTeW5j",
          "Tm90aWZpY2F0aW9uEhEKCXNlc3Npb25JZBgBIAEoCRIWCgVhbmdsZRgCIAEo",
          "CzIHLlZlY3RvciKWNQoKR2FtZVBhY2tldBIvCg9yZWdpc3RlclJlcXVlc3QY",
          "ASABKAsyFC5DMlNfUmVnaXN0ZXJSZXF1ZXN0SAASMQoQcmVnaXN0ZXJSZXNw",
          "b25zZRgCIAEoCzIVLlMyQ19SZWdpc3RlclJlc3BvbnNlSAASKQoMbG9naW5S",
          "ZXF1ZXN0GAMgASgLMhEuQzJTX0xvZ2luUmVxdWVzdEgAEisKDWxvZ2luUmVz",
          "cG9uc2UYBCABKAsyEi5TMkNfTG9naW5SZXNwb25zZUgAEiwKDWxvZ291dFJl",
          "cXVlc3QYBSABKAsyEy5DMlNfTG9nZ291dFJlcXVlc3RIABI/ChdjbG9zZVNv",
          "Y2tldE5vdGlmaWNhdGlvbhgIIAEoCzIcLlMyQ19DbG9zZVNvY2tldE5vdGlm",
          "aWNhdGlvbkgAEjEKEGxvYmJ5Sm9pblJlcXVlc3QYCyABKAsyFS5DMlNfTG9i",
          "YnlKb2luUmVxdWVzdEgAEjMKEWxvYmJ5Sm9pblJlc3BvbnNlGAwgASgLMhYu",
          "UzJDX0xvYmJ5Sm9pblJlc3BvbnNlSAASMwoRbG9iYnlMZWF2ZVJlcXVlc3QY",
          "DSABKAsyFi5DMlNfTG9iYnlMZWF2ZVJlcXVlc3RIABI1ChJsb2JieUxlYXZl",
          "UmVzcG9uc2UYDiABKAsyFy5TMkNfTG9iYnlMZWF2ZVJlc3BvbnNlSAASOQoU",
          "bG9iYnlVc2VyTGlzdFJlcXVlc3QYDyABKAsyGS5DMlNfTG9iYnlVc2VyTGlz",
          "dFJlcXVlc3RIABI7ChVsb2JieVVzZXJMaXN0UmVzcG9uc2UYECABKAsyGi5T",
          "MkNfTG9iYnlVc2VyTGlzdFJlc3BvbnNlSAASPQoWbG9iYnlVc2VyRGV0YWls",
          "UmVxdWVzdBgRIAEoCzIbLkMyU19Mb2JieVVzZXJEZXRhaWxSZXF1ZXN0SAAS",
          "PwoXbG9iYnlVc2VyRGV0YWlsUmVzcG9uc2UYEiABKAsyHC5TMkNfTG9iYnlV",
          "c2VyRGV0YWlsUmVzcG9uc2VIABIvCg9yb29tTGlzdFJlcXVlc3QYHyABKAsy",
          "FC5DMlNfUm9vbUxpc3RSZXF1ZXN0SAASMQoQcm9vbUxpc3RSZXNwb25zZRgg",
          "IAEoCzIVLlMyQ19Sb29tTGlzdFJlc3BvbnNlSAASMwoRY3JlYXRlUm9vbVJl",
          "cXVlc3QYISABKAsyFi5DMlNfQ3JlYXRlUm9vbVJlcXVlc3RIABI1ChJjcmVh",
          "dGVSb29tUmVzcG9uc2UYIiABKAsyFy5TMkNfQ3JlYXRlUm9vbVJlc3BvbnNl",
          "SAASLwoPam9pblJvb21SZXF1ZXN0GCMgASgLMhQuQzJTX0pvaW5Sb29tUmVx",
          "dWVzdEgAEjEKEGpvaW5Sb29tUmVzcG9uc2UYJCABKAsyFS5TMkNfSm9pblJv",
          "b21SZXNwb25zZUgAEjkKFGpvaW5Sb29tTm90aWZpY2F0aW9uGCUgASgLMhku",
          "UzJDX0pvaW5Sb29tTm90aWZpY2F0aW9uSAASMQoQbGVhdmVSb29tUmVxdWVz",
          "dBgmIAEoCzIVLkMyU19MZWF2ZVJvb21SZXF1ZXN0SAASMwoRbGVhdmVSb29t",
          "UmVzcG9uc2UYJyABKAsyFi5TMkNfTGVhdmVSb29tUmVzcG9uc2VIABI7ChVs",
          "ZWF2ZVJvb21Ob3RpZmljYXRpb24YKCABKAsyGi5TMkNfTGVhdmVSb29tTm90",
          "aWZpY2F0aW9uSAASNQoSZ2FtZVByZXBhcmVSZXF1ZXN0GCkgASgLMhcuQzJT",
          "X0dhbWVQcmVwYXJlUmVxdWVzdEgAEjcKE2dhbWVQcmVwYXJlUmVzcG9uc2UY",
          "KiABKAsyGC5TMkNfR2FtZVByZXBhcmVSZXNwb25zZUgAEj8KF2dhbWVQcmVw",
          "YXJlTm90aWZpY2F0aW9uGCsgASgLMhwuUzJDX0dhbWVQcmVwYXJlTm90aWZp",
          "Y2F0aW9uSAASMQoQZ2FtZVN0YXJ0UmVxdWVzdBgzIAEoCzIVLkMyU19HYW1l",
          "U3RhcnRSZXF1ZXN0SAASOwoVZ2FtZVN0YXJ0Tm90aWZpY2F0aW9uGDQgASgL",
          "MhouUzJDX0dhbWVTdGFydE5vdGlmaWNhdGlvbkgAEi8KD3JvbGxEaWNlUmVx",
          "dWVzdBg9IAEoCzIULkMyU19Sb2xsRGljZVJlcXVlc3RIABIxChByb2xsRGlj",
          "ZVJlc3BvbnNlGD4gASgLMhUuUzJDX1JvbGxEaWNlUmVzcG9uc2VIABI5ChRy",
          "b2xsRGljZU5vdGlmaWNhdGlvbhg/IAEoCzIZLlMyQ19Sb2xsRGljZU5vdGlm",
          "aWNhdGlvbkgAEj0KFm1vdmVQbGF5ZXJCb2FyZFJlcXVlc3QYQCABKAsyGy5D",
          "MlNfTW92ZVBsYXllckJvYXJkUmVxdWVzdEgAEj8KF21vdmVQbGF5ZXJCb2Fy",
          "ZFJlc3BvbnNlGEEgASgLMhwuUzJDX01vdmVQbGF5ZXJCb2FyZFJlc3BvbnNl",
          "SAASRwobbW92ZVBsYXllckJvYXJkTm90aWZpY2F0aW9uGEIgASgLMiAuUzJD",
          "X01vdmVQbGF5ZXJCb2FyZE5vdGlmaWNhdGlvbkgAEjcKE3B1cmNoYXNlVGls",
          "ZVJlcXVlc3QYQyABKAsyGC5DMlNfUHVyY2hhc2VUaWxlUmVxdWVzdEgAEjkK",
          "FHB1cmNoYXNlVGlsZVJlc3BvbnNlGEQgASgLMhkuUzJDX1B1cmNoYXNlVGls",
          "ZVJlc3BvbnNlSAASQQoYcHVyY2hhc2VUaWxlTm90aWZpY2F0aW9uGEUgASgL",
          "Mh0uUzJDX1B1cmNoYXNlVGlsZU5vdGlmaWNhdGlvbkgAEjcKE2dhbWVFbmRO",
          "b3RpZmljYXRpb24YRiABKAsyGC5TMkNfR2FtZUVuZE5vdGlmaWNhdGlvbkgA",
          "EjsKFXB1cmNoYXNlVHJvcGh5UmVxdWVzdBhHIAEoCzIaLkMyU19QdXJjaGFz",
          "ZVRyb3BoeVJlcXVlc3RIABI9ChZwdXJjaGFzZVRyb3BoeVJlc3BvbnNlGEgg",
          "ASgLMhsuUzJDX1B1cmNoYXNlVHJvcGh5UmVzcG9uc2VIABJFChpwdXJjaGFz",
          "ZVRyb3BoeU5vdGlmaWNhdGlvbhhJIAEoCzIfLlMyQ19QdXJjaGFzZVRyb3Bo",
          "eU5vdGlmaWNhdGlvbkgAEjUKEnRpbGVQZW5hbHR5UmVxdWVzdBhKIAEoCzIX",
          "LkMyU19UaWxlUGVuYWx0eVJlcXVlc3RIABI3ChN0aWxlUGVuYWx0eVJlc3Bv",
          "bnNlGEsgASgLMhguUzJDX1RpbGVQZW5hbHR5UmVzcG9uc2VIABI/Chd0aWxl",
          "UGVuYWx0eU5vdGlmaWNhdGlvbhhMIAEoCzIcLlMyQ19UaWxlUGVuYWx0eU5v",
          "dGlmaWNhdGlvbkgAEi8KD2RpY2VHYW1lUmVxdWVzdBhNIAEoCzIULkMyU19E",
          "aWNlR2FtZVJlcXVlc3RIABIxChBkaWNlR2FtZVJlc3BvbnNlGE4gASgLMhUu",
          "UzJDX0RpY2VHYW1lUmVzcG9uc2VIABI5ChRkaWNlR2FtZU5vdGlmaWNhdGlv",
          "bhhPIAEoCzIZLlMyQ19EaWNlR2FtZU5vdGlmaWNhdGlvbkgAEi0KDnR1cm5F",
          "bmRSZXF1ZXN0GFAgASgLMhMuQzJTX1R1cm5FbmRSZXF1ZXN0SAASNwoTdHVy",
          "bkVuZE5vdGlmaWNhdGlvbhhRIAEoCzIYLlMyQ19UdXJuRW5kTm90aWZpY2F0",
          "aW9uSAASOQoUYmFja1RvVGhlUm9vbVJlcXVlc3QYWyABKAsyGS5DMlNfQmFj",
          "a1RvVGhlUm9vbVJlcXVlc3RIABI7ChViYWNrVG9UaGVSb29tUmVzcG9uc2UY",
          "XCABKAsyGi5TMkNfQmFja1RvVGhlUm9vbVJlc3BvbnNlSAASQwoZYmFja1Rv",
          "VGhlUm9vbU5vdGlmaWNhdGlvbhhdIAEoCzIeLlMyQ19CYWNrVG9UaGVSb29t",
          "Tm90aWZpY2F0aW9uSAASOQoUc3RhcnRNaW5pR2FtZVJlcXVlc3QYZSABKAsy",
          "GS5DMlNfU3RhcnRNaW5pR2FtZVJlcXVlc3RIABJKChxpY2VNaW5pR2FtZVJl",
          "YWR5Tm90aWZpY2F0aW9uGMkBIAEoCzIhLlMyQ19JY2VNaW5pR2FtZVJlYWR5",
          "Tm90aWZpY2F0aW9uSAASOAoTaWNlR2FtZVJlYWR5UmVxdWVzdBjKASABKAsy",
          "GC5DMlNfSWNlR2FtZVJlYWR5UmVxdWVzdEgAEkIKGGljZUdhbWVSZWFkeU5v",
          "dGlmaWNhdGlvbhjLASABKAsyHS5TMkNfSWNlR2FtZVJlYWR5Tm90aWZpY2F0",
          "aW9uSAASSgocaWNlTWluaUdhbWVTdGFydE5vdGlmaWNhdGlvbhjMASABKAsy",
          "IS5TMkNfSWNlTWluaUdhbWVTdGFydE5vdGlmaWNhdGlvbkgAEjoKFGljZVBs",
          "YXllclN5bmNSZXF1ZXN0GM0BIAEoCzIZLkMyU19JY2VQbGF5ZXJTeW5jUmVx",
          "dWVzdEgAEkQKGWljZVBsYXllclN5bmNOb3RpZmljYXRpb24YzgEgASgLMh4u",
          "UzJDX0ljZVBsYXllclN5bmNOb3RpZmljYXRpb25IABI+ChZpY2VQbGF5ZXJE",
          "YW1hZ2VSZXF1ZXN0GM8BIAEoCzIbLkMyU19JY2VQbGF5ZXJEYW1hZ2VSZXF1",
          "ZXN0SAASSAobaWNlUGxheWVyRGFtYWdlTm90aWZpY2F0aW9uGNABIAEoCzIg",
          "LlMyQ19JY2VQbGF5ZXJEYW1hZ2VOb3RpZmljYXRpb25IABJGChppY2VQbGF5",
          "ZXJEZWF0aE5vdGlmaWNhdGlvbhjRASABKAsyHy5TMkNfSWNlUGxheWVyRGVh",
          "dGhOb3RpZmljYXRpb25IABJAChdpY2VHYW1lT3Zlck5vdGlmaWNhdGlvbhjS",
          "ASABKAsyHC5TMkNfSWNlR2FtZU92ZXJOb3RpZmljYXRpb25IABI+ChZpY2VN",
          "YXBTeW5jTm90aWZpY2F0aW9uGNMBIAEoCzIbLlMyQ19JY2VNYXBTeW5jTm90",
          "aWZpY2F0aW9uSAASRAoZaWNlUGxheWVyRXhpdE5vdGlmaWNhdGlvbhjUASAB",
          "KAsyHi5TMkNfSWNlUGxheWVyRXhpdE5vdGlmaWNhdGlvbkgAEkwKHWRyb3BN",
          "aW5pR2FtZVJlYWR5Tm90aWZpY2F0aW9uGK0CIAEoCzIiLlMyQ19Ecm9wTWlu",
          "aUdhbWVSZWFkeU5vdGlmaWNhdGlvbkgAEjoKFGRyb3BHYW1lUmVhZHlSZXF1",
          "ZXN0GK4CIAEoCzIZLkMyU19Ecm9wR2FtZVJlYWR5UmVxdWVzdEgAEkQKGWRy",
          "b3BHYW1lUmVhZHlOb3RpZmljYXRpb24YrwIgASgLMh4uUzJDX0Ryb3BHYW1l",
          "UmVhZHlOb3RpZmljYXRpb25IABJMCh1kcm9wTWluaUdhbWVTdGFydE5vdGlm",
          "aWNhdGlvbhiwAiABKAsyIi5TMkNfRHJvcE1pbmlHYW1lU3RhcnROb3RpZmlj",
          "YXRpb25IABI8ChVkcm9wUGxheWVyU3luY1JlcXVlc3QYsQIgASgLMhouQzJT",
          "X0Ryb3BQbGF5ZXJTeW5jUmVxdWVzdEgAEkYKGmRyb3BQbGF5ZXJTeW5jTm90",
          "aWZpY2F0aW9uGLICIAEoCzIfLlMyQ19Ecm9wUGxheWVyU3luY05vdGlmaWNh",
          "dGlvbkgAEkgKG2Ryb3BQbGF5ZXJEZWF0aE5vdGlmaWNhdGlvbhizAiABKAsy",
          "IC5TMkNfRHJvcFBsYXllckRlYXRoTm90aWZpY2F0aW9uSAASRgoaZHJvcExl",
          "dmVsU3RhcnROb3RpZmljYXRpb24YtAIgASgLMh8uUzJDX0Ryb3BMZXZlbFN0",
          "YXJ0Tm90aWZpY2F0aW9uSAASQgoYZHJvcExldmVsRW5kTm90aWZpY2F0aW9u",
          "GLUCIAEoCzIdLlMyQ19Ecm9wTGV2ZWxFbmROb3RpZmljYXRpb25IABJCChhk",
          "cm9wR2FtZU92ZXJOb3RpZmljYXRpb24YtgIgASgLMh0uUzJDX0Ryb3BHYW1l",
          "T3Zlck5vdGlmaWNhdGlvbkgAEk4KHmRhbmNlTWluaUdhbWVSZWFkeU5vdGlm",
          "aWNhdGlvbhiRAyABKAsyIy5TMkNfRGFuY2VNaW5pR2FtZVJlYWR5Tm90aWZp",
          "Y2F0aW9uSAASNAoRZGFuY2VSZWFkeVJlcXVlc3QYkgMgASgLMhYuQzJTX0Rh",
          "bmNlUmVhZHlSZXF1ZXN0SAASPgoWZGFuY2VSZWFkeU5vdGlmaWNhdGlvbhiT",
          "AyABKAsyGy5TMkNfRGFuY2VSZWFkeU5vdGlmaWNhdGlvbkgAEj4KFmRhbmNl",
          "U3RhcnROb3RpZmljYXRpb24YlAMgASgLMhsuUzJDX0RhbmNlU3RhcnROb3Rp",
          "ZmljYXRpb25IABJAChdkYW5jZVRhYmxlQ3JlYXRlUmVxdWVzdBiVAyABKAsy",
          "HC5DMlNfRGFuY2VUYWJsZUNyZWF0ZVJlcXVlc3RIABI+ChZkYW5jZVRhYmxl",
          "Tm90aWZpY2F0aW9uGJYDIAEoCzIbLlMyQ19EYW5jZVRhYmxlTm90aWZpY2F0",
          "aW9uSAASOgoUZGFuY2VLZXlQcmVzc1JlcXVlc3QYlwMgASgLMhkuQzJTX0Rh",
          "bmNlS2V5UHJlc3NSZXF1ZXN0SAASPAoVZGFuY2VLZXlQcmVzc1Jlc3BvbnNl",
          "GJgDIAEoCzIaLlMyQ19EYW5jZUtleVByZXNzUmVzcG9uc2VIABJEChlkYW5j",
          "ZUtleVByZXNzTm90aWZpY2F0aW9uGJkDIAEoCzIeLlMyQ19EYW5jZUtleVBy",
          "ZXNzTm90aWZpY2F0aW9uSAASRAoZZGFuY2VHYW1lT3Zlck5vdGlmaWNhdGlv",
          "bhiaAyABKAsyHi5TMkNfRGFuY2VHYW1lT3Zlck5vdGlmaWNhdGlvbkgAEkoK",
          "HGRhbmNlQ2xvc2VTb2NrZXROb3RpZmljYXRpb24YmwMgASgLMiEuUzJDX0Rh",
          "bmNlQ2xvc2VTb2NrZXROb3RpZmljYXRpb25IABJEChlkYW5jZVRhYmxlQ29t",
          "cGxldGVSZXF1ZXN0GJwDIAEoCzIeLkMyU19EYW5jZVRhYmxlQ29tcGxldGVS",
          "ZXF1ZXN0SAASTAodYm9tYk1pbmlHYW1lUmVhZHlOb3RpZmljYXRpb24Y9QMg",
          "ASgLMiIuUzJDX0JvbWJNaW5pR2FtZVJlYWR5Tm90aWZpY2F0aW9uSAASOgoU",
          "Ym9tYkdhbWVSZWFkeVJlcXVlc3QY9gMgASgLMhkuQzJTX0JvbWJHYW1lUmVh",
          "ZHlSZXF1ZXN0SAASRAoZYm9tYkdhbWVSZWFkeU5vdGlmaWNhdGlvbhj3AyAB",
          "KAsyHi5TMkNfQm9tYkdhbWVSZWFkeU5vdGlmaWNhdGlvbkgAEkwKHWJvbWJN",
          "aW5pR2FtZVN0YXJ0Tm90aWZpY2F0aW9uGPgDIAEoCzIiLlMyQ19Cb21iTWlu",
          "aUdhbWVTdGFydE5vdGlmaWNhdGlvbkgAEjwKFWJvbWJQbGF5ZXJTeW5jUmVx",
          "dWVzdBj5AyABKAsyGi5DMlNfQm9tYlBsYXllclN5bmNSZXF1ZXN0SAASRgoa",
          "Ym9tYlBsYXllclN5bmNOb3RpZmljYXRpb24Y+gMgASgLMh8uUzJDX0JvbWJQ",
          "bGF5ZXJTeW5jTm90aWZpY2F0aW9uSAASSAobYm9tYlBsYXllckRlYXRoTm90",
          "aWZpY2F0aW9uGPsDIAEoCzIgLlMyQ19Cb21iUGxheWVyRGVhdGhOb3RpZmlj",
          "YXRpb25IABIwCg9ib21iTW92ZVJlcXVlc3QY/AMgASgLMhQuQzJTX0JvbWJN",
          "b3ZlUmVxdWVzdEgAEjoKFGJvbWJNb3ZlTm90aWZpY2F0aW9uGP0DIAEoCzIZ",
          "LlMyQ19Cb21iTW92ZU5vdGlmaWNhdGlvbkgAEkIKGGJvbWJHYW1lT3Zlck5v",
          "dGlmaWNhdGlvbhj+AyABKAsyHS5TMkNfQm9tYkdhbWVPdmVyTm90aWZpY2F0",
          "aW9uSAASTAodZGFydE1pbmlHYW1lUmVhZHlOb3RpZmljYXRpb24Y2QQgASgL",
          "MiIuUzJDX0RhcnRNaW5pR2FtZVJlYWR5Tm90aWZpY2F0aW9uSAASOgoUZGFy",
          "dEdhbWVSZWFkeVJlcXVlc3QY2gQgASgLMhkuQzJTX0RhcnRHYW1lUmVhZHlS",
          "ZXF1ZXN0SAASRAoZZGFydEdhbWVSZWFkeU5vdGlmaWNhdGlvbhjbBCABKAsy",
          "Hi5TMkNfRGFydEdhbWVSZWFkeU5vdGlmaWNhdGlvbkgAEkwKHWRhcnRNaW5p",
          "R2FtZVN0YXJ0Tm90aWZpY2F0aW9uGNwEIAEoCzIiLlMyQ19EYXJ0TWluaUdh",
          "bWVTdGFydE5vdGlmaWNhdGlvbkgAEjoKFGRhcnRHYW1lVGhyb3dSZXF1ZXN0",
          "GN0EIAEoCzIZLkMyU19EYXJ0R2FtZVRocm93UmVxdWVzdEgAEkQKGWRhcnRH",
          "YW1lVGhyb3dOb3RpZmljYXRpb24Y3gQgASgLMh4uUzJDX0RhcnRHYW1lVGhy",
          "b3dOb3RpZmljYXRpb25IABJCChhkYXJ0R2FtZU92ZXJOb3RpZmljYXRpb24Y",
          "3wQgASgLMh0uUzJDX0RhcnRHYW1lT3Zlck5vdGlmaWNhdGlvbkgAEjwKFWRh",
          "cnRQYW5uZWxTeW5jUmVxdWVzdBjgBCABKAsyGi5DMlNfRGFydFBhbm5lbFN5",
          "bmNSZXF1ZXN0SAASRgoaZGFydFBhbm5lbFN5bmNOb3RpZmljYXRpb24Y4QQg",
          "ASgLMh8uUzJDX0RhcnRQYW5uZWxTeW5jTm90aWZpY2F0aW9uSAASMAoPZGFy",
          "dFN5bmNSZXF1ZXN0GOIEIAEoCzIULkMyU19EYXJ0U3luY1JlcXVlc3RIABI6",
          "ChRkYXJ0U3luY05vdGlmaWNhdGlvbhjjBCABKAsyGS5TMkNfRGFydFN5bmNO",
          "b3RpZmljYXRpb25IAEIJCgdwYXlsb2FkKjsKDVJvb21TdGF0ZVR5cGUSCAoE",
          "V0FJVBAAEgsKB1BSRVBBUkUQARIJCgVCT0FSRBACEggKBE1JTkkQAyqwBAoO",
          "R2xvYmFsRmFpbENvZGUSEQoNTk9ORV9GQUlMQ09ERRAAEhEKDVVOS05PV05f",
          "RVJST1IQARITCg9JTlZBTElEX1JFUVVFU1QQAhIZChVBVVRIRU5USUNBVElP",
          "Tl9GQUlMRUQQAxIXChNJRF9PUl9QQVNTV09SRF9NSVNTEGQSHgoaTk9UX01B",
          "VENIX1BBU1NXT1JEX0NPTkZJUk0QZRIUChBBTFJFQURZX0VYSVNUX0lEEGYS",
          "GAoUQUxSRUFEWV9MT0dHRURfSU5fSUQQZxITCg9WQUxJREFJT05fRVJST1IQ",
          "aBIaChZBTFJFQURZX0VYSVNUX05JQ0tOQU1FEGkSEwoOVVNFUl9OT1RfRk9V",
          "TkQQyAESFQoQQUxSRUFEWV9JTl9MT0JCWRDJARIWChFVU0VSX05PVF9JTl9M",
          "T0JCWRDKARIaChVMT0JCWV9VU0VSX0xJU1RfRVJST1IQywESEAoLV1JPTkdf",
          "TE9CQlkQzAESEwoOUk9PTV9OT1RfRk9VTkQQrAISGQoUVVNFUl9BTFJFQURZ",
          "X0lOX1JPT00QrQISFQoQVVNFUl9OT1RfSU5fUk9PTRCuAhIXChJJTlZBTElE",
          "X1JPT01fU1RBVEUQrwISFwoST1dORVJfQ0FOTk9UX1JFQURZELACEhEKDFJP",
          "T01fSVNfRlVMTBCxAhITCg5HQU1FX05PVF9GT1VORBD0AxIbChZVU0VSX0lO",
          "X0dBTUVfTk9UX0ZPVU5EEPUDKoMBCgVTdGF0ZRIICgRJRExFEAASCAoETU9W",
          "RRABEgcKA0RJRRACEgwKCERBTkNFX1VQEAMSDgoKREFOQ0VfRE9XThAEEg4K",
          "CkRBTkNFX0xFRlQQBRIPCgtEQU5DRV9SSUdIVBAGEg4KCkRBTkNFX0ZBSUwQ",
          "BxIOCgpEQU5DRV9XQUlUEAgqNAoJRGlyZWN0aW9uEgYKAlVQEAASCQoERE9X",
          "ThC0ARIICgRMRUZUEFoSCgoFUklHSFQQjgIqLAoNR2FtZUVuZFJlYXNvbhIN",
          "CglUSU1FX09WRVIQABIMCghDT01QTEVURRABYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::RoomStateType), typeof(global::GlobalFailCode), typeof(global::State), typeof(global::Direction), typeof(global::GameEndReason), }, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::UserData), global::UserData.Parser, new[]{ "SessionId", "Nickname" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RoomData), global::RoomData.Parser, new[]{ "RoomId", "OwnerId", "RoomName", "LobbyId", "State", "Users", "MaxUser", "ReadyUsers" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Vector), global::Vector.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Rank), global::Rank.Parser, new[]{ "SessionId", "Rank_" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BoardPlayerData), global::BoardPlayerData.Parser, new[]{ "SessionId", "Gold", "Trophy", "TileLocation" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DiceGameData), global::DiceGameData.Parser, new[]{ "SessionId", "Value", "Rank", "Distance", "Angle", "Location", "Power" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DartGameData), global::DartGameData.Parser, new[]{ "SessionId", "Rank", "Distance", "Angle", "Location", "Power" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DancePool), global::DancePool.Parser, new[]{ "TeamNumber", "DanceTables" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DanceTable), global::DanceTable.Parser, new[]{ "Commands" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DanceCommand), global::DanceCommand.Parser, new[]{ "Direction", "TargetSessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerInfo), global::PlayerInfo.Parser, new[]{ "SessionId", "TeamNumber" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TeamResult), global::TeamResult.Parser, new[]{ "SessionId", "Score", "EndTime" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_RegisterRequest), global::C2S_RegisterRequest.Parser, new[]{ "LoginId", "Password", "PasswordConfirm", "Nickname" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_RegisterResponse), global::S2C_RegisterResponse.Parser, new[]{ "Success", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_LoginRequest), global::C2S_LoginRequest.Parser, new[]{ "LoginId", "Password" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_LoginResponse), global::S2C_LoginResponse.Parser, new[]{ "Success", "SessionId", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_LoggoutRequest), global::C2S_LoggoutRequest.Parser, new[]{ "SessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_CloseSocketNotification), global::S2C_CloseSocketNotification.Parser, new[]{ "SessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_GameStartRequest), global::C2S_GameStartRequest.Parser, new[]{ "SessionId", "Turn" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_GameStartNotification), global::S2C_GameStartNotification.Parser, new[]{ "Success", "Players", "FailCode" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::S2C_GameStartNotification.Types.PlayerData), global::S2C_GameStartNotification.Types.PlayerData.Parser, new[]{ "UserId", "Nickname", "Position" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_RollDiceRequest), global::C2S_RollDiceRequest.Parser, new[]{ "SessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_RollDiceResponse), global::S2C_RollDiceResponse.Parser, new[]{ "Success", "DiceResult", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_RollDiceNotification), global::S2C_RollDiceNotification.Parser, new[]{ "SessionId", "DiceResult" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_MovePlayerBoardRequest), global::C2S_MovePlayerBoardRequest.Parser, new[]{ "SessionId", "TargetPoint", "Rotation" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_MovePlayerBoardResponse), global::S2C_MovePlayerBoardResponse.Parser, new[]{ "Success", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_MovePlayerBoardNotification), global::S2C_MovePlayerBoardNotification.Parser, new[]{ "SessionId", "TargetPoint", "Rotation" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_PurchaseTileRequest), global::C2S_PurchaseTileRequest.Parser, new[]{ "SessionId", "Tile" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_PurchaseTileResponse), global::S2C_PurchaseTileResponse.Parser, new[]{ "Success", "Tile", "PlayerInfo", "PurchaseGold", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_PurchaseTileNotification), global::S2C_PurchaseTileNotification.Parser, new[]{ "SessionId", "Tile", "PlayerInfo", "PurchaseGold" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_GameEndNotification), global::S2C_GameEndNotification.Parser, new[]{ "Rank" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_BackToTheRoomRequest), global::C2S_BackToTheRoomRequest.Parser, new[]{ "SessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_BackToTheRoomResponse), global::S2C_BackToTheRoomResponse.Parser, new[]{ "Success", "Room", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_BackToTheRoomNotification), global::S2C_BackToTheRoomNotification.Parser, new[]{ "SessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_StartMiniGameRequest), global::C2S_StartMiniGameRequest.Parser, new[]{ "SessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_StartMiniGameNotification), global::S2C_StartMiniGameNotification.Parser, new[]{ "Game" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_PurchaseTrophyRequest), global::C2S_PurchaseTrophyRequest.Parser, new[]{ "SessionId", "Tile" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_PurchaseTrophyResponse), global::S2C_PurchaseTrophyResponse.Parser, new[]{ "Success", "NextTile", "PlayerInfo", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_PurchaseTrophyNotification), global::S2C_PurchaseTrophyNotification.Parser, new[]{ "SessionId", "BeforeTile", "NextTile", "PlayersInfo" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_TilePenaltyRequest), global::C2S_TilePenaltyRequest.Parser, new[]{ "SessionId", "Tile" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_TilePenaltyResponse), global::S2C_TilePenaltyResponse.Parser, new[]{ "Success", "PlayersInfo", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_TilePenaltyNotification), global::S2C_TilePenaltyNotification.Parser, new[]{ "SessionId", "Tile", "PlayersInfo" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_DiceGameRequest), global::C2S_DiceGameRequest.Parser, new[]{ "SessionId", "Distance", "Angle", "Location", "Power" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_DiceGameResponse), global::S2C_DiceGameResponse.Parser, new[]{ "Success", "Result", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_DiceGameNotification), global::S2C_DiceGameNotification.Parser, new[]{ "Result" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_TurnEndRequest), global::C2S_TurnEndRequest.Parser, new[]{ "SessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_TurnEndNotification), global::S2C_TurnEndNotification.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_LobbyJoinRequest), global::C2S_LobbyJoinRequest.Parser, new[]{ "SessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_LobbyJoinResponse), global::S2C_LobbyJoinResponse.Parser, new[]{ "Success", "User", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_LobbyLeaveRequest), global::C2S_LobbyLeaveRequest.Parser, new[]{ "SessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_LobbyLeaveResponse), global::S2C_LobbyLeaveResponse.Parser, new[]{ "Success", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_LobbyUserListRequest), global::C2S_LobbyUserListRequest.Parser, new[]{ "SessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_LobbyUserListResponse), global::S2C_LobbyUserListResponse.Parser, new[]{ "Success", "UserList", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_LobbyUserDetailRequest), global::C2S_LobbyUserDetailRequest.Parser, new[]{ "SessionId", "TargetSessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_LobbyUserDetailResponse), global::S2C_LobbyUserDetailResponse.Parser, new[]{ "Success", "User", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_RoomListRequest), global::C2S_RoomListRequest.Parser, new[]{ "SessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_RoomListResponse), global::S2C_RoomListResponse.Parser, new[]{ "Success", "Rooms", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_CreateRoomRequest), global::C2S_CreateRoomRequest.Parser, new[]{ "SessionId", "RoomName" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_CreateRoomResponse), global::S2C_CreateRoomResponse.Parser, new[]{ "Success", "Room", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_JoinRoomRequest), global::C2S_JoinRoomRequest.Parser, new[]{ "SessionId", "RoomId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_JoinRoomResponse), global::S2C_JoinRoomResponse.Parser, new[]{ "Success", "Room", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_JoinRoomNotification), global::S2C_JoinRoomNotification.Parser, new[]{ "Room" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_LeaveRoomRequest), global::C2S_LeaveRoomRequest.Parser, new[]{ "SessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_LeaveRoomResponse), global::S2C_LeaveRoomResponse.Parser, new[]{ "Success", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_LeaveRoomNotification), global::S2C_LeaveRoomNotification.Parser, new[]{ "Room" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_GamePrepareRequest), global::C2S_GamePrepareRequest.Parser, new[]{ "SessionId", "IsReady" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_GamePrepareResponse), global::S2C_GamePrepareResponse.Parser, new[]{ "Success", "IsReady", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_GamePrepareNotification), global::S2C_GamePrepareNotification.Parser, new[]{ "User", "IsReady", "State" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_IceMiniGameReadyNotification), global::S2C_IceMiniGameReadyNotification.Parser, new[]{ "Players" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::S2C_IceMiniGameReadyNotification.Types.startPlayers), global::S2C_IceMiniGameReadyNotification.Types.startPlayers.Parser, new[]{ "SessionId", "Position", "Rotation" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_IceGameReadyRequest), global::C2S_IceGameReadyRequest.Parser, new[]{ "SessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_IceGameReadyNotification), global::S2C_IceGameReadyNotification.Parser, new[]{ "SessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_IceMiniGameStartNotification), global::S2C_IceMiniGameStartNotification.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_IcePlayerSyncRequest), global::C2S_IcePlayerSyncRequest.Parser, new[]{ "SessionId", "Position", "Rotation", "State" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_IcePlayerSyncNotification), global::S2C_IcePlayerSyncNotification.Parser, new[]{ "SessionId", "Position", "Rotation", "State" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_IcePlayerDamageRequest), global::C2S_IcePlayerDamageRequest.Parser, new[]{ "SessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_IcePlayerDamageNotification), global::S2C_IcePlayerDamageNotification.Parser, new[]{ "SessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_IcePlayerDeathNotification), global::S2C_IcePlayerDeathNotification.Parser, new[]{ "SessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_IceMapSyncNotification), global::S2C_IceMapSyncNotification.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_IceGameOverNotification), global::S2C_IceGameOverNotification.Parser, new[]{ "Ranks", "EndTime" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_IcePlayerExitNotification), global::S2C_IcePlayerExitNotification.Parser, new[]{ "SessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_DropMiniGameReadyNotification), global::S2C_DropMiniGameReadyNotification.Parser, new[]{ "Players" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::S2C_DropMiniGameReadyNotification.Types.startPlayers), global::S2C_DropMiniGameReadyNotification.Types.startPlayers.Parser, new[]{ "SessionId", "Slot", "Rotation" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_DropGameReadyRequest), global::C2S_DropGameReadyRequest.Parser, new[]{ "SessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_DropGameReadyNotification), global::S2C_DropGameReadyNotification.Parser, new[]{ "SessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_DropMiniGameStartNotification), global::S2C_DropMiniGameStartNotification.Parser, new[]{ "StartTime" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_DropPlayerSyncRequest), global::C2S_DropPlayerSyncRequest.Parser, new[]{ "SessionId", "Slot", "Rotation", "State" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_DropPlayerSyncNotification), global::S2C_DropPlayerSyncNotification.Parser, new[]{ "SessionId", "Slot", "Rotation", "State" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_DropPlayerDeathNotification), global::S2C_DropPlayerDeathNotification.Parser, new[]{ "SessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_DropLevelStartNotification), global::S2C_DropLevelStartNotification.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_DropLevelEndNotification), global::S2C_DropLevelEndNotification.Parser, new[]{ "Holes" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_DropGameOverNotification), global::S2C_DropGameOverNotification.Parser, new[]{ "Ranks", "EndTime" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_DanceMiniGameReadyNotification), global::S2C_DanceMiniGameReadyNotification.Parser, new[]{ "Players" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_DanceReadyRequest), global::C2S_DanceReadyRequest.Parser, new[]{ "SessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_DanceReadyNotification), global::S2C_DanceReadyNotification.Parser, new[]{ "SessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_DanceStartNotification), global::S2C_DanceStartNotification.Parser, new[]{ "StartTime" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_DanceTableCreateRequest), global::C2S_DanceTableCreateRequest.Parser, new[]{ "SessionId", "DancePools" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_DanceTableNotification), global::S2C_DanceTableNotification.Parser, new[]{ "DancePools" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_DanceKeyPressRequest), global::C2S_DanceKeyPressRequest.Parser, new[]{ "SessionId", "PressKey" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_DanceKeyPressResponse), global::S2C_DanceKeyPressResponse.Parser, new[]{ "Success", "Correct", "State", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_DanceKeyPressNotification), global::S2C_DanceKeyPressNotification.Parser, new[]{ "TeamNumber", "Correct", "State" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_DanceGameOverNotification), global::S2C_DanceGameOverNotification.Parser, new[]{ "TeamRank", "Result", "Reason", "EndTime" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_DanceCloseSocketNotification), global::S2C_DanceCloseSocketNotification.Parser, new[]{ "DisconnectedSessionId", "ReplacementSessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_DanceTableCompleteRequest), global::C2S_DanceTableCompleteRequest.Parser, new[]{ "SessionId", "EndTime" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_BombMiniGameReadyNotification), global::S2C_BombMiniGameReadyNotification.Parser, new[]{ "Players" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::S2C_BombMiniGameReadyNotification.Types.startPlayers), global::S2C_BombMiniGameReadyNotification.Types.startPlayers.Parser, new[]{ "SessionId", "Position", "Rotation", "BombSessionId" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_BombGameReadyRequest), global::C2S_BombGameReadyRequest.Parser, new[]{ "SessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_BombGameReadyNotification), global::S2C_BombGameReadyNotification.Parser, new[]{ "SessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_BombMiniGameStartNotification), global::S2C_BombMiniGameStartNotification.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_BombPlayerSyncRequest), global::C2S_BombPlayerSyncRequest.Parser, new[]{ "SessionId", "Position", "Rotation", "State" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_BombPlayerSyncNotification), global::S2C_BombPlayerSyncNotification.Parser, new[]{ "SessionId", "Position", "Rotation", "State" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_BombPlayerDeathNotification), global::S2C_BombPlayerDeathNotification.Parser, new[]{ "SessionId", "BombSessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_BombMoveRequest), global::C2S_BombMoveRequest.Parser, new[]{ "SessionId", "BombUserId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_BombMoveNotification), global::S2C_BombMoveNotification.Parser, new[]{ "SessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_BombGameOverNotification), global::S2C_BombGameOverNotification.Parser, new[]{ "Ranks", "EndTime" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::S2C_BombGameOverNotification.Types.Rank), global::S2C_BombGameOverNotification.Types.Rank.Parser, new[]{ "SessionId", "Rank_" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_DartMiniGameReadyNotification), global::S2C_DartMiniGameReadyNotification.Parser, new[]{ "Players" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::S2C_DartMiniGameReadyNotification.Types.startPlayers), global::S2C_DartMiniGameReadyNotification.Types.startPlayers.Parser, new[]{ "SessionId", "Position", "Rotation" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_DartGameReadyRequest), global::C2S_DartGameReadyRequest.Parser, new[]{ "SessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_DartGameReadyNotification), global::S2C_DartGameReadyNotification.Parser, new[]{ "SessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_DartGameThrowRequest), global::C2S_DartGameThrowRequest.Parser, new[]{ "SessionId", "Distance", "Angle", "Location", "Power" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_DartMiniGameStartNotification), global::S2C_DartMiniGameStartNotification.Parser, new[]{ "StartTime" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_DartGameThrowNotification), global::S2C_DartGameThrowNotification.Parser, new[]{ "Result" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_DartGameOverNotification), global::S2C_DartGameOverNotification.Parser, new[]{ "Ranks", "EndTime" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::S2C_DartGameOverNotification.Types.Rank), global::S2C_DartGameOverNotification.Types.Rank.Parser, new[]{ "SessionId", "Rank_", "TotalPoint" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_DartPannelSyncRequest), global::C2S_DartPannelSyncRequest.Parser, new[]{ "SessionId", "Location" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_DartPannelSyncNotification), global::S2C_DartPannelSyncNotification.Parser, new[]{ "SessionId", "Location" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2S_DartSyncRequest), global::C2S_DartSyncRequest.Parser, new[]{ "SessionId", "Angle" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2C_DartSyncNotification), global::S2C_DartSyncNotification.Parser, new[]{ "SessionId", "Angle" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GamePacket), global::GamePacket.Parser, new[]{ "RegisterRequest", "RegisterResponse", "LoginRequest", "LoginResponse", "LogoutRequest", "CloseSocketNotification", "LobbyJoinRequest", "LobbyJoinResponse", "LobbyLeaveRequest", "LobbyLeaveResponse", "LobbyUserListRequest", "LobbyUserListResponse", "LobbyUserDetailRequest", "LobbyUserDetailResponse", "RoomListRequest", "RoomListResponse", "CreateRoomRequest", "CreateRoomResponse", "JoinRoomRequest", "JoinRoomResponse", "JoinRoomNotification", "LeaveRoomRequest", "LeaveRoomResponse", "LeaveRoomNotification", "GamePrepareRequest", "GamePrepareResponse", "GamePrepareNotification", "GameStartRequest", "GameStartNotification", "RollDiceRequest", "RollDiceResponse", "RollDiceNotification", "MovePlayerBoardRequest", "MovePlayerBoardResponse", "MovePlayerBoardNotification", "PurchaseTileRequest", "PurchaseTileResponse", "PurchaseTileNotification", "GameEndNotification", "PurchaseTrophyRequest", "PurchaseTrophyResponse", "PurchaseTrophyNotification", "TilePenaltyRequest", "TilePenaltyResponse", "TilePenaltyNotification", "DiceGameRequest", "DiceGameResponse", "DiceGameNotification", "TurnEndRequest", "TurnEndNotification", "BackToTheRoomRequest", "BackToTheRoomResponse", "BackToTheRoomNotification", "StartMiniGameRequest", "IceMiniGameReadyNotification", "IceGameReadyRequest", "IceGameReadyNotification", "IceMiniGameStartNotification", "IcePlayerSyncRequest", "IcePlayerSyncNotification", "IcePlayerDamageRequest", "IcePlayerDamageNotification", "IcePlayerDeathNotification", "IceGameOverNotification", "IceMapSyncNotification", "IcePlayerExitNotification", "DropMiniGameReadyNotification", "DropGameReadyRequest", "DropGameReadyNotification", "DropMiniGameStartNotification", "DropPlayerSyncRequest", "DropPlayerSyncNotification", "DropPlayerDeathNotification", "DropLevelStartNotification", "DropLevelEndNotification", "DropGameOverNotification", "DanceMiniGameReadyNotification", "DanceReadyRequest", "DanceReadyNotification", "DanceStartNotification", "DanceTableCreateRequest", "DanceTableNotification", "DanceKeyPressRequest", "DanceKeyPressResponse", "DanceKeyPressNotification", "DanceGameOverNotification", "DanceCloseSocketNotification", "DanceTableCompleteRequest", "BombMiniGameReadyNotification", "BombGameReadyRequest", "BombGameReadyNotification", "BombMiniGameStartNotification", "BombPlayerSyncRequest", "BombPlayerSyncNotification", "BombPlayerDeathNotification", "BombMoveRequest", "BombMoveNotification", "BombGameOverNotification", "DartMiniGameReadyNotification", "DartGameReadyRequest", "DartGameReadyNotification", "DartMiniGameStartNotification", "DartGameThrowRequest", "DartGameThrowNotification", "DartGameOverNotification", "DartPannelSyncRequest", "DartPannelSyncNotification", "DartSyncRequest", "DartSyncNotification" }, new[]{ "Payload" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
/// <summary>
///ENUM
/// </summary>
public enum RoomStateType {
  [pbr::OriginalName("WAIT")] Wait = 0,
  [pbr::OriginalName("PREPARE")] Prepare = 1,
  [pbr::OriginalName("BOARD")] Board = 2,
  [pbr::OriginalName("MINI")] Mini = 3,
}

public enum GlobalFailCode {
  [pbr::OriginalName("NONE_FAILCODE")] NoneFailcode = 0,
  [pbr::OriginalName("UNKNOWN_ERROR")] UnknownError = 1,
  [pbr::OriginalName("INVALID_REQUEST")] InvalidRequest = 2,
  [pbr::OriginalName("AUTHENTICATION_FAILED")] AuthenticationFailed = 3,
  /// <summary>
  /// 100 ~ 199 AUTH SERVER ERROR
  /// </summary>
  [pbr::OriginalName("ID_OR_PASSWORD_MISS")] IdOrPasswordMiss = 100,
  [pbr::OriginalName("NOT_MATCH_PASSWORD_CONFIRM")] NotMatchPasswordConfirm = 101,
  [pbr::OriginalName("ALREADY_EXIST_ID")] AlreadyExistId = 102,
  [pbr::OriginalName("ALREADY_LOGGED_IN_ID")] AlreadyLoggedInId = 103,
  [pbr::OriginalName("VALIDAION_ERROR")] ValidaionError = 104,
  [pbr::OriginalName("ALREADY_EXIST_NICKNAME")] AlreadyExistNickname = 105,
  /// <summary>
  /// 200 ~ 299 LOBBY SERVER ERROR
  /// </summary>
  [pbr::OriginalName("USER_NOT_FOUND")] UserNotFound = 200,
  [pbr::OriginalName("ALREADY_IN_LOBBY")] AlreadyInLobby = 201,
  [pbr::OriginalName("USER_NOT_IN_LOBBY")] UserNotInLobby = 202,
  [pbr::OriginalName("LOBBY_USER_LIST_ERROR")] LobbyUserListError = 203,
  [pbr::OriginalName("WRONG_LOBBY")] WrongLobby = 204,
  /// <summary>
  /// 300 ~ 399 ROOM SERVER ERROR
  /// </summary>
  [pbr::OriginalName("ROOM_NOT_FOUND")] RoomNotFound = 300,
  [pbr::OriginalName("USER_ALREADY_IN_ROOM")] UserAlreadyInRoom = 301,
  [pbr::OriginalName("USER_NOT_IN_ROOM")] UserNotInRoom = 302,
  [pbr::OriginalName("INVALID_ROOM_STATE")] InvalidRoomState = 303,
  [pbr::OriginalName("OWNER_CANNOT_READY")] OwnerCannotReady = 304,
  [pbr::OriginalName("ROOM_IS_FULL")] RoomIsFull = 305,
  /// <summary>
  /// 500 ~ 599 ICE SERVER ERROR
  /// </summary>
  [pbr::OriginalName("GAME_NOT_FOUND")] GameNotFound = 500,
  [pbr::OriginalName("USER_IN_GAME_NOT_FOUND")] UserInGameNotFound = 501,
}

public enum State {
  [pbr::OriginalName("IDLE")] Idle = 0,
  [pbr::OriginalName("MOVE")] Move = 1,
  [pbr::OriginalName("DIE")] Die = 2,
  [pbr::OriginalName("DANCE_UP")] DanceUp = 3,
  [pbr::OriginalName("DANCE_DOWN")] DanceDown = 4,
  [pbr::OriginalName("DANCE_LEFT")] DanceLeft = 5,
  [pbr::OriginalName("DANCE_RIGHT")] DanceRight = 6,
  [pbr::OriginalName("DANCE_FAIL")] DanceFail = 7,
  [pbr::OriginalName("DANCE_WAIT")] DanceWait = 8,
}

public enum Direction {
  /// <summary>
  /// 입력 방향의 각도
  /// </summary>
  [pbr::OriginalName("UP")] Up = 0,
  [pbr::OriginalName("DOWN")] Down = 180,
  [pbr::OriginalName("LEFT")] Left = 90,
  [pbr::OriginalName("RIGHT")] Right = 270,
}

public enum GameEndReason {
  /// <summary>
  /// 시간 끝
  /// </summary>
  [pbr::OriginalName("TIME_OVER")] TimeOver = 0,
  /// <summary>
  /// 모든 테이블 완료
  /// </summary>
  [pbr::OriginalName("COMPLETE")] Complete = 1,
}

#endregion

#region Messages
/// <summary>
///COMMON 
/// </summary>
public sealed partial class UserData : pb::IMessage<UserData> {
  private static readonly pb::MessageParser<UserData> _parser = new pb::MessageParser<UserData>(() => new UserData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UserData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserData(UserData other) : this() {
    sessionId_ = other.sessionId_;
    nickname_ = other.nickname_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserData Clone() {
    return new UserData(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "nickname" field.</summary>
  public const int NicknameFieldNumber = 2;
  private string nickname_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Nickname {
    get { return nickname_; }
    set {
      nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UserData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UserData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (Nickname != other.Nickname) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (Nickname.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Nickname);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (Nickname.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UserData other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.Nickname.Length != 0) {
      Nickname = other.Nickname;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 18: {
          Nickname = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class RoomData : pb::IMessage<RoomData> {
  private static readonly pb::MessageParser<RoomData> _parser = new pb::MessageParser<RoomData>(() => new RoomData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RoomData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomData(RoomData other) : this() {
    roomId_ = other.roomId_;
    ownerId_ = other.ownerId_;
    roomName_ = other.roomName_;
    lobbyId_ = other.lobbyId_;
    state_ = other.state_;
    users_ = other.users_.Clone();
    maxUser_ = other.maxUser_;
    readyUsers_ = other.readyUsers_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomData Clone() {
    return new RoomData(this);
  }

  /// <summary>Field number for the "roomId" field.</summary>
  public const int RoomIdFieldNumber = 1;
  private string roomId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RoomId {
    get { return roomId_; }
    set {
      roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ownerId" field.</summary>
  public const int OwnerIdFieldNumber = 2;
  private string ownerId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OwnerId {
    get { return ownerId_; }
    set {
      ownerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "roomName" field.</summary>
  public const int RoomNameFieldNumber = 3;
  private string roomName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RoomName {
    get { return roomName_; }
    set {
      roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "lobbyId" field.</summary>
  public const int LobbyIdFieldNumber = 4;
  private string lobbyId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string LobbyId {
    get { return lobbyId_; }
    set {
      lobbyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 5;
  private global::RoomStateType state_ = global::RoomStateType.Wait;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RoomStateType State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  /// <summary>Field number for the "users" field.</summary>
  public const int UsersFieldNumber = 6;
  private static readonly pb::FieldCodec<global::UserData> _repeated_users_codec
      = pb::FieldCodec.ForMessage(50, global::UserData.Parser);
  private readonly pbc::RepeatedField<global::UserData> users_ = new pbc::RepeatedField<global::UserData>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::UserData> Users {
    get { return users_; }
  }

  /// <summary>Field number for the "maxUser" field.</summary>
  public const int MaxUserFieldNumber = 7;
  private int maxUser_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxUser {
    get { return maxUser_; }
    set {
      maxUser_ = value;
    }
  }

  /// <summary>Field number for the "readyUsers" field.</summary>
  public const int ReadyUsersFieldNumber = 8;
  private static readonly pb::FieldCodec<string> _repeated_readyUsers_codec
      = pb::FieldCodec.ForString(66);
  private readonly pbc::RepeatedField<string> readyUsers_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> ReadyUsers {
    get { return readyUsers_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RoomData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RoomData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomId != other.RoomId) return false;
    if (OwnerId != other.OwnerId) return false;
    if (RoomName != other.RoomName) return false;
    if (LobbyId != other.LobbyId) return false;
    if (State != other.State) return false;
    if(!users_.Equals(other.users_)) return false;
    if (MaxUser != other.MaxUser) return false;
    if(!readyUsers_.Equals(other.readyUsers_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
    if (OwnerId.Length != 0) hash ^= OwnerId.GetHashCode();
    if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
    if (LobbyId.Length != 0) hash ^= LobbyId.GetHashCode();
    if (State != global::RoomStateType.Wait) hash ^= State.GetHashCode();
    hash ^= users_.GetHashCode();
    if (MaxUser != 0) hash ^= MaxUser.GetHashCode();
    hash ^= readyUsers_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(RoomId);
    }
    if (OwnerId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(OwnerId);
    }
    if (RoomName.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(RoomName);
    }
    if (LobbyId.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(LobbyId);
    }
    if (State != global::RoomStateType.Wait) {
      output.WriteRawTag(40);
      output.WriteEnum((int) State);
    }
    users_.WriteTo(output, _repeated_users_codec);
    if (MaxUser != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(MaxUser);
    }
    readyUsers_.WriteTo(output, _repeated_readyUsers_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
    }
    if (OwnerId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerId);
    }
    if (RoomName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
    }
    if (LobbyId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(LobbyId);
    }
    if (State != global::RoomStateType.Wait) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
    }
    size += users_.CalculateSize(_repeated_users_codec);
    if (MaxUser != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxUser);
    }
    size += readyUsers_.CalculateSize(_repeated_readyUsers_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RoomData other) {
    if (other == null) {
      return;
    }
    if (other.RoomId.Length != 0) {
      RoomId = other.RoomId;
    }
    if (other.OwnerId.Length != 0) {
      OwnerId = other.OwnerId;
    }
    if (other.RoomName.Length != 0) {
      RoomName = other.RoomName;
    }
    if (other.LobbyId.Length != 0) {
      LobbyId = other.LobbyId;
    }
    if (other.State != global::RoomStateType.Wait) {
      State = other.State;
    }
    users_.Add(other.users_);
    if (other.MaxUser != 0) {
      MaxUser = other.MaxUser;
    }
    readyUsers_.Add(other.readyUsers_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          RoomId = input.ReadString();
          break;
        }
        case 18: {
          OwnerId = input.ReadString();
          break;
        }
        case 26: {
          RoomName = input.ReadString();
          break;
        }
        case 34: {
          LobbyId = input.ReadString();
          break;
        }
        case 40: {
          State = (global::RoomStateType) input.ReadEnum();
          break;
        }
        case 50: {
          users_.AddEntriesFrom(input, _repeated_users_codec);
          break;
        }
        case 56: {
          MaxUser = input.ReadInt32();
          break;
        }
        case 66: {
          readyUsers_.AddEntriesFrom(input, _repeated_readyUsers_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class Vector : pb::IMessage<Vector> {
  private static readonly pb::MessageParser<Vector> _parser = new pb::MessageParser<Vector>(() => new Vector());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Vector> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Vector() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Vector(Vector other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Vector Clone() {
    return new Vector(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 3;
  private float z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Z {
    get { return z_; }
    set {
      z_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Vector);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Vector other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
    if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
    if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Y);
    }
    if (Z != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Z);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (Z != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Vector other) {
    if (other == null) {
      return;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    if (other.Z != 0F) {
      Z = other.Z;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Y = input.ReadFloat();
          break;
        }
        case 29: {
          Z = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class Rank : pb::IMessage<Rank> {
  private static readonly pb::MessageParser<Rank> _parser = new pb::MessageParser<Rank>(() => new Rank());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Rank> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Rank() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Rank(Rank other) : this() {
    sessionId_ = other.sessionId_;
    rank_ = other.rank_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Rank Clone() {
    return new Rank(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "rank" field.</summary>
  public const int Rank_FieldNumber = 2;
  private int rank_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Rank_ {
    get { return rank_; }
    set {
      rank_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Rank);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Rank other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (Rank_ != other.Rank_) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (Rank_ != 0) hash ^= Rank_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (Rank_ != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Rank_);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (Rank_ != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank_);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Rank other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.Rank_ != 0) {
      Rank_ = other.Rank_;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 16: {
          Rank_ = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class BoardPlayerData : pb::IMessage<BoardPlayerData> {
  private static readonly pb::MessageParser<BoardPlayerData> _parser = new pb::MessageParser<BoardPlayerData>(() => new BoardPlayerData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BoardPlayerData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BoardPlayerData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BoardPlayerData(BoardPlayerData other) : this() {
    sessionId_ = other.sessionId_;
    gold_ = other.gold_;
    trophy_ = other.trophy_;
    tileLocation_ = other.tileLocation_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BoardPlayerData Clone() {
    return new BoardPlayerData(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "gold" field.</summary>
  public const int GoldFieldNumber = 2;
  private int gold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Gold {
    get { return gold_; }
    set {
      gold_ = value;
    }
  }

  /// <summary>Field number for the "trophy" field.</summary>
  public const int TrophyFieldNumber = 3;
  private int trophy_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Trophy {
    get { return trophy_; }
    set {
      trophy_ = value;
    }
  }

  /// <summary>Field number for the "tileLocation" field.</summary>
  public const int TileLocationFieldNumber = 4;
  private int tileLocation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TileLocation {
    get { return tileLocation_; }
    set {
      tileLocation_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BoardPlayerData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BoardPlayerData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (Gold != other.Gold) return false;
    if (Trophy != other.Trophy) return false;
    if (TileLocation != other.TileLocation) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (Gold != 0) hash ^= Gold.GetHashCode();
    if (Trophy != 0) hash ^= Trophy.GetHashCode();
    if (TileLocation != 0) hash ^= TileLocation.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (Gold != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Gold);
    }
    if (Trophy != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Trophy);
    }
    if (TileLocation != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(TileLocation);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (Gold != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
    }
    if (Trophy != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Trophy);
    }
    if (TileLocation != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TileLocation);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BoardPlayerData other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.Gold != 0) {
      Gold = other.Gold;
    }
    if (other.Trophy != 0) {
      Trophy = other.Trophy;
    }
    if (other.TileLocation != 0) {
      TileLocation = other.TileLocation;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 16: {
          Gold = input.ReadInt32();
          break;
        }
        case 24: {
          Trophy = input.ReadInt32();
          break;
        }
        case 32: {
          TileLocation = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DiceGameData : pb::IMessage<DiceGameData> {
  private static readonly pb::MessageParser<DiceGameData> _parser = new pb::MessageParser<DiceGameData>(() => new DiceGameData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DiceGameData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DiceGameData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DiceGameData(DiceGameData other) : this() {
    sessionId_ = other.sessionId_;
    value_ = other.value_;
    rank_ = other.rank_;
    distance_ = other.distance_;
    angle_ = other.angle_ != null ? other.angle_.Clone() : null;
    location_ = other.location_ != null ? other.location_.Clone() : null;
    power_ = other.power_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DiceGameData Clone() {
    return new DiceGameData(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "value" field.</summary>
  public const int ValueFieldNumber = 2;
  private int value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  /// <summary>Field number for the "rank" field.</summary>
  public const int RankFieldNumber = 3;
  private int rank_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Rank {
    get { return rank_; }
    set {
      rank_ = value;
    }
  }

  /// <summary>Field number for the "distance" field.</summary>
  public const int DistanceFieldNumber = 4;
  private float distance_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Distance {
    get { return distance_; }
    set {
      distance_ = value;
    }
  }

  /// <summary>Field number for the "angle" field.</summary>
  public const int AngleFieldNumber = 5;
  private global::Vector angle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector Angle {
    get { return angle_; }
    set {
      angle_ = value;
    }
  }

  /// <summary>Field number for the "location" field.</summary>
  public const int LocationFieldNumber = 6;
  private global::Vector location_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector Location {
    get { return location_; }
    set {
      location_ = value;
    }
  }

  /// <summary>Field number for the "power" field.</summary>
  public const int PowerFieldNumber = 7;
  private float power_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Power {
    get { return power_; }
    set {
      power_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DiceGameData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DiceGameData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (Value != other.Value) return false;
    if (Rank != other.Rank) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Distance, other.Distance)) return false;
    if (!object.Equals(Angle, other.Angle)) return false;
    if (!object.Equals(Location, other.Location)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Power, other.Power)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (Value != 0) hash ^= Value.GetHashCode();
    if (Rank != 0) hash ^= Rank.GetHashCode();
    if (Distance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Distance);
    if (angle_ != null) hash ^= Angle.GetHashCode();
    if (location_ != null) hash ^= Location.GetHashCode();
    if (Power != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Power);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (Value != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Value);
    }
    if (Rank != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Rank);
    }
    if (Distance != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(Distance);
    }
    if (angle_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Angle);
    }
    if (location_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Location);
    }
    if (Power != 0F) {
      output.WriteRawTag(61);
      output.WriteFloat(Power);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (Value != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
    }
    if (Rank != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
    }
    if (Distance != 0F) {
      size += 1 + 4;
    }
    if (angle_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Angle);
    }
    if (location_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
    }
    if (Power != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DiceGameData other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.Value != 0) {
      Value = other.Value;
    }
    if (other.Rank != 0) {
      Rank = other.Rank;
    }
    if (other.Distance != 0F) {
      Distance = other.Distance;
    }
    if (other.angle_ != null) {
      if (angle_ == null) {
        Angle = new global::Vector();
      }
      Angle.MergeFrom(other.Angle);
    }
    if (other.location_ != null) {
      if (location_ == null) {
        Location = new global::Vector();
      }
      Location.MergeFrom(other.Location);
    }
    if (other.Power != 0F) {
      Power = other.Power;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 16: {
          Value = input.ReadInt32();
          break;
        }
        case 24: {
          Rank = input.ReadInt32();
          break;
        }
        case 37: {
          Distance = input.ReadFloat();
          break;
        }
        case 42: {
          if (angle_ == null) {
            Angle = new global::Vector();
          }
          input.ReadMessage(Angle);
          break;
        }
        case 50: {
          if (location_ == null) {
            Location = new global::Vector();
          }
          input.ReadMessage(Location);
          break;
        }
        case 61: {
          Power = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class DartGameData : pb::IMessage<DartGameData> {
  private static readonly pb::MessageParser<DartGameData> _parser = new pb::MessageParser<DartGameData>(() => new DartGameData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DartGameData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DartGameData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DartGameData(DartGameData other) : this() {
    sessionId_ = other.sessionId_;
    rank_ = other.rank_;
    distance_ = other.distance_;
    angle_ = other.angle_ != null ? other.angle_.Clone() : null;
    location_ = other.location_ != null ? other.location_.Clone() : null;
    power_ = other.power_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DartGameData Clone() {
    return new DartGameData(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "rank" field.</summary>
  public const int RankFieldNumber = 2;
  private int rank_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Rank {
    get { return rank_; }
    set {
      rank_ = value;
    }
  }

  /// <summary>Field number for the "distance" field.</summary>
  public const int DistanceFieldNumber = 3;
  private float distance_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Distance {
    get { return distance_; }
    set {
      distance_ = value;
    }
  }

  /// <summary>Field number for the "angle" field.</summary>
  public const int AngleFieldNumber = 4;
  private global::Vector angle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector Angle {
    get { return angle_; }
    set {
      angle_ = value;
    }
  }

  /// <summary>Field number for the "location" field.</summary>
  public const int LocationFieldNumber = 5;
  private global::Vector location_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector Location {
    get { return location_; }
    set {
      location_ = value;
    }
  }

  /// <summary>Field number for the "power" field.</summary>
  public const int PowerFieldNumber = 6;
  private float power_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Power {
    get { return power_; }
    set {
      power_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DartGameData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DartGameData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (Rank != other.Rank) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Distance, other.Distance)) return false;
    if (!object.Equals(Angle, other.Angle)) return false;
    if (!object.Equals(Location, other.Location)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Power, other.Power)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (Rank != 0) hash ^= Rank.GetHashCode();
    if (Distance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Distance);
    if (angle_ != null) hash ^= Angle.GetHashCode();
    if (location_ != null) hash ^= Location.GetHashCode();
    if (Power != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Power);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (Rank != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Rank);
    }
    if (Distance != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Distance);
    }
    if (angle_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Angle);
    }
    if (location_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Location);
    }
    if (Power != 0F) {
      output.WriteRawTag(53);
      output.WriteFloat(Power);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (Rank != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
    }
    if (Distance != 0F) {
      size += 1 + 4;
    }
    if (angle_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Angle);
    }
    if (location_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
    }
    if (Power != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DartGameData other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.Rank != 0) {
      Rank = other.Rank;
    }
    if (other.Distance != 0F) {
      Distance = other.Distance;
    }
    if (other.angle_ != null) {
      if (angle_ == null) {
        Angle = new global::Vector();
      }
      Angle.MergeFrom(other.Angle);
    }
    if (other.location_ != null) {
      if (location_ == null) {
        Location = new global::Vector();
      }
      Location.MergeFrom(other.Location);
    }
    if (other.Power != 0F) {
      Power = other.Power;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 16: {
          Rank = input.ReadInt32();
          break;
        }
        case 29: {
          Distance = input.ReadFloat();
          break;
        }
        case 34: {
          if (angle_ == null) {
            Angle = new global::Vector();
          }
          input.ReadMessage(Angle);
          break;
        }
        case 42: {
          if (location_ == null) {
            Location = new global::Vector();
          }
          input.ReadMessage(Location);
          break;
        }
        case 53: {
          Power = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class DancePool : pb::IMessage<DancePool> {
  private static readonly pb::MessageParser<DancePool> _parser = new pb::MessageParser<DancePool>(() => new DancePool());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DancePool> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DancePool() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DancePool(DancePool other) : this() {
    teamNumber_ = other.teamNumber_;
    danceTables_ = other.danceTables_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DancePool Clone() {
    return new DancePool(this);
  }

  /// <summary>Field number for the "teamNumber" field.</summary>
  public const int TeamNumberFieldNumber = 1;
  private int teamNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TeamNumber {
    get { return teamNumber_; }
    set {
      teamNumber_ = value;
    }
  }

  /// <summary>Field number for the "danceTables" field.</summary>
  public const int DanceTablesFieldNumber = 2;
  private static readonly pb::FieldCodec<global::DanceTable> _repeated_danceTables_codec
      = pb::FieldCodec.ForMessage(18, global::DanceTable.Parser);
  private readonly pbc::RepeatedField<global::DanceTable> danceTables_ = new pbc::RepeatedField<global::DanceTable>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DanceTable> DanceTables {
    get { return danceTables_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DancePool);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DancePool other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TeamNumber != other.TeamNumber) return false;
    if(!danceTables_.Equals(other.danceTables_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TeamNumber != 0) hash ^= TeamNumber.GetHashCode();
    hash ^= danceTables_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TeamNumber != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(TeamNumber);
    }
    danceTables_.WriteTo(output, _repeated_danceTables_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TeamNumber != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamNumber);
    }
    size += danceTables_.CalculateSize(_repeated_danceTables_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DancePool other) {
    if (other == null) {
      return;
    }
    if (other.TeamNumber != 0) {
      TeamNumber = other.TeamNumber;
    }
    danceTables_.Add(other.danceTables_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TeamNumber = input.ReadInt32();
          break;
        }
        case 18: {
          danceTables_.AddEntriesFrom(input, _repeated_danceTables_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class DanceTable : pb::IMessage<DanceTable> {
  private static readonly pb::MessageParser<DanceTable> _parser = new pb::MessageParser<DanceTable>(() => new DanceTable());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DanceTable> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DanceTable() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DanceTable(DanceTable other) : this() {
    commands_ = other.commands_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DanceTable Clone() {
    return new DanceTable(this);
  }

  /// <summary>Field number for the "commands" field.</summary>
  public const int CommandsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::DanceCommand> _repeated_commands_codec
      = pb::FieldCodec.ForMessage(10, global::DanceCommand.Parser);
  private readonly pbc::RepeatedField<global::DanceCommand> commands_ = new pbc::RepeatedField<global::DanceCommand>();
  /// <summary>
  /// 방향키 커맨드 목록
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DanceCommand> Commands {
    get { return commands_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DanceTable);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DanceTable other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!commands_.Equals(other.commands_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= commands_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    commands_.WriteTo(output, _repeated_commands_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += commands_.CalculateSize(_repeated_commands_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DanceTable other) {
    if (other == null) {
      return;
    }
    commands_.Add(other.commands_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          commands_.AddEntriesFrom(input, _repeated_commands_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class DanceCommand : pb::IMessage<DanceCommand> {
  private static readonly pb::MessageParser<DanceCommand> _parser = new pb::MessageParser<DanceCommand>(() => new DanceCommand());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DanceCommand> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DanceCommand() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DanceCommand(DanceCommand other) : this() {
    direction_ = other.direction_;
    targetSessionId_ = other.targetSessionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DanceCommand Clone() {
    return new DanceCommand(this);
  }

  /// <summary>Field number for the "direction" field.</summary>
  public const int DirectionFieldNumber = 1;
  private global::Direction direction_ = global::Direction.Up;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Direction Direction {
    get { return direction_; }
    set {
      direction_ = value;
    }
  }

  /// <summary>Field number for the "targetSessionId" field.</summary>
  public const int TargetSessionIdFieldNumber = 2;
  private string targetSessionId_ = "";
  /// <summary>
  /// 입력해야 하는 플레이어
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TargetSessionId {
    get { return targetSessionId_; }
    set {
      targetSessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DanceCommand);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DanceCommand other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Direction != other.Direction) return false;
    if (TargetSessionId != other.TargetSessionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Direction != global::Direction.Up) hash ^= Direction.GetHashCode();
    if (TargetSessionId.Length != 0) hash ^= TargetSessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Direction != global::Direction.Up) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Direction);
    }
    if (TargetSessionId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(TargetSessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Direction != global::Direction.Up) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Direction);
    }
    if (TargetSessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetSessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DanceCommand other) {
    if (other == null) {
      return;
    }
    if (other.Direction != global::Direction.Up) {
      Direction = other.Direction;
    }
    if (other.TargetSessionId.Length != 0) {
      TargetSessionId = other.TargetSessionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Direction = (global::Direction) input.ReadEnum();
          break;
        }
        case 18: {
          TargetSessionId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
  private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInfo(PlayerInfo other) : this() {
    sessionId_ = other.sessionId_;
    teamNumber_ = other.teamNumber_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInfo Clone() {
    return new PlayerInfo(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "teamNumber" field.</summary>
  public const int TeamNumberFieldNumber = 2;
  private int teamNumber_;
  /// <summary>
  /// 개인전: 각 유저에게 부여, 팀전: 팀별로 부여
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TeamNumber {
    get { return teamNumber_; }
    set {
      teamNumber_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (TeamNumber != other.TeamNumber) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (TeamNumber != 0) hash ^= TeamNumber.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (TeamNumber != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TeamNumber);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (TeamNumber != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamNumber);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerInfo other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.TeamNumber != 0) {
      TeamNumber = other.TeamNumber;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 16: {
          TeamNumber = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class TeamResult : pb::IMessage<TeamResult> {
  private static readonly pb::MessageParser<TeamResult> _parser = new pb::MessageParser<TeamResult>(() => new TeamResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TeamResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TeamResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TeamResult(TeamResult other) : this() {
    sessionId_ = other.sessionId_.Clone();
    score_ = other.score_;
    endTime_ = other.endTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TeamResult Clone() {
    return new TeamResult(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private static readonly pb::FieldCodec<string> _repeated_sessionId_codec
      = pb::FieldCodec.ForString(10);
  private readonly pbc::RepeatedField<string> sessionId_ = new pbc::RepeatedField<string>();
  /// <summary>
  /// 팀원의 세션 ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> SessionId {
    get { return sessionId_; }
  }

  /// <summary>Field number for the "score" field.</summary>
  public const int ScoreFieldNumber = 2;
  private int score_;
  /// <summary>
  /// 팀 점수
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Score {
    get { return score_; }
    set {
      score_ = value;
    }
  }

  /// <summary>Field number for the "endTime" field.</summary>
  public const int EndTimeFieldNumber = 3;
  private long endTime_;
  /// <summary>
  /// 춤표 완료할 때 마다 시간 갱신
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long EndTime {
    get { return endTime_; }
    set {
      endTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TeamResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TeamResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!sessionId_.Equals(other.sessionId_)) return false;
    if (Score != other.Score) return false;
    if (EndTime != other.EndTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= sessionId_.GetHashCode();
    if (Score != 0) hash ^= Score.GetHashCode();
    if (EndTime != 0L) hash ^= EndTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    sessionId_.WriteTo(output, _repeated_sessionId_codec);
    if (Score != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Score);
    }
    if (EndTime != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(EndTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += sessionId_.CalculateSize(_repeated_sessionId_codec);
    if (Score != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
    }
    if (EndTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TeamResult other) {
    if (other == null) {
      return;
    }
    sessionId_.Add(other.sessionId_);
    if (other.Score != 0) {
      Score = other.Score;
    }
    if (other.EndTime != 0L) {
      EndTime = other.EndTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          sessionId_.AddEntriesFrom(input, _repeated_sessionId_codec);
          break;
        }
        case 16: {
          Score = input.ReadInt32();
          break;
        }
        case 24: {
          EndTime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///AUTH
/// </summary>
public sealed partial class C2S_RegisterRequest : pb::IMessage<C2S_RegisterRequest> {
  private static readonly pb::MessageParser<C2S_RegisterRequest> _parser = new pb::MessageParser<C2S_RegisterRequest>(() => new C2S_RegisterRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_RegisterRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_RegisterRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_RegisterRequest(C2S_RegisterRequest other) : this() {
    loginId_ = other.loginId_;
    password_ = other.password_;
    passwordConfirm_ = other.passwordConfirm_;
    nickname_ = other.nickname_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_RegisterRequest Clone() {
    return new C2S_RegisterRequest(this);
  }

  /// <summary>Field number for the "loginId" field.</summary>
  public const int LoginIdFieldNumber = 1;
  private string loginId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string LoginId {
    get { return loginId_; }
    set {
      loginId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "password" field.</summary>
  public const int PasswordFieldNumber = 2;
  private string password_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Password {
    get { return password_; }
    set {
      password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "passwordConfirm" field.</summary>
  public const int PasswordConfirmFieldNumber = 3;
  private string passwordConfirm_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PasswordConfirm {
    get { return passwordConfirm_; }
    set {
      passwordConfirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "nickname" field.</summary>
  public const int NicknameFieldNumber = 4;
  private string nickname_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Nickname {
    get { return nickname_; }
    set {
      nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_RegisterRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_RegisterRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LoginId != other.LoginId) return false;
    if (Password != other.Password) return false;
    if (PasswordConfirm != other.PasswordConfirm) return false;
    if (Nickname != other.Nickname) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (LoginId.Length != 0) hash ^= LoginId.GetHashCode();
    if (Password.Length != 0) hash ^= Password.GetHashCode();
    if (PasswordConfirm.Length != 0) hash ^= PasswordConfirm.GetHashCode();
    if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (LoginId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(LoginId);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Password);
    }
    if (PasswordConfirm.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(PasswordConfirm);
    }
    if (Nickname.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Nickname);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (LoginId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginId);
    }
    if (Password.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
    }
    if (PasswordConfirm.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PasswordConfirm);
    }
    if (Nickname.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_RegisterRequest other) {
    if (other == null) {
      return;
    }
    if (other.LoginId.Length != 0) {
      LoginId = other.LoginId;
    }
    if (other.Password.Length != 0) {
      Password = other.Password;
    }
    if (other.PasswordConfirm.Length != 0) {
      PasswordConfirm = other.PasswordConfirm;
    }
    if (other.Nickname.Length != 0) {
      Nickname = other.Nickname;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          LoginId = input.ReadString();
          break;
        }
        case 18: {
          Password = input.ReadString();
          break;
        }
        case 26: {
          PasswordConfirm = input.ReadString();
          break;
        }
        case 34: {
          Nickname = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_RegisterResponse : pb::IMessage<S2C_RegisterResponse> {
  private static readonly pb::MessageParser<S2C_RegisterResponse> _parser = new pb::MessageParser<S2C_RegisterResponse>(() => new S2C_RegisterResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_RegisterResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_RegisterResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_RegisterResponse(S2C_RegisterResponse other) : this() {
    success_ = other.success_;
    failCode_ = other.failCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_RegisterResponse Clone() {
    return new S2C_RegisterResponse(this);
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 1;
  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  /// <summary>Field number for the "failCode" field.</summary>
  public const int FailCodeFieldNumber = 2;
  private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GlobalFailCode FailCode {
    get { return failCode_; }
    set {
      failCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_RegisterResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_RegisterResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Success != other.Success) return false;
    if (FailCode != other.FailCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Success != false) hash ^= Success.GetHashCode();
    if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Success != false) {
      output.WriteRawTag(8);
      output.WriteBool(Success);
    }
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) FailCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Success != false) {
      size += 1 + 1;
    }
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FailCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_RegisterResponse other) {
    if (other == null) {
      return;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    if (other.FailCode != global::GlobalFailCode.NoneFailcode) {
      FailCode = other.FailCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Success = input.ReadBool();
          break;
        }
        case 16: {
          FailCode = (global::GlobalFailCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class C2S_LoginRequest : pb::IMessage<C2S_LoginRequest> {
  private static readonly pb::MessageParser<C2S_LoginRequest> _parser = new pb::MessageParser<C2S_LoginRequest>(() => new C2S_LoginRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_LoginRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_LoginRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_LoginRequest(C2S_LoginRequest other) : this() {
    loginId_ = other.loginId_;
    password_ = other.password_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_LoginRequest Clone() {
    return new C2S_LoginRequest(this);
  }

  /// <summary>Field number for the "loginId" field.</summary>
  public const int LoginIdFieldNumber = 1;
  private string loginId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string LoginId {
    get { return loginId_; }
    set {
      loginId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "password" field.</summary>
  public const int PasswordFieldNumber = 2;
  private string password_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Password {
    get { return password_; }
    set {
      password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_LoginRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_LoginRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LoginId != other.LoginId) return false;
    if (Password != other.Password) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (LoginId.Length != 0) hash ^= LoginId.GetHashCode();
    if (Password.Length != 0) hash ^= Password.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (LoginId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(LoginId);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Password);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (LoginId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginId);
    }
    if (Password.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_LoginRequest other) {
    if (other == null) {
      return;
    }
    if (other.LoginId.Length != 0) {
      LoginId = other.LoginId;
    }
    if (other.Password.Length != 0) {
      Password = other.Password;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          LoginId = input.ReadString();
          break;
        }
        case 18: {
          Password = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_LoginResponse : pb::IMessage<S2C_LoginResponse> {
  private static readonly pb::MessageParser<S2C_LoginResponse> _parser = new pb::MessageParser<S2C_LoginResponse>(() => new S2C_LoginResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_LoginResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_LoginResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_LoginResponse(S2C_LoginResponse other) : this() {
    success_ = other.success_;
    sessionId_ = other.sessionId_;
    failCode_ = other.failCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_LoginResponse Clone() {
    return new S2C_LoginResponse(this);
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 1;
  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 2;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "failCode" field.</summary>
  public const int FailCodeFieldNumber = 3;
  private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GlobalFailCode FailCode {
    get { return failCode_; }
    set {
      failCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_LoginResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_LoginResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Success != other.Success) return false;
    if (SessionId != other.SessionId) return false;
    if (FailCode != other.FailCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Success != false) hash ^= Success.GetHashCode();
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Success != false) {
      output.WriteRawTag(8);
      output.WriteBool(Success);
    }
    if (SessionId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(SessionId);
    }
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      output.WriteRawTag(24);
      output.WriteEnum((int) FailCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Success != false) {
      size += 1 + 1;
    }
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FailCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_LoginResponse other) {
    if (other == null) {
      return;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.FailCode != global::GlobalFailCode.NoneFailcode) {
      FailCode = other.FailCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Success = input.ReadBool();
          break;
        }
        case 18: {
          SessionId = input.ReadString();
          break;
        }
        case 24: {
          FailCode = (global::GlobalFailCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class C2S_LoggoutRequest : pb::IMessage<C2S_LoggoutRequest> {
  private static readonly pb::MessageParser<C2S_LoggoutRequest> _parser = new pb::MessageParser<C2S_LoggoutRequest>(() => new C2S_LoggoutRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_LoggoutRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_LoggoutRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_LoggoutRequest(C2S_LoggoutRequest other) : this() {
    sessionId_ = other.sessionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_LoggoutRequest Clone() {
    return new C2S_LoggoutRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_LoggoutRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_LoggoutRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_LoggoutRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_CloseSocketNotification : pb::IMessage<S2C_CloseSocketNotification> {
  private static readonly pb::MessageParser<S2C_CloseSocketNotification> _parser = new pb::MessageParser<S2C_CloseSocketNotification>(() => new S2C_CloseSocketNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_CloseSocketNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_CloseSocketNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_CloseSocketNotification(S2C_CloseSocketNotification other) : this() {
    sessionId_ = other.sessionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_CloseSocketNotification Clone() {
    return new S2C_CloseSocketNotification(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_CloseSocketNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_CloseSocketNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_CloseSocketNotification other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///BOARD
/// </summary>
public sealed partial class C2S_GameStartRequest : pb::IMessage<C2S_GameStartRequest> {
  private static readonly pb::MessageParser<C2S_GameStartRequest> _parser = new pb::MessageParser<C2S_GameStartRequest>(() => new C2S_GameStartRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_GameStartRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_GameStartRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_GameStartRequest(C2S_GameStartRequest other) : this() {
    sessionId_ = other.sessionId_;
    turn_ = other.turn_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_GameStartRequest Clone() {
    return new C2S_GameStartRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "turn" field.</summary>
  public const int TurnFieldNumber = 2;
  private int turn_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Turn {
    get { return turn_; }
    set {
      turn_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_GameStartRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_GameStartRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (Turn != other.Turn) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (Turn != 0) hash ^= Turn.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (Turn != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Turn);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (Turn != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Turn);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_GameStartRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.Turn != 0) {
      Turn = other.Turn;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 16: {
          Turn = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_GameStartNotification : pb::IMessage<S2C_GameStartNotification> {
  private static readonly pb::MessageParser<S2C_GameStartNotification> _parser = new pb::MessageParser<S2C_GameStartNotification>(() => new S2C_GameStartNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_GameStartNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_GameStartNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_GameStartNotification(S2C_GameStartNotification other) : this() {
    success_ = other.success_;
    players_ = other.players_.Clone();
    failCode_ = other.failCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_GameStartNotification Clone() {
    return new S2C_GameStartNotification(this);
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 1;
  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  /// <summary>Field number for the "players" field.</summary>
  public const int PlayersFieldNumber = 2;
  private static readonly pb::FieldCodec<global::S2C_GameStartNotification.Types.PlayerData> _repeated_players_codec
      = pb::FieldCodec.ForMessage(18, global::S2C_GameStartNotification.Types.PlayerData.Parser);
  private readonly pbc::RepeatedField<global::S2C_GameStartNotification.Types.PlayerData> players_ = new pbc::RepeatedField<global::S2C_GameStartNotification.Types.PlayerData>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::S2C_GameStartNotification.Types.PlayerData> Players {
    get { return players_; }
  }

  /// <summary>Field number for the "failCode" field.</summary>
  public const int FailCodeFieldNumber = 3;
  private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GlobalFailCode FailCode {
    get { return failCode_; }
    set {
      failCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_GameStartNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_GameStartNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Success != other.Success) return false;
    if(!players_.Equals(other.players_)) return false;
    if (FailCode != other.FailCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Success != false) hash ^= Success.GetHashCode();
    hash ^= players_.GetHashCode();
    if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Success != false) {
      output.WriteRawTag(8);
      output.WriteBool(Success);
    }
    players_.WriteTo(output, _repeated_players_codec);
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      output.WriteRawTag(24);
      output.WriteEnum((int) FailCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Success != false) {
      size += 1 + 1;
    }
    size += players_.CalculateSize(_repeated_players_codec);
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FailCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_GameStartNotification other) {
    if (other == null) {
      return;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    players_.Add(other.players_);
    if (other.FailCode != global::GlobalFailCode.NoneFailcode) {
      FailCode = other.FailCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Success = input.ReadBool();
          break;
        }
        case 18: {
          players_.AddEntriesFrom(input, _repeated_players_codec);
          break;
        }
        case 24: {
          FailCode = (global::GlobalFailCode) input.ReadEnum();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the S2C_GameStartNotification message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class PlayerData : pb::IMessage<PlayerData> {
      private static readonly pb::MessageParser<PlayerData> _parser = new pb::MessageParser<PlayerData>(() => new PlayerData());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<PlayerData> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::S2C_GameStartNotification.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public PlayerData() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public PlayerData(PlayerData other) : this() {
        userId_ = other.userId_;
        nickname_ = other.nickname_;
        position_ = other.position_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public PlayerData Clone() {
        return new PlayerData(this);
      }

      /// <summary>Field number for the "userId" field.</summary>
      public const int UserIdFieldNumber = 1;
      private string userId_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string UserId {
        get { return userId_; }
        set {
          userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "nickname" field.</summary>
      public const int NicknameFieldNumber = 2;
      private string nickname_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Nickname {
        get { return nickname_; }
        set {
          nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "position" field.</summary>
      public const int PositionFieldNumber = 3;
      private int position_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int Position {
        get { return position_; }
        set {
          position_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as PlayerData);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(PlayerData other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (UserId != other.UserId) return false;
        if (Nickname != other.Nickname) return false;
        if (Position != other.Position) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (UserId.Length != 0) hash ^= UserId.GetHashCode();
        if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
        if (Position != 0) hash ^= Position.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (UserId.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(UserId);
        }
        if (Nickname.Length != 0) {
          output.WriteRawTag(18);
          output.WriteString(Nickname);
        }
        if (Position != 0) {
          output.WriteRawTag(24);
          output.WriteInt32(Position);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (UserId.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
        }
        if (Nickname.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
        }
        if (Position != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(PlayerData other) {
        if (other == null) {
          return;
        }
        if (other.UserId.Length != 0) {
          UserId = other.UserId;
        }
        if (other.Nickname.Length != 0) {
          Nickname = other.Nickname;
        }
        if (other.Position != 0) {
          Position = other.Position;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              UserId = input.ReadString();
              break;
            }
            case 18: {
              Nickname = input.ReadString();
              break;
            }
            case 24: {
              Position = input.ReadInt32();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

public sealed partial class C2S_RollDiceRequest : pb::IMessage<C2S_RollDiceRequest> {
  private static readonly pb::MessageParser<C2S_RollDiceRequest> _parser = new pb::MessageParser<C2S_RollDiceRequest>(() => new C2S_RollDiceRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_RollDiceRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_RollDiceRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_RollDiceRequest(C2S_RollDiceRequest other) : this() {
    sessionId_ = other.sessionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_RollDiceRequest Clone() {
    return new C2S_RollDiceRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_RollDiceRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_RollDiceRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_RollDiceRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_RollDiceResponse : pb::IMessage<S2C_RollDiceResponse> {
  private static readonly pb::MessageParser<S2C_RollDiceResponse> _parser = new pb::MessageParser<S2C_RollDiceResponse>(() => new S2C_RollDiceResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_RollDiceResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_RollDiceResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_RollDiceResponse(S2C_RollDiceResponse other) : this() {
    success_ = other.success_;
    diceResult_ = other.diceResult_;
    failCode_ = other.failCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_RollDiceResponse Clone() {
    return new S2C_RollDiceResponse(this);
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 1;
  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  /// <summary>Field number for the "diceResult" field.</summary>
  public const int DiceResultFieldNumber = 2;
  private int diceResult_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DiceResult {
    get { return diceResult_; }
    set {
      diceResult_ = value;
    }
  }

  /// <summary>Field number for the "failCode" field.</summary>
  public const int FailCodeFieldNumber = 3;
  private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GlobalFailCode FailCode {
    get { return failCode_; }
    set {
      failCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_RollDiceResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_RollDiceResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Success != other.Success) return false;
    if (DiceResult != other.DiceResult) return false;
    if (FailCode != other.FailCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Success != false) hash ^= Success.GetHashCode();
    if (DiceResult != 0) hash ^= DiceResult.GetHashCode();
    if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Success != false) {
      output.WriteRawTag(8);
      output.WriteBool(Success);
    }
    if (DiceResult != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(DiceResult);
    }
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      output.WriteRawTag(24);
      output.WriteEnum((int) FailCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Success != false) {
      size += 1 + 1;
    }
    if (DiceResult != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DiceResult);
    }
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FailCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_RollDiceResponse other) {
    if (other == null) {
      return;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    if (other.DiceResult != 0) {
      DiceResult = other.DiceResult;
    }
    if (other.FailCode != global::GlobalFailCode.NoneFailcode) {
      FailCode = other.FailCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Success = input.ReadBool();
          break;
        }
        case 16: {
          DiceResult = input.ReadInt32();
          break;
        }
        case 24: {
          FailCode = (global::GlobalFailCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_RollDiceNotification : pb::IMessage<S2C_RollDiceNotification> {
  private static readonly pb::MessageParser<S2C_RollDiceNotification> _parser = new pb::MessageParser<S2C_RollDiceNotification>(() => new S2C_RollDiceNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_RollDiceNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_RollDiceNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_RollDiceNotification(S2C_RollDiceNotification other) : this() {
    sessionId_ = other.sessionId_;
    diceResult_ = other.diceResult_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_RollDiceNotification Clone() {
    return new S2C_RollDiceNotification(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "diceResult" field.</summary>
  public const int DiceResultFieldNumber = 2;
  private int diceResult_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DiceResult {
    get { return diceResult_; }
    set {
      diceResult_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_RollDiceNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_RollDiceNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (DiceResult != other.DiceResult) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (DiceResult != 0) hash ^= DiceResult.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (DiceResult != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(DiceResult);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (DiceResult != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DiceResult);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_RollDiceNotification other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.DiceResult != 0) {
      DiceResult = other.DiceResult;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 16: {
          DiceResult = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class C2S_MovePlayerBoardRequest : pb::IMessage<C2S_MovePlayerBoardRequest> {
  private static readonly pb::MessageParser<C2S_MovePlayerBoardRequest> _parser = new pb::MessageParser<C2S_MovePlayerBoardRequest>(() => new C2S_MovePlayerBoardRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_MovePlayerBoardRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_MovePlayerBoardRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_MovePlayerBoardRequest(C2S_MovePlayerBoardRequest other) : this() {
    sessionId_ = other.sessionId_;
    targetPoint_ = other.targetPoint_ != null ? other.targetPoint_.Clone() : null;
    rotation_ = other.rotation_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_MovePlayerBoardRequest Clone() {
    return new C2S_MovePlayerBoardRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "targetPoint" field.</summary>
  public const int TargetPointFieldNumber = 2;
  private global::Vector targetPoint_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector TargetPoint {
    get { return targetPoint_; }
    set {
      targetPoint_ = value;
    }
  }

  /// <summary>Field number for the "rotation" field.</summary>
  public const int RotationFieldNumber = 3;
  private float rotation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Rotation {
    get { return rotation_; }
    set {
      rotation_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_MovePlayerBoardRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_MovePlayerBoardRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (!object.Equals(TargetPoint, other.TargetPoint)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rotation, other.Rotation)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (targetPoint_ != null) hash ^= TargetPoint.GetHashCode();
    if (Rotation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rotation);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (targetPoint_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(TargetPoint);
    }
    if (Rotation != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Rotation);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (targetPoint_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetPoint);
    }
    if (Rotation != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_MovePlayerBoardRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.targetPoint_ != null) {
      if (targetPoint_ == null) {
        TargetPoint = new global::Vector();
      }
      TargetPoint.MergeFrom(other.TargetPoint);
    }
    if (other.Rotation != 0F) {
      Rotation = other.Rotation;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 18: {
          if (targetPoint_ == null) {
            TargetPoint = new global::Vector();
          }
          input.ReadMessage(TargetPoint);
          break;
        }
        case 29: {
          Rotation = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_MovePlayerBoardResponse : pb::IMessage<S2C_MovePlayerBoardResponse> {
  private static readonly pb::MessageParser<S2C_MovePlayerBoardResponse> _parser = new pb::MessageParser<S2C_MovePlayerBoardResponse>(() => new S2C_MovePlayerBoardResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_MovePlayerBoardResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_MovePlayerBoardResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_MovePlayerBoardResponse(S2C_MovePlayerBoardResponse other) : this() {
    success_ = other.success_;
    failCode_ = other.failCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_MovePlayerBoardResponse Clone() {
    return new S2C_MovePlayerBoardResponse(this);
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 1;
  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  /// <summary>Field number for the "failCode" field.</summary>
  public const int FailCodeFieldNumber = 2;
  private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GlobalFailCode FailCode {
    get { return failCode_; }
    set {
      failCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_MovePlayerBoardResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_MovePlayerBoardResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Success != other.Success) return false;
    if (FailCode != other.FailCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Success != false) hash ^= Success.GetHashCode();
    if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Success != false) {
      output.WriteRawTag(8);
      output.WriteBool(Success);
    }
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) FailCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Success != false) {
      size += 1 + 1;
    }
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FailCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_MovePlayerBoardResponse other) {
    if (other == null) {
      return;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    if (other.FailCode != global::GlobalFailCode.NoneFailcode) {
      FailCode = other.FailCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Success = input.ReadBool();
          break;
        }
        case 16: {
          FailCode = (global::GlobalFailCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_MovePlayerBoardNotification : pb::IMessage<S2C_MovePlayerBoardNotification> {
  private static readonly pb::MessageParser<S2C_MovePlayerBoardNotification> _parser = new pb::MessageParser<S2C_MovePlayerBoardNotification>(() => new S2C_MovePlayerBoardNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_MovePlayerBoardNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_MovePlayerBoardNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_MovePlayerBoardNotification(S2C_MovePlayerBoardNotification other) : this() {
    sessionId_ = other.sessionId_;
    targetPoint_ = other.targetPoint_ != null ? other.targetPoint_.Clone() : null;
    rotation_ = other.rotation_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_MovePlayerBoardNotification Clone() {
    return new S2C_MovePlayerBoardNotification(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "targetPoint" field.</summary>
  public const int TargetPointFieldNumber = 2;
  private global::Vector targetPoint_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector TargetPoint {
    get { return targetPoint_; }
    set {
      targetPoint_ = value;
    }
  }

  /// <summary>Field number for the "rotation" field.</summary>
  public const int RotationFieldNumber = 3;
  private float rotation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Rotation {
    get { return rotation_; }
    set {
      rotation_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_MovePlayerBoardNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_MovePlayerBoardNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (!object.Equals(TargetPoint, other.TargetPoint)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rotation, other.Rotation)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (targetPoint_ != null) hash ^= TargetPoint.GetHashCode();
    if (Rotation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rotation);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (targetPoint_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(TargetPoint);
    }
    if (Rotation != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Rotation);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (targetPoint_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetPoint);
    }
    if (Rotation != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_MovePlayerBoardNotification other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.targetPoint_ != null) {
      if (targetPoint_ == null) {
        TargetPoint = new global::Vector();
      }
      TargetPoint.MergeFrom(other.TargetPoint);
    }
    if (other.Rotation != 0F) {
      Rotation = other.Rotation;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 18: {
          if (targetPoint_ == null) {
            TargetPoint = new global::Vector();
          }
          input.ReadMessage(TargetPoint);
          break;
        }
        case 29: {
          Rotation = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class C2S_PurchaseTileRequest : pb::IMessage<C2S_PurchaseTileRequest> {
  private static readonly pb::MessageParser<C2S_PurchaseTileRequest> _parser = new pb::MessageParser<C2S_PurchaseTileRequest>(() => new C2S_PurchaseTileRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_PurchaseTileRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_PurchaseTileRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_PurchaseTileRequest(C2S_PurchaseTileRequest other) : this() {
    sessionId_ = other.sessionId_;
    tile_ = other.tile_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_PurchaseTileRequest Clone() {
    return new C2S_PurchaseTileRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "tile" field.</summary>
  public const int TileFieldNumber = 2;
  private int tile_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Tile {
    get { return tile_; }
    set {
      tile_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_PurchaseTileRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_PurchaseTileRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (Tile != other.Tile) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (Tile != 0) hash ^= Tile.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (Tile != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Tile);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (Tile != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tile);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_PurchaseTileRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.Tile != 0) {
      Tile = other.Tile;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 16: {
          Tile = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_PurchaseTileResponse : pb::IMessage<S2C_PurchaseTileResponse> {
  private static readonly pb::MessageParser<S2C_PurchaseTileResponse> _parser = new pb::MessageParser<S2C_PurchaseTileResponse>(() => new S2C_PurchaseTileResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_PurchaseTileResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_PurchaseTileResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_PurchaseTileResponse(S2C_PurchaseTileResponse other) : this() {
    success_ = other.success_;
    tile_ = other.tile_;
    playerInfo_ = other.playerInfo_ != null ? other.playerInfo_.Clone() : null;
    purchaseGold_ = other.purchaseGold_;
    failCode_ = other.failCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_PurchaseTileResponse Clone() {
    return new S2C_PurchaseTileResponse(this);
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 1;
  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  /// <summary>Field number for the "tile" field.</summary>
  public const int TileFieldNumber = 2;
  private int tile_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Tile {
    get { return tile_; }
    set {
      tile_ = value;
    }
  }

  /// <summary>Field number for the "playerInfo" field.</summary>
  public const int PlayerInfoFieldNumber = 3;
  private global::BoardPlayerData playerInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BoardPlayerData PlayerInfo {
    get { return playerInfo_; }
    set {
      playerInfo_ = value;
    }
  }

  /// <summary>Field number for the "purchaseGold" field.</summary>
  public const int PurchaseGoldFieldNumber = 4;
  private int purchaseGold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PurchaseGold {
    get { return purchaseGold_; }
    set {
      purchaseGold_ = value;
    }
  }

  /// <summary>Field number for the "failCode" field.</summary>
  public const int FailCodeFieldNumber = 5;
  private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GlobalFailCode FailCode {
    get { return failCode_; }
    set {
      failCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_PurchaseTileResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_PurchaseTileResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Success != other.Success) return false;
    if (Tile != other.Tile) return false;
    if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
    if (PurchaseGold != other.PurchaseGold) return false;
    if (FailCode != other.FailCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Success != false) hash ^= Success.GetHashCode();
    if (Tile != 0) hash ^= Tile.GetHashCode();
    if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
    if (PurchaseGold != 0) hash ^= PurchaseGold.GetHashCode();
    if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Success != false) {
      output.WriteRawTag(8);
      output.WriteBool(Success);
    }
    if (Tile != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Tile);
    }
    if (playerInfo_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(PlayerInfo);
    }
    if (PurchaseGold != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(PurchaseGold);
    }
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      output.WriteRawTag(40);
      output.WriteEnum((int) FailCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Success != false) {
      size += 1 + 1;
    }
    if (Tile != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tile);
    }
    if (playerInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
    }
    if (PurchaseGold != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PurchaseGold);
    }
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FailCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_PurchaseTileResponse other) {
    if (other == null) {
      return;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    if (other.Tile != 0) {
      Tile = other.Tile;
    }
    if (other.playerInfo_ != null) {
      if (playerInfo_ == null) {
        PlayerInfo = new global::BoardPlayerData();
      }
      PlayerInfo.MergeFrom(other.PlayerInfo);
    }
    if (other.PurchaseGold != 0) {
      PurchaseGold = other.PurchaseGold;
    }
    if (other.FailCode != global::GlobalFailCode.NoneFailcode) {
      FailCode = other.FailCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Success = input.ReadBool();
          break;
        }
        case 16: {
          Tile = input.ReadInt32();
          break;
        }
        case 26: {
          if (playerInfo_ == null) {
            PlayerInfo = new global::BoardPlayerData();
          }
          input.ReadMessage(PlayerInfo);
          break;
        }
        case 32: {
          PurchaseGold = input.ReadInt32();
          break;
        }
        case 40: {
          FailCode = (global::GlobalFailCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_PurchaseTileNotification : pb::IMessage<S2C_PurchaseTileNotification> {
  private static readonly pb::MessageParser<S2C_PurchaseTileNotification> _parser = new pb::MessageParser<S2C_PurchaseTileNotification>(() => new S2C_PurchaseTileNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_PurchaseTileNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[28]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_PurchaseTileNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_PurchaseTileNotification(S2C_PurchaseTileNotification other) : this() {
    sessionId_ = other.sessionId_;
    tile_ = other.tile_;
    playerInfo_ = other.playerInfo_ != null ? other.playerInfo_.Clone() : null;
    purchaseGold_ = other.purchaseGold_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_PurchaseTileNotification Clone() {
    return new S2C_PurchaseTileNotification(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "tile" field.</summary>
  public const int TileFieldNumber = 2;
  private int tile_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Tile {
    get { return tile_; }
    set {
      tile_ = value;
    }
  }

  /// <summary>Field number for the "playerInfo" field.</summary>
  public const int PlayerInfoFieldNumber = 3;
  private global::BoardPlayerData playerInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BoardPlayerData PlayerInfo {
    get { return playerInfo_; }
    set {
      playerInfo_ = value;
    }
  }

  /// <summary>Field number for the "purchaseGold" field.</summary>
  public const int PurchaseGoldFieldNumber = 4;
  private int purchaseGold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PurchaseGold {
    get { return purchaseGold_; }
    set {
      purchaseGold_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_PurchaseTileNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_PurchaseTileNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (Tile != other.Tile) return false;
    if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
    if (PurchaseGold != other.PurchaseGold) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (Tile != 0) hash ^= Tile.GetHashCode();
    if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
    if (PurchaseGold != 0) hash ^= PurchaseGold.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (Tile != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Tile);
    }
    if (playerInfo_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(PlayerInfo);
    }
    if (PurchaseGold != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(PurchaseGold);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (Tile != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tile);
    }
    if (playerInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
    }
    if (PurchaseGold != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PurchaseGold);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_PurchaseTileNotification other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.Tile != 0) {
      Tile = other.Tile;
    }
    if (other.playerInfo_ != null) {
      if (playerInfo_ == null) {
        PlayerInfo = new global::BoardPlayerData();
      }
      PlayerInfo.MergeFrom(other.PlayerInfo);
    }
    if (other.PurchaseGold != 0) {
      PurchaseGold = other.PurchaseGold;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 16: {
          Tile = input.ReadInt32();
          break;
        }
        case 26: {
          if (playerInfo_ == null) {
            PlayerInfo = new global::BoardPlayerData();
          }
          input.ReadMessage(PlayerInfo);
          break;
        }
        case 32: {
          PurchaseGold = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_GameEndNotification : pb::IMessage<S2C_GameEndNotification> {
  private static readonly pb::MessageParser<S2C_GameEndNotification> _parser = new pb::MessageParser<S2C_GameEndNotification>(() => new S2C_GameEndNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_GameEndNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[29]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_GameEndNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_GameEndNotification(S2C_GameEndNotification other) : this() {
    rank_ = other.rank_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_GameEndNotification Clone() {
    return new S2C_GameEndNotification(this);
  }

  /// <summary>Field number for the "rank" field.</summary>
  public const int RankFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Rank> _repeated_rank_codec
      = pb::FieldCodec.ForMessage(10, global::Rank.Parser);
  private readonly pbc::RepeatedField<global::Rank> rank_ = new pbc::RepeatedField<global::Rank>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Rank> Rank {
    get { return rank_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_GameEndNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_GameEndNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!rank_.Equals(other.rank_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= rank_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    rank_.WriteTo(output, _repeated_rank_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += rank_.CalculateSize(_repeated_rank_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_GameEndNotification other) {
    if (other == null) {
      return;
    }
    rank_.Add(other.rank_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          rank_.AddEntriesFrom(input, _repeated_rank_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class C2S_BackToTheRoomRequest : pb::IMessage<C2S_BackToTheRoomRequest> {
  private static readonly pb::MessageParser<C2S_BackToTheRoomRequest> _parser = new pb::MessageParser<C2S_BackToTheRoomRequest>(() => new C2S_BackToTheRoomRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_BackToTheRoomRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[30]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_BackToTheRoomRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_BackToTheRoomRequest(C2S_BackToTheRoomRequest other) : this() {
    sessionId_ = other.sessionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_BackToTheRoomRequest Clone() {
    return new C2S_BackToTheRoomRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_BackToTheRoomRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_BackToTheRoomRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_BackToTheRoomRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_BackToTheRoomResponse : pb::IMessage<S2C_BackToTheRoomResponse> {
  private static readonly pb::MessageParser<S2C_BackToTheRoomResponse> _parser = new pb::MessageParser<S2C_BackToTheRoomResponse>(() => new S2C_BackToTheRoomResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_BackToTheRoomResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[31]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_BackToTheRoomResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_BackToTheRoomResponse(S2C_BackToTheRoomResponse other) : this() {
    success_ = other.success_;
    room_ = other.room_ != null ? other.room_.Clone() : null;
    failCode_ = other.failCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_BackToTheRoomResponse Clone() {
    return new S2C_BackToTheRoomResponse(this);
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 1;
  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  /// <summary>Field number for the "room" field.</summary>
  public const int RoomFieldNumber = 2;
  private global::RoomData room_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RoomData Room {
    get { return room_; }
    set {
      room_ = value;
    }
  }

  /// <summary>Field number for the "failCode" field.</summary>
  public const int FailCodeFieldNumber = 3;
  private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GlobalFailCode FailCode {
    get { return failCode_; }
    set {
      failCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_BackToTheRoomResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_BackToTheRoomResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Success != other.Success) return false;
    if (!object.Equals(Room, other.Room)) return false;
    if (FailCode != other.FailCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Success != false) hash ^= Success.GetHashCode();
    if (room_ != null) hash ^= Room.GetHashCode();
    if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Success != false) {
      output.WriteRawTag(8);
      output.WriteBool(Success);
    }
    if (room_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Room);
    }
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      output.WriteRawTag(24);
      output.WriteEnum((int) FailCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Success != false) {
      size += 1 + 1;
    }
    if (room_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
    }
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FailCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_BackToTheRoomResponse other) {
    if (other == null) {
      return;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    if (other.room_ != null) {
      if (room_ == null) {
        Room = new global::RoomData();
      }
      Room.MergeFrom(other.Room);
    }
    if (other.FailCode != global::GlobalFailCode.NoneFailcode) {
      FailCode = other.FailCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Success = input.ReadBool();
          break;
        }
        case 18: {
          if (room_ == null) {
            Room = new global::RoomData();
          }
          input.ReadMessage(Room);
          break;
        }
        case 24: {
          FailCode = (global::GlobalFailCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_BackToTheRoomNotification : pb::IMessage<S2C_BackToTheRoomNotification> {
  private static readonly pb::MessageParser<S2C_BackToTheRoomNotification> _parser = new pb::MessageParser<S2C_BackToTheRoomNotification>(() => new S2C_BackToTheRoomNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_BackToTheRoomNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[32]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_BackToTheRoomNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_BackToTheRoomNotification(S2C_BackToTheRoomNotification other) : this() {
    sessionId_ = other.sessionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_BackToTheRoomNotification Clone() {
    return new S2C_BackToTheRoomNotification(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_BackToTheRoomNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_BackToTheRoomNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_BackToTheRoomNotification other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class C2S_StartMiniGameRequest : pb::IMessage<C2S_StartMiniGameRequest> {
  private static readonly pb::MessageParser<C2S_StartMiniGameRequest> _parser = new pb::MessageParser<C2S_StartMiniGameRequest>(() => new C2S_StartMiniGameRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_StartMiniGameRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[33]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_StartMiniGameRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_StartMiniGameRequest(C2S_StartMiniGameRequest other) : this() {
    sessionId_ = other.sessionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_StartMiniGameRequest Clone() {
    return new C2S_StartMiniGameRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_StartMiniGameRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_StartMiniGameRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_StartMiniGameRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_StartMiniGameNotification : pb::IMessage<S2C_StartMiniGameNotification> {
  private static readonly pb::MessageParser<S2C_StartMiniGameNotification> _parser = new pb::MessageParser<S2C_StartMiniGameNotification>(() => new S2C_StartMiniGameNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_StartMiniGameNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[34]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_StartMiniGameNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_StartMiniGameNotification(S2C_StartMiniGameNotification other) : this() {
    game_ = other.game_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_StartMiniGameNotification Clone() {
    return new S2C_StartMiniGameNotification(this);
  }

  /// <summary>Field number for the "game" field.</summary>
  public const int GameFieldNumber = 1;
  private int game_;
  /// <summary>
  /// 랜덤으로 돌린 미니 게임 중 하나
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Game {
    get { return game_; }
    set {
      game_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_StartMiniGameNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_StartMiniGameNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Game != other.Game) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Game != 0) hash ^= Game.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Game != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Game);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Game != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Game);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_StartMiniGameNotification other) {
    if (other == null) {
      return;
    }
    if (other.Game != 0) {
      Game = other.Game;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Game = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class C2S_PurchaseTrophyRequest : pb::IMessage<C2S_PurchaseTrophyRequest> {
  private static readonly pb::MessageParser<C2S_PurchaseTrophyRequest> _parser = new pb::MessageParser<C2S_PurchaseTrophyRequest>(() => new C2S_PurchaseTrophyRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_PurchaseTrophyRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[35]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_PurchaseTrophyRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_PurchaseTrophyRequest(C2S_PurchaseTrophyRequest other) : this() {
    sessionId_ = other.sessionId_;
    tile_ = other.tile_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_PurchaseTrophyRequest Clone() {
    return new C2S_PurchaseTrophyRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "tile" field.</summary>
  public const int TileFieldNumber = 2;
  private int tile_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Tile {
    get { return tile_; }
    set {
      tile_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_PurchaseTrophyRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_PurchaseTrophyRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (Tile != other.Tile) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (Tile != 0) hash ^= Tile.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (Tile != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Tile);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (Tile != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tile);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_PurchaseTrophyRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.Tile != 0) {
      Tile = other.Tile;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 16: {
          Tile = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_PurchaseTrophyResponse : pb::IMessage<S2C_PurchaseTrophyResponse> {
  private static readonly pb::MessageParser<S2C_PurchaseTrophyResponse> _parser = new pb::MessageParser<S2C_PurchaseTrophyResponse>(() => new S2C_PurchaseTrophyResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_PurchaseTrophyResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[36]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_PurchaseTrophyResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_PurchaseTrophyResponse(S2C_PurchaseTrophyResponse other) : this() {
    success_ = other.success_;
    nextTile_ = other.nextTile_;
    playerInfo_ = other.playerInfo_ != null ? other.playerInfo_.Clone() : null;
    failCode_ = other.failCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_PurchaseTrophyResponse Clone() {
    return new S2C_PurchaseTrophyResponse(this);
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 1;
  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  /// <summary>Field number for the "nextTile" field.</summary>
  public const int NextTileFieldNumber = 2;
  private int nextTile_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NextTile {
    get { return nextTile_; }
    set {
      nextTile_ = value;
    }
  }

  /// <summary>Field number for the "playerInfo" field.</summary>
  public const int PlayerInfoFieldNumber = 3;
  private global::BoardPlayerData playerInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BoardPlayerData PlayerInfo {
    get { return playerInfo_; }
    set {
      playerInfo_ = value;
    }
  }

  /// <summary>Field number for the "failCode" field.</summary>
  public const int FailCodeFieldNumber = 4;
  private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GlobalFailCode FailCode {
    get { return failCode_; }
    set {
      failCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_PurchaseTrophyResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_PurchaseTrophyResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Success != other.Success) return false;
    if (NextTile != other.NextTile) return false;
    if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
    if (FailCode != other.FailCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Success != false) hash ^= Success.GetHashCode();
    if (NextTile != 0) hash ^= NextTile.GetHashCode();
    if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
    if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Success != false) {
      output.WriteRawTag(8);
      output.WriteBool(Success);
    }
    if (NextTile != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(NextTile);
    }
    if (playerInfo_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(PlayerInfo);
    }
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      output.WriteRawTag(32);
      output.WriteEnum((int) FailCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Success != false) {
      size += 1 + 1;
    }
    if (NextTile != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextTile);
    }
    if (playerInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
    }
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FailCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_PurchaseTrophyResponse other) {
    if (other == null) {
      return;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    if (other.NextTile != 0) {
      NextTile = other.NextTile;
    }
    if (other.playerInfo_ != null) {
      if (playerInfo_ == null) {
        PlayerInfo = new global::BoardPlayerData();
      }
      PlayerInfo.MergeFrom(other.PlayerInfo);
    }
    if (other.FailCode != global::GlobalFailCode.NoneFailcode) {
      FailCode = other.FailCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Success = input.ReadBool();
          break;
        }
        case 16: {
          NextTile = input.ReadInt32();
          break;
        }
        case 26: {
          if (playerInfo_ == null) {
            PlayerInfo = new global::BoardPlayerData();
          }
          input.ReadMessage(PlayerInfo);
          break;
        }
        case 32: {
          FailCode = (global::GlobalFailCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_PurchaseTrophyNotification : pb::IMessage<S2C_PurchaseTrophyNotification> {
  private static readonly pb::MessageParser<S2C_PurchaseTrophyNotification> _parser = new pb::MessageParser<S2C_PurchaseTrophyNotification>(() => new S2C_PurchaseTrophyNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_PurchaseTrophyNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[37]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_PurchaseTrophyNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_PurchaseTrophyNotification(S2C_PurchaseTrophyNotification other) : this() {
    sessionId_ = other.sessionId_;
    beforeTile_ = other.beforeTile_;
    nextTile_ = other.nextTile_;
    playersInfo_ = other.playersInfo_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_PurchaseTrophyNotification Clone() {
    return new S2C_PurchaseTrophyNotification(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "beforeTile" field.</summary>
  public const int BeforeTileFieldNumber = 2;
  private int beforeTile_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BeforeTile {
    get { return beforeTile_; }
    set {
      beforeTile_ = value;
    }
  }

  /// <summary>Field number for the "nextTile" field.</summary>
  public const int NextTileFieldNumber = 3;
  private int nextTile_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NextTile {
    get { return nextTile_; }
    set {
      nextTile_ = value;
    }
  }

  /// <summary>Field number for the "playersInfo" field.</summary>
  public const int PlayersInfoFieldNumber = 4;
  private static readonly pb::FieldCodec<global::BoardPlayerData> _repeated_playersInfo_codec
      = pb::FieldCodec.ForMessage(34, global::BoardPlayerData.Parser);
  private readonly pbc::RepeatedField<global::BoardPlayerData> playersInfo_ = new pbc::RepeatedField<global::BoardPlayerData>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::BoardPlayerData> PlayersInfo {
    get { return playersInfo_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_PurchaseTrophyNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_PurchaseTrophyNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (BeforeTile != other.BeforeTile) return false;
    if (NextTile != other.NextTile) return false;
    if(!playersInfo_.Equals(other.playersInfo_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (BeforeTile != 0) hash ^= BeforeTile.GetHashCode();
    if (NextTile != 0) hash ^= NextTile.GetHashCode();
    hash ^= playersInfo_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (BeforeTile != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(BeforeTile);
    }
    if (NextTile != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(NextTile);
    }
    playersInfo_.WriteTo(output, _repeated_playersInfo_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (BeforeTile != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BeforeTile);
    }
    if (NextTile != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextTile);
    }
    size += playersInfo_.CalculateSize(_repeated_playersInfo_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_PurchaseTrophyNotification other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.BeforeTile != 0) {
      BeforeTile = other.BeforeTile;
    }
    if (other.NextTile != 0) {
      NextTile = other.NextTile;
    }
    playersInfo_.Add(other.playersInfo_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 16: {
          BeforeTile = input.ReadInt32();
          break;
        }
        case 24: {
          NextTile = input.ReadInt32();
          break;
        }
        case 34: {
          playersInfo_.AddEntriesFrom(input, _repeated_playersInfo_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class C2S_TilePenaltyRequest : pb::IMessage<C2S_TilePenaltyRequest> {
  private static readonly pb::MessageParser<C2S_TilePenaltyRequest> _parser = new pb::MessageParser<C2S_TilePenaltyRequest>(() => new C2S_TilePenaltyRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_TilePenaltyRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[38]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_TilePenaltyRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_TilePenaltyRequest(C2S_TilePenaltyRequest other) : this() {
    sessionId_ = other.sessionId_;
    tile_ = other.tile_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_TilePenaltyRequest Clone() {
    return new C2S_TilePenaltyRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "tile" field.</summary>
  public const int TileFieldNumber = 2;
  private int tile_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Tile {
    get { return tile_; }
    set {
      tile_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_TilePenaltyRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_TilePenaltyRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (Tile != other.Tile) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (Tile != 0) hash ^= Tile.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (Tile != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Tile);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (Tile != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tile);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_TilePenaltyRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.Tile != 0) {
      Tile = other.Tile;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 16: {
          Tile = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_TilePenaltyResponse : pb::IMessage<S2C_TilePenaltyResponse> {
  private static readonly pb::MessageParser<S2C_TilePenaltyResponse> _parser = new pb::MessageParser<S2C_TilePenaltyResponse>(() => new S2C_TilePenaltyResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_TilePenaltyResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[39]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_TilePenaltyResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_TilePenaltyResponse(S2C_TilePenaltyResponse other) : this() {
    success_ = other.success_;
    playersInfo_ = other.playersInfo_.Clone();
    failCode_ = other.failCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_TilePenaltyResponse Clone() {
    return new S2C_TilePenaltyResponse(this);
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 1;
  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  /// <summary>Field number for the "playersInfo" field.</summary>
  public const int PlayersInfoFieldNumber = 2;
  private static readonly pb::FieldCodec<global::BoardPlayerData> _repeated_playersInfo_codec
      = pb::FieldCodec.ForMessage(18, global::BoardPlayerData.Parser);
  private readonly pbc::RepeatedField<global::BoardPlayerData> playersInfo_ = new pbc::RepeatedField<global::BoardPlayerData>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::BoardPlayerData> PlayersInfo {
    get { return playersInfo_; }
  }

  /// <summary>Field number for the "failCode" field.</summary>
  public const int FailCodeFieldNumber = 3;
  private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GlobalFailCode FailCode {
    get { return failCode_; }
    set {
      failCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_TilePenaltyResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_TilePenaltyResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Success != other.Success) return false;
    if(!playersInfo_.Equals(other.playersInfo_)) return false;
    if (FailCode != other.FailCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Success != false) hash ^= Success.GetHashCode();
    hash ^= playersInfo_.GetHashCode();
    if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Success != false) {
      output.WriteRawTag(8);
      output.WriteBool(Success);
    }
    playersInfo_.WriteTo(output, _repeated_playersInfo_codec);
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      output.WriteRawTag(24);
      output.WriteEnum((int) FailCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Success != false) {
      size += 1 + 1;
    }
    size += playersInfo_.CalculateSize(_repeated_playersInfo_codec);
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FailCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_TilePenaltyResponse other) {
    if (other == null) {
      return;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    playersInfo_.Add(other.playersInfo_);
    if (other.FailCode != global::GlobalFailCode.NoneFailcode) {
      FailCode = other.FailCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Success = input.ReadBool();
          break;
        }
        case 18: {
          playersInfo_.AddEntriesFrom(input, _repeated_playersInfo_codec);
          break;
        }
        case 24: {
          FailCode = (global::GlobalFailCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_TilePenaltyNotification : pb::IMessage<S2C_TilePenaltyNotification> {
  private static readonly pb::MessageParser<S2C_TilePenaltyNotification> _parser = new pb::MessageParser<S2C_TilePenaltyNotification>(() => new S2C_TilePenaltyNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_TilePenaltyNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[40]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_TilePenaltyNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_TilePenaltyNotification(S2C_TilePenaltyNotification other) : this() {
    sessionId_ = other.sessionId_;
    tile_ = other.tile_;
    playersInfo_ = other.playersInfo_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_TilePenaltyNotification Clone() {
    return new S2C_TilePenaltyNotification(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "tile" field.</summary>
  public const int TileFieldNumber = 2;
  private int tile_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Tile {
    get { return tile_; }
    set {
      tile_ = value;
    }
  }

  /// <summary>Field number for the "playersInfo" field.</summary>
  public const int PlayersInfoFieldNumber = 3;
  private static readonly pb::FieldCodec<global::BoardPlayerData> _repeated_playersInfo_codec
      = pb::FieldCodec.ForMessage(26, global::BoardPlayerData.Parser);
  private readonly pbc::RepeatedField<global::BoardPlayerData> playersInfo_ = new pbc::RepeatedField<global::BoardPlayerData>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::BoardPlayerData> PlayersInfo {
    get { return playersInfo_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_TilePenaltyNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_TilePenaltyNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (Tile != other.Tile) return false;
    if(!playersInfo_.Equals(other.playersInfo_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (Tile != 0) hash ^= Tile.GetHashCode();
    hash ^= playersInfo_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (Tile != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Tile);
    }
    playersInfo_.WriteTo(output, _repeated_playersInfo_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (Tile != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tile);
    }
    size += playersInfo_.CalculateSize(_repeated_playersInfo_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_TilePenaltyNotification other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.Tile != 0) {
      Tile = other.Tile;
    }
    playersInfo_.Add(other.playersInfo_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 16: {
          Tile = input.ReadInt32();
          break;
        }
        case 26: {
          playersInfo_.AddEntriesFrom(input, _repeated_playersInfo_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class C2S_DiceGameRequest : pb::IMessage<C2S_DiceGameRequest> {
  private static readonly pb::MessageParser<C2S_DiceGameRequest> _parser = new pb::MessageParser<C2S_DiceGameRequest>(() => new C2S_DiceGameRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_DiceGameRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[41]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_DiceGameRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_DiceGameRequest(C2S_DiceGameRequest other) : this() {
    sessionId_ = other.sessionId_;
    distance_ = other.distance_;
    angle_ = other.angle_ != null ? other.angle_.Clone() : null;
    location_ = other.location_ != null ? other.location_.Clone() : null;
    power_ = other.power_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_DiceGameRequest Clone() {
    return new C2S_DiceGameRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "distance" field.</summary>
  public const int DistanceFieldNumber = 2;
  private float distance_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Distance {
    get { return distance_; }
    set {
      distance_ = value;
    }
  }

  /// <summary>Field number for the "angle" field.</summary>
  public const int AngleFieldNumber = 3;
  private global::Vector angle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector Angle {
    get { return angle_; }
    set {
      angle_ = value;
    }
  }

  /// <summary>Field number for the "location" field.</summary>
  public const int LocationFieldNumber = 4;
  private global::Vector location_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector Location {
    get { return location_; }
    set {
      location_ = value;
    }
  }

  /// <summary>Field number for the "power" field.</summary>
  public const int PowerFieldNumber = 5;
  private float power_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Power {
    get { return power_; }
    set {
      power_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_DiceGameRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_DiceGameRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Distance, other.Distance)) return false;
    if (!object.Equals(Angle, other.Angle)) return false;
    if (!object.Equals(Location, other.Location)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Power, other.Power)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (Distance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Distance);
    if (angle_ != null) hash ^= Angle.GetHashCode();
    if (location_ != null) hash ^= Location.GetHashCode();
    if (Power != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Power);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (Distance != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Distance);
    }
    if (angle_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Angle);
    }
    if (location_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Location);
    }
    if (Power != 0F) {
      output.WriteRawTag(45);
      output.WriteFloat(Power);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (Distance != 0F) {
      size += 1 + 4;
    }
    if (angle_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Angle);
    }
    if (location_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
    }
    if (Power != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_DiceGameRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.Distance != 0F) {
      Distance = other.Distance;
    }
    if (other.angle_ != null) {
      if (angle_ == null) {
        Angle = new global::Vector();
      }
      Angle.MergeFrom(other.Angle);
    }
    if (other.location_ != null) {
      if (location_ == null) {
        Location = new global::Vector();
      }
      Location.MergeFrom(other.Location);
    }
    if (other.Power != 0F) {
      Power = other.Power;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 21: {
          Distance = input.ReadFloat();
          break;
        }
        case 26: {
          if (angle_ == null) {
            Angle = new global::Vector();
          }
          input.ReadMessage(Angle);
          break;
        }
        case 34: {
          if (location_ == null) {
            Location = new global::Vector();
          }
          input.ReadMessage(Location);
          break;
        }
        case 45: {
          Power = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_DiceGameResponse : pb::IMessage<S2C_DiceGameResponse> {
  private static readonly pb::MessageParser<S2C_DiceGameResponse> _parser = new pb::MessageParser<S2C_DiceGameResponse>(() => new S2C_DiceGameResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_DiceGameResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[42]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DiceGameResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DiceGameResponse(S2C_DiceGameResponse other) : this() {
    success_ = other.success_;
    result_ = other.result_.Clone();
    failCode_ = other.failCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DiceGameResponse Clone() {
    return new S2C_DiceGameResponse(this);
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 1;
  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 2;
  private static readonly pb::FieldCodec<global::DiceGameData> _repeated_result_codec
      = pb::FieldCodec.ForMessage(18, global::DiceGameData.Parser);
  private readonly pbc::RepeatedField<global::DiceGameData> result_ = new pbc::RepeatedField<global::DiceGameData>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DiceGameData> Result {
    get { return result_; }
  }

  /// <summary>Field number for the "failCode" field.</summary>
  public const int FailCodeFieldNumber = 3;
  private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GlobalFailCode FailCode {
    get { return failCode_; }
    set {
      failCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_DiceGameResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_DiceGameResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Success != other.Success) return false;
    if(!result_.Equals(other.result_)) return false;
    if (FailCode != other.FailCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Success != false) hash ^= Success.GetHashCode();
    hash ^= result_.GetHashCode();
    if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Success != false) {
      output.WriteRawTag(8);
      output.WriteBool(Success);
    }
    result_.WriteTo(output, _repeated_result_codec);
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      output.WriteRawTag(24);
      output.WriteEnum((int) FailCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Success != false) {
      size += 1 + 1;
    }
    size += result_.CalculateSize(_repeated_result_codec);
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FailCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_DiceGameResponse other) {
    if (other == null) {
      return;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    result_.Add(other.result_);
    if (other.FailCode != global::GlobalFailCode.NoneFailcode) {
      FailCode = other.FailCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Success = input.ReadBool();
          break;
        }
        case 18: {
          result_.AddEntriesFrom(input, _repeated_result_codec);
          break;
        }
        case 24: {
          FailCode = (global::GlobalFailCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_DiceGameNotification : pb::IMessage<S2C_DiceGameNotification> {
  private static readonly pb::MessageParser<S2C_DiceGameNotification> _parser = new pb::MessageParser<S2C_DiceGameNotification>(() => new S2C_DiceGameNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_DiceGameNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[43]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DiceGameNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DiceGameNotification(S2C_DiceGameNotification other) : this() {
    result_ = other.result_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DiceGameNotification Clone() {
    return new S2C_DiceGameNotification(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private static readonly pb::FieldCodec<global::DiceGameData> _repeated_result_codec
      = pb::FieldCodec.ForMessage(10, global::DiceGameData.Parser);
  private readonly pbc::RepeatedField<global::DiceGameData> result_ = new pbc::RepeatedField<global::DiceGameData>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DiceGameData> Result {
    get { return result_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_DiceGameNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_DiceGameNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!result_.Equals(other.result_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= result_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    result_.WriteTo(output, _repeated_result_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += result_.CalculateSize(_repeated_result_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_DiceGameNotification other) {
    if (other == null) {
      return;
    }
    result_.Add(other.result_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          result_.AddEntriesFrom(input, _repeated_result_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class C2S_TurnEndRequest : pb::IMessage<C2S_TurnEndRequest> {
  private static readonly pb::MessageParser<C2S_TurnEndRequest> _parser = new pb::MessageParser<C2S_TurnEndRequest>(() => new C2S_TurnEndRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_TurnEndRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[44]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_TurnEndRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_TurnEndRequest(C2S_TurnEndRequest other) : this() {
    sessionId_ = other.sessionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_TurnEndRequest Clone() {
    return new C2S_TurnEndRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_TurnEndRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_TurnEndRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_TurnEndRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_TurnEndNotification : pb::IMessage<S2C_TurnEndNotification> {
  private static readonly pb::MessageParser<S2C_TurnEndNotification> _parser = new pb::MessageParser<S2C_TurnEndNotification>(() => new S2C_TurnEndNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_TurnEndNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[45]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_TurnEndNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_TurnEndNotification(S2C_TurnEndNotification other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_TurnEndNotification Clone() {
    return new S2C_TurnEndNotification(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_TurnEndNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_TurnEndNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_TurnEndNotification other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

/// <summary>
///LOBBY
/// </summary>
public sealed partial class C2S_LobbyJoinRequest : pb::IMessage<C2S_LobbyJoinRequest> {
  private static readonly pb::MessageParser<C2S_LobbyJoinRequest> _parser = new pb::MessageParser<C2S_LobbyJoinRequest>(() => new C2S_LobbyJoinRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_LobbyJoinRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[46]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_LobbyJoinRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_LobbyJoinRequest(C2S_LobbyJoinRequest other) : this() {
    sessionId_ = other.sessionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_LobbyJoinRequest Clone() {
    return new C2S_LobbyJoinRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_LobbyJoinRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_LobbyJoinRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_LobbyJoinRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_LobbyJoinResponse : pb::IMessage<S2C_LobbyJoinResponse> {
  private static readonly pb::MessageParser<S2C_LobbyJoinResponse> _parser = new pb::MessageParser<S2C_LobbyJoinResponse>(() => new S2C_LobbyJoinResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_LobbyJoinResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[47]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_LobbyJoinResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_LobbyJoinResponse(S2C_LobbyJoinResponse other) : this() {
    success_ = other.success_;
    user_ = other.user_ != null ? other.user_.Clone() : null;
    failCode_ = other.failCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_LobbyJoinResponse Clone() {
    return new S2C_LobbyJoinResponse(this);
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 1;
  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  /// <summary>Field number for the "user" field.</summary>
  public const int UserFieldNumber = 2;
  private global::UserData user_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::UserData User {
    get { return user_; }
    set {
      user_ = value;
    }
  }

  /// <summary>Field number for the "failCode" field.</summary>
  public const int FailCodeFieldNumber = 3;
  private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GlobalFailCode FailCode {
    get { return failCode_; }
    set {
      failCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_LobbyJoinResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_LobbyJoinResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Success != other.Success) return false;
    if (!object.Equals(User, other.User)) return false;
    if (FailCode != other.FailCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Success != false) hash ^= Success.GetHashCode();
    if (user_ != null) hash ^= User.GetHashCode();
    if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Success != false) {
      output.WriteRawTag(8);
      output.WriteBool(Success);
    }
    if (user_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(User);
    }
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      output.WriteRawTag(24);
      output.WriteEnum((int) FailCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Success != false) {
      size += 1 + 1;
    }
    if (user_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
    }
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FailCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_LobbyJoinResponse other) {
    if (other == null) {
      return;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    if (other.user_ != null) {
      if (user_ == null) {
        User = new global::UserData();
      }
      User.MergeFrom(other.User);
    }
    if (other.FailCode != global::GlobalFailCode.NoneFailcode) {
      FailCode = other.FailCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Success = input.ReadBool();
          break;
        }
        case 18: {
          if (user_ == null) {
            User = new global::UserData();
          }
          input.ReadMessage(User);
          break;
        }
        case 24: {
          FailCode = (global::GlobalFailCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class C2S_LobbyLeaveRequest : pb::IMessage<C2S_LobbyLeaveRequest> {
  private static readonly pb::MessageParser<C2S_LobbyLeaveRequest> _parser = new pb::MessageParser<C2S_LobbyLeaveRequest>(() => new C2S_LobbyLeaveRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_LobbyLeaveRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[48]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_LobbyLeaveRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_LobbyLeaveRequest(C2S_LobbyLeaveRequest other) : this() {
    sessionId_ = other.sessionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_LobbyLeaveRequest Clone() {
    return new C2S_LobbyLeaveRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_LobbyLeaveRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_LobbyLeaveRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_LobbyLeaveRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_LobbyLeaveResponse : pb::IMessage<S2C_LobbyLeaveResponse> {
  private static readonly pb::MessageParser<S2C_LobbyLeaveResponse> _parser = new pb::MessageParser<S2C_LobbyLeaveResponse>(() => new S2C_LobbyLeaveResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_LobbyLeaveResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[49]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_LobbyLeaveResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_LobbyLeaveResponse(S2C_LobbyLeaveResponse other) : this() {
    success_ = other.success_;
    failCode_ = other.failCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_LobbyLeaveResponse Clone() {
    return new S2C_LobbyLeaveResponse(this);
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 1;
  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  /// <summary>Field number for the "failCode" field.</summary>
  public const int FailCodeFieldNumber = 2;
  private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GlobalFailCode FailCode {
    get { return failCode_; }
    set {
      failCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_LobbyLeaveResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_LobbyLeaveResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Success != other.Success) return false;
    if (FailCode != other.FailCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Success != false) hash ^= Success.GetHashCode();
    if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Success != false) {
      output.WriteRawTag(8);
      output.WriteBool(Success);
    }
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) FailCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Success != false) {
      size += 1 + 1;
    }
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FailCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_LobbyLeaveResponse other) {
    if (other == null) {
      return;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    if (other.FailCode != global::GlobalFailCode.NoneFailcode) {
      FailCode = other.FailCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Success = input.ReadBool();
          break;
        }
        case 16: {
          FailCode = (global::GlobalFailCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class C2S_LobbyUserListRequest : pb::IMessage<C2S_LobbyUserListRequest> {
  private static readonly pb::MessageParser<C2S_LobbyUserListRequest> _parser = new pb::MessageParser<C2S_LobbyUserListRequest>(() => new C2S_LobbyUserListRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_LobbyUserListRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[50]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_LobbyUserListRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_LobbyUserListRequest(C2S_LobbyUserListRequest other) : this() {
    sessionId_ = other.sessionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_LobbyUserListRequest Clone() {
    return new C2S_LobbyUserListRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_LobbyUserListRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_LobbyUserListRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_LobbyUserListRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_LobbyUserListResponse : pb::IMessage<S2C_LobbyUserListResponse> {
  private static readonly pb::MessageParser<S2C_LobbyUserListResponse> _parser = new pb::MessageParser<S2C_LobbyUserListResponse>(() => new S2C_LobbyUserListResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_LobbyUserListResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[51]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_LobbyUserListResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_LobbyUserListResponse(S2C_LobbyUserListResponse other) : this() {
    success_ = other.success_;
    userList_ = other.userList_.Clone();
    failCode_ = other.failCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_LobbyUserListResponse Clone() {
    return new S2C_LobbyUserListResponse(this);
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 1;
  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  /// <summary>Field number for the "userList" field.</summary>
  public const int UserListFieldNumber = 2;
  private static readonly pb::FieldCodec<string> _repeated_userList_codec
      = pb::FieldCodec.ForString(18);
  private readonly pbc::RepeatedField<string> userList_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> UserList {
    get { return userList_; }
  }

  /// <summary>Field number for the "failCode" field.</summary>
  public const int FailCodeFieldNumber = 3;
  private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GlobalFailCode FailCode {
    get { return failCode_; }
    set {
      failCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_LobbyUserListResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_LobbyUserListResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Success != other.Success) return false;
    if(!userList_.Equals(other.userList_)) return false;
    if (FailCode != other.FailCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Success != false) hash ^= Success.GetHashCode();
    hash ^= userList_.GetHashCode();
    if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Success != false) {
      output.WriteRawTag(8);
      output.WriteBool(Success);
    }
    userList_.WriteTo(output, _repeated_userList_codec);
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      output.WriteRawTag(24);
      output.WriteEnum((int) FailCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Success != false) {
      size += 1 + 1;
    }
    size += userList_.CalculateSize(_repeated_userList_codec);
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FailCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_LobbyUserListResponse other) {
    if (other == null) {
      return;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    userList_.Add(other.userList_);
    if (other.FailCode != global::GlobalFailCode.NoneFailcode) {
      FailCode = other.FailCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Success = input.ReadBool();
          break;
        }
        case 18: {
          userList_.AddEntriesFrom(input, _repeated_userList_codec);
          break;
        }
        case 24: {
          FailCode = (global::GlobalFailCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class C2S_LobbyUserDetailRequest : pb::IMessage<C2S_LobbyUserDetailRequest> {
  private static readonly pb::MessageParser<C2S_LobbyUserDetailRequest> _parser = new pb::MessageParser<C2S_LobbyUserDetailRequest>(() => new C2S_LobbyUserDetailRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_LobbyUserDetailRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[52]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_LobbyUserDetailRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_LobbyUserDetailRequest(C2S_LobbyUserDetailRequest other) : this() {
    sessionId_ = other.sessionId_;
    targetSessionId_ = other.targetSessionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_LobbyUserDetailRequest Clone() {
    return new C2S_LobbyUserDetailRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "targetSessionId" field.</summary>
  public const int TargetSessionIdFieldNumber = 2;
  private string targetSessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TargetSessionId {
    get { return targetSessionId_; }
    set {
      targetSessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_LobbyUserDetailRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_LobbyUserDetailRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (TargetSessionId != other.TargetSessionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (TargetSessionId.Length != 0) hash ^= TargetSessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (TargetSessionId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(TargetSessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (TargetSessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetSessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_LobbyUserDetailRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.TargetSessionId.Length != 0) {
      TargetSessionId = other.TargetSessionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 18: {
          TargetSessionId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_LobbyUserDetailResponse : pb::IMessage<S2C_LobbyUserDetailResponse> {
  private static readonly pb::MessageParser<S2C_LobbyUserDetailResponse> _parser = new pb::MessageParser<S2C_LobbyUserDetailResponse>(() => new S2C_LobbyUserDetailResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_LobbyUserDetailResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[53]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_LobbyUserDetailResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_LobbyUserDetailResponse(S2C_LobbyUserDetailResponse other) : this() {
    success_ = other.success_;
    user_ = other.user_ != null ? other.user_.Clone() : null;
    failCode_ = other.failCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_LobbyUserDetailResponse Clone() {
    return new S2C_LobbyUserDetailResponse(this);
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 1;
  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  /// <summary>Field number for the "user" field.</summary>
  public const int UserFieldNumber = 2;
  private global::UserData user_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::UserData User {
    get { return user_; }
    set {
      user_ = value;
    }
  }

  /// <summary>Field number for the "failCode" field.</summary>
  public const int FailCodeFieldNumber = 3;
  private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GlobalFailCode FailCode {
    get { return failCode_; }
    set {
      failCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_LobbyUserDetailResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_LobbyUserDetailResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Success != other.Success) return false;
    if (!object.Equals(User, other.User)) return false;
    if (FailCode != other.FailCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Success != false) hash ^= Success.GetHashCode();
    if (user_ != null) hash ^= User.GetHashCode();
    if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Success != false) {
      output.WriteRawTag(8);
      output.WriteBool(Success);
    }
    if (user_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(User);
    }
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      output.WriteRawTag(24);
      output.WriteEnum((int) FailCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Success != false) {
      size += 1 + 1;
    }
    if (user_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
    }
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FailCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_LobbyUserDetailResponse other) {
    if (other == null) {
      return;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    if (other.user_ != null) {
      if (user_ == null) {
        User = new global::UserData();
      }
      User.MergeFrom(other.User);
    }
    if (other.FailCode != global::GlobalFailCode.NoneFailcode) {
      FailCode = other.FailCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Success = input.ReadBool();
          break;
        }
        case 18: {
          if (user_ == null) {
            User = new global::UserData();
          }
          input.ReadMessage(User);
          break;
        }
        case 24: {
          FailCode = (global::GlobalFailCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
///ROOM
/// </summary>
public sealed partial class C2S_RoomListRequest : pb::IMessage<C2S_RoomListRequest> {
  private static readonly pb::MessageParser<C2S_RoomListRequest> _parser = new pb::MessageParser<C2S_RoomListRequest>(() => new C2S_RoomListRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_RoomListRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[54]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_RoomListRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_RoomListRequest(C2S_RoomListRequest other) : this() {
    sessionId_ = other.sessionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_RoomListRequest Clone() {
    return new C2S_RoomListRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_RoomListRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_RoomListRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_RoomListRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_RoomListResponse : pb::IMessage<S2C_RoomListResponse> {
  private static readonly pb::MessageParser<S2C_RoomListResponse> _parser = new pb::MessageParser<S2C_RoomListResponse>(() => new S2C_RoomListResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_RoomListResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[55]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_RoomListResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_RoomListResponse(S2C_RoomListResponse other) : this() {
    success_ = other.success_;
    rooms_ = other.rooms_.Clone();
    failCode_ = other.failCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_RoomListResponse Clone() {
    return new S2C_RoomListResponse(this);
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 1;
  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  /// <summary>Field number for the "rooms" field.</summary>
  public const int RoomsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::RoomData> _repeated_rooms_codec
      = pb::FieldCodec.ForMessage(18, global::RoomData.Parser);
  private readonly pbc::RepeatedField<global::RoomData> rooms_ = new pbc::RepeatedField<global::RoomData>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::RoomData> Rooms {
    get { return rooms_; }
  }

  /// <summary>Field number for the "failCode" field.</summary>
  public const int FailCodeFieldNumber = 3;
  private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GlobalFailCode FailCode {
    get { return failCode_; }
    set {
      failCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_RoomListResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_RoomListResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Success != other.Success) return false;
    if(!rooms_.Equals(other.rooms_)) return false;
    if (FailCode != other.FailCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Success != false) hash ^= Success.GetHashCode();
    hash ^= rooms_.GetHashCode();
    if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Success != false) {
      output.WriteRawTag(8);
      output.WriteBool(Success);
    }
    rooms_.WriteTo(output, _repeated_rooms_codec);
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      output.WriteRawTag(24);
      output.WriteEnum((int) FailCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Success != false) {
      size += 1 + 1;
    }
    size += rooms_.CalculateSize(_repeated_rooms_codec);
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FailCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_RoomListResponse other) {
    if (other == null) {
      return;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    rooms_.Add(other.rooms_);
    if (other.FailCode != global::GlobalFailCode.NoneFailcode) {
      FailCode = other.FailCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Success = input.ReadBool();
          break;
        }
        case 18: {
          rooms_.AddEntriesFrom(input, _repeated_rooms_codec);
          break;
        }
        case 24: {
          FailCode = (global::GlobalFailCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class C2S_CreateRoomRequest : pb::IMessage<C2S_CreateRoomRequest> {
  private static readonly pb::MessageParser<C2S_CreateRoomRequest> _parser = new pb::MessageParser<C2S_CreateRoomRequest>(() => new C2S_CreateRoomRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_CreateRoomRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[56]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_CreateRoomRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_CreateRoomRequest(C2S_CreateRoomRequest other) : this() {
    sessionId_ = other.sessionId_;
    roomName_ = other.roomName_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_CreateRoomRequest Clone() {
    return new C2S_CreateRoomRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "roomName" field.</summary>
  public const int RoomNameFieldNumber = 2;
  private string roomName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RoomName {
    get { return roomName_; }
    set {
      roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_CreateRoomRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_CreateRoomRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (RoomName != other.RoomName) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (RoomName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(RoomName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (RoomName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_CreateRoomRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.RoomName.Length != 0) {
      RoomName = other.RoomName;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 18: {
          RoomName = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_CreateRoomResponse : pb::IMessage<S2C_CreateRoomResponse> {
  private static readonly pb::MessageParser<S2C_CreateRoomResponse> _parser = new pb::MessageParser<S2C_CreateRoomResponse>(() => new S2C_CreateRoomResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_CreateRoomResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[57]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_CreateRoomResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_CreateRoomResponse(S2C_CreateRoomResponse other) : this() {
    success_ = other.success_;
    room_ = other.room_ != null ? other.room_.Clone() : null;
    failCode_ = other.failCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_CreateRoomResponse Clone() {
    return new S2C_CreateRoomResponse(this);
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 1;
  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  /// <summary>Field number for the "room" field.</summary>
  public const int RoomFieldNumber = 2;
  private global::RoomData room_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RoomData Room {
    get { return room_; }
    set {
      room_ = value;
    }
  }

  /// <summary>Field number for the "failCode" field.</summary>
  public const int FailCodeFieldNumber = 3;
  private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GlobalFailCode FailCode {
    get { return failCode_; }
    set {
      failCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_CreateRoomResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_CreateRoomResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Success != other.Success) return false;
    if (!object.Equals(Room, other.Room)) return false;
    if (FailCode != other.FailCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Success != false) hash ^= Success.GetHashCode();
    if (room_ != null) hash ^= Room.GetHashCode();
    if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Success != false) {
      output.WriteRawTag(8);
      output.WriteBool(Success);
    }
    if (room_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Room);
    }
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      output.WriteRawTag(24);
      output.WriteEnum((int) FailCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Success != false) {
      size += 1 + 1;
    }
    if (room_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
    }
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FailCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_CreateRoomResponse other) {
    if (other == null) {
      return;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    if (other.room_ != null) {
      if (room_ == null) {
        Room = new global::RoomData();
      }
      Room.MergeFrom(other.Room);
    }
    if (other.FailCode != global::GlobalFailCode.NoneFailcode) {
      FailCode = other.FailCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Success = input.ReadBool();
          break;
        }
        case 18: {
          if (room_ == null) {
            Room = new global::RoomData();
          }
          input.ReadMessage(Room);
          break;
        }
        case 24: {
          FailCode = (global::GlobalFailCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class C2S_JoinRoomRequest : pb::IMessage<C2S_JoinRoomRequest> {
  private static readonly pb::MessageParser<C2S_JoinRoomRequest> _parser = new pb::MessageParser<C2S_JoinRoomRequest>(() => new C2S_JoinRoomRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_JoinRoomRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[58]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_JoinRoomRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_JoinRoomRequest(C2S_JoinRoomRequest other) : this() {
    sessionId_ = other.sessionId_;
    roomId_ = other.roomId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_JoinRoomRequest Clone() {
    return new C2S_JoinRoomRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "roomId" field.</summary>
  public const int RoomIdFieldNumber = 2;
  private string roomId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RoomId {
    get { return roomId_; }
    set {
      roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_JoinRoomRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_JoinRoomRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (RoomId != other.RoomId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (RoomId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(RoomId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (RoomId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_JoinRoomRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.RoomId.Length != 0) {
      RoomId = other.RoomId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 18: {
          RoomId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_JoinRoomResponse : pb::IMessage<S2C_JoinRoomResponse> {
  private static readonly pb::MessageParser<S2C_JoinRoomResponse> _parser = new pb::MessageParser<S2C_JoinRoomResponse>(() => new S2C_JoinRoomResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_JoinRoomResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[59]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_JoinRoomResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_JoinRoomResponse(S2C_JoinRoomResponse other) : this() {
    success_ = other.success_;
    room_ = other.room_ != null ? other.room_.Clone() : null;
    failCode_ = other.failCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_JoinRoomResponse Clone() {
    return new S2C_JoinRoomResponse(this);
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 1;
  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  /// <summary>Field number for the "room" field.</summary>
  public const int RoomFieldNumber = 2;
  private global::RoomData room_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RoomData Room {
    get { return room_; }
    set {
      room_ = value;
    }
  }

  /// <summary>Field number for the "failCode" field.</summary>
  public const int FailCodeFieldNumber = 3;
  private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GlobalFailCode FailCode {
    get { return failCode_; }
    set {
      failCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_JoinRoomResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_JoinRoomResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Success != other.Success) return false;
    if (!object.Equals(Room, other.Room)) return false;
    if (FailCode != other.FailCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Success != false) hash ^= Success.GetHashCode();
    if (room_ != null) hash ^= Room.GetHashCode();
    if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Success != false) {
      output.WriteRawTag(8);
      output.WriteBool(Success);
    }
    if (room_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Room);
    }
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      output.WriteRawTag(24);
      output.WriteEnum((int) FailCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Success != false) {
      size += 1 + 1;
    }
    if (room_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
    }
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FailCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_JoinRoomResponse other) {
    if (other == null) {
      return;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    if (other.room_ != null) {
      if (room_ == null) {
        Room = new global::RoomData();
      }
      Room.MergeFrom(other.Room);
    }
    if (other.FailCode != global::GlobalFailCode.NoneFailcode) {
      FailCode = other.FailCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Success = input.ReadBool();
          break;
        }
        case 18: {
          if (room_ == null) {
            Room = new global::RoomData();
          }
          input.ReadMessage(Room);
          break;
        }
        case 24: {
          FailCode = (global::GlobalFailCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_JoinRoomNotification : pb::IMessage<S2C_JoinRoomNotification> {
  private static readonly pb::MessageParser<S2C_JoinRoomNotification> _parser = new pb::MessageParser<S2C_JoinRoomNotification>(() => new S2C_JoinRoomNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_JoinRoomNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[60]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_JoinRoomNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_JoinRoomNotification(S2C_JoinRoomNotification other) : this() {
    room_ = other.room_ != null ? other.room_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_JoinRoomNotification Clone() {
    return new S2C_JoinRoomNotification(this);
  }

  /// <summary>Field number for the "room" field.</summary>
  public const int RoomFieldNumber = 1;
  private global::RoomData room_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RoomData Room {
    get { return room_; }
    set {
      room_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_JoinRoomNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_JoinRoomNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Room, other.Room)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (room_ != null) hash ^= Room.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (room_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Room);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (room_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_JoinRoomNotification other) {
    if (other == null) {
      return;
    }
    if (other.room_ != null) {
      if (room_ == null) {
        Room = new global::RoomData();
      }
      Room.MergeFrom(other.Room);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (room_ == null) {
            Room = new global::RoomData();
          }
          input.ReadMessage(Room);
          break;
        }
      }
    }
  }

}

public sealed partial class C2S_LeaveRoomRequest : pb::IMessage<C2S_LeaveRoomRequest> {
  private static readonly pb::MessageParser<C2S_LeaveRoomRequest> _parser = new pb::MessageParser<C2S_LeaveRoomRequest>(() => new C2S_LeaveRoomRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_LeaveRoomRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[61]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_LeaveRoomRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_LeaveRoomRequest(C2S_LeaveRoomRequest other) : this() {
    sessionId_ = other.sessionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_LeaveRoomRequest Clone() {
    return new C2S_LeaveRoomRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_LeaveRoomRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_LeaveRoomRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_LeaveRoomRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_LeaveRoomResponse : pb::IMessage<S2C_LeaveRoomResponse> {
  private static readonly pb::MessageParser<S2C_LeaveRoomResponse> _parser = new pb::MessageParser<S2C_LeaveRoomResponse>(() => new S2C_LeaveRoomResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_LeaveRoomResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[62]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_LeaveRoomResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_LeaveRoomResponse(S2C_LeaveRoomResponse other) : this() {
    success_ = other.success_;
    failCode_ = other.failCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_LeaveRoomResponse Clone() {
    return new S2C_LeaveRoomResponse(this);
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 1;
  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  /// <summary>Field number for the "failCode" field.</summary>
  public const int FailCodeFieldNumber = 2;
  private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GlobalFailCode FailCode {
    get { return failCode_; }
    set {
      failCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_LeaveRoomResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_LeaveRoomResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Success != other.Success) return false;
    if (FailCode != other.FailCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Success != false) hash ^= Success.GetHashCode();
    if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Success != false) {
      output.WriteRawTag(8);
      output.WriteBool(Success);
    }
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) FailCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Success != false) {
      size += 1 + 1;
    }
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FailCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_LeaveRoomResponse other) {
    if (other == null) {
      return;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    if (other.FailCode != global::GlobalFailCode.NoneFailcode) {
      FailCode = other.FailCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Success = input.ReadBool();
          break;
        }
        case 16: {
          FailCode = (global::GlobalFailCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_LeaveRoomNotification : pb::IMessage<S2C_LeaveRoomNotification> {
  private static readonly pb::MessageParser<S2C_LeaveRoomNotification> _parser = new pb::MessageParser<S2C_LeaveRoomNotification>(() => new S2C_LeaveRoomNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_LeaveRoomNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[63]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_LeaveRoomNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_LeaveRoomNotification(S2C_LeaveRoomNotification other) : this() {
    room_ = other.room_ != null ? other.room_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_LeaveRoomNotification Clone() {
    return new S2C_LeaveRoomNotification(this);
  }

  /// <summary>Field number for the "room" field.</summary>
  public const int RoomFieldNumber = 1;
  private global::RoomData room_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RoomData Room {
    get { return room_; }
    set {
      room_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_LeaveRoomNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_LeaveRoomNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Room, other.Room)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (room_ != null) hash ^= Room.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (room_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Room);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (room_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_LeaveRoomNotification other) {
    if (other == null) {
      return;
    }
    if (other.room_ != null) {
      if (room_ == null) {
        Room = new global::RoomData();
      }
      Room.MergeFrom(other.Room);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (room_ == null) {
            Room = new global::RoomData();
          }
          input.ReadMessage(Room);
          break;
        }
      }
    }
  }

}

public sealed partial class C2S_GamePrepareRequest : pb::IMessage<C2S_GamePrepareRequest> {
  private static readonly pb::MessageParser<C2S_GamePrepareRequest> _parser = new pb::MessageParser<C2S_GamePrepareRequest>(() => new C2S_GamePrepareRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_GamePrepareRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[64]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_GamePrepareRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_GamePrepareRequest(C2S_GamePrepareRequest other) : this() {
    sessionId_ = other.sessionId_;
    isReady_ = other.isReady_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_GamePrepareRequest Clone() {
    return new C2S_GamePrepareRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "isReady" field.</summary>
  public const int IsReadyFieldNumber = 2;
  private bool isReady_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsReady {
    get { return isReady_; }
    set {
      isReady_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_GamePrepareRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_GamePrepareRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (IsReady != other.IsReady) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (IsReady != false) hash ^= IsReady.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (IsReady != false) {
      output.WriteRawTag(16);
      output.WriteBool(IsReady);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (IsReady != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_GamePrepareRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.IsReady != false) {
      IsReady = other.IsReady;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 16: {
          IsReady = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_GamePrepareResponse : pb::IMessage<S2C_GamePrepareResponse> {
  private static readonly pb::MessageParser<S2C_GamePrepareResponse> _parser = new pb::MessageParser<S2C_GamePrepareResponse>(() => new S2C_GamePrepareResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_GamePrepareResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[65]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_GamePrepareResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_GamePrepareResponse(S2C_GamePrepareResponse other) : this() {
    success_ = other.success_;
    isReady_ = other.isReady_;
    failCode_ = other.failCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_GamePrepareResponse Clone() {
    return new S2C_GamePrepareResponse(this);
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 1;
  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  /// <summary>Field number for the "isReady" field.</summary>
  public const int IsReadyFieldNumber = 2;
  private bool isReady_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsReady {
    get { return isReady_; }
    set {
      isReady_ = value;
    }
  }

  /// <summary>Field number for the "failCode" field.</summary>
  public const int FailCodeFieldNumber = 3;
  private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GlobalFailCode FailCode {
    get { return failCode_; }
    set {
      failCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_GamePrepareResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_GamePrepareResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Success != other.Success) return false;
    if (IsReady != other.IsReady) return false;
    if (FailCode != other.FailCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Success != false) hash ^= Success.GetHashCode();
    if (IsReady != false) hash ^= IsReady.GetHashCode();
    if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Success != false) {
      output.WriteRawTag(8);
      output.WriteBool(Success);
    }
    if (IsReady != false) {
      output.WriteRawTag(16);
      output.WriteBool(IsReady);
    }
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      output.WriteRawTag(24);
      output.WriteEnum((int) FailCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Success != false) {
      size += 1 + 1;
    }
    if (IsReady != false) {
      size += 1 + 1;
    }
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FailCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_GamePrepareResponse other) {
    if (other == null) {
      return;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    if (other.IsReady != false) {
      IsReady = other.IsReady;
    }
    if (other.FailCode != global::GlobalFailCode.NoneFailcode) {
      FailCode = other.FailCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Success = input.ReadBool();
          break;
        }
        case 16: {
          IsReady = input.ReadBool();
          break;
        }
        case 24: {
          FailCode = (global::GlobalFailCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_GamePrepareNotification : pb::IMessage<S2C_GamePrepareNotification> {
  private static readonly pb::MessageParser<S2C_GamePrepareNotification> _parser = new pb::MessageParser<S2C_GamePrepareNotification>(() => new S2C_GamePrepareNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_GamePrepareNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[66]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_GamePrepareNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_GamePrepareNotification(S2C_GamePrepareNotification other) : this() {
    user_ = other.user_ != null ? other.user_.Clone() : null;
    isReady_ = other.isReady_;
    state_ = other.state_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_GamePrepareNotification Clone() {
    return new S2C_GamePrepareNotification(this);
  }

  /// <summary>Field number for the "user" field.</summary>
  public const int UserFieldNumber = 1;
  private global::UserData user_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::UserData User {
    get { return user_; }
    set {
      user_ = value;
    }
  }

  /// <summary>Field number for the "isReady" field.</summary>
  public const int IsReadyFieldNumber = 2;
  private bool isReady_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsReady {
    get { return isReady_; }
    set {
      isReady_ = value;
    }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 3;
  private global::RoomStateType state_ = global::RoomStateType.Wait;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RoomStateType State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_GamePrepareNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_GamePrepareNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(User, other.User)) return false;
    if (IsReady != other.IsReady) return false;
    if (State != other.State) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (user_ != null) hash ^= User.GetHashCode();
    if (IsReady != false) hash ^= IsReady.GetHashCode();
    if (State != global::RoomStateType.Wait) hash ^= State.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (user_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(User);
    }
    if (IsReady != false) {
      output.WriteRawTag(16);
      output.WriteBool(IsReady);
    }
    if (State != global::RoomStateType.Wait) {
      output.WriteRawTag(24);
      output.WriteEnum((int) State);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (user_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
    }
    if (IsReady != false) {
      size += 1 + 1;
    }
    if (State != global::RoomStateType.Wait) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_GamePrepareNotification other) {
    if (other == null) {
      return;
    }
    if (other.user_ != null) {
      if (user_ == null) {
        User = new global::UserData();
      }
      User.MergeFrom(other.User);
    }
    if (other.IsReady != false) {
      IsReady = other.IsReady;
    }
    if (other.State != global::RoomStateType.Wait) {
      State = other.State;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (user_ == null) {
            User = new global::UserData();
          }
          input.ReadMessage(User);
          break;
        }
        case 16: {
          IsReady = input.ReadBool();
          break;
        }
        case 24: {
          State = (global::RoomStateType) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
///ICE
/// </summary>
public sealed partial class S2C_IceMiniGameReadyNotification : pb::IMessage<S2C_IceMiniGameReadyNotification> {
  private static readonly pb::MessageParser<S2C_IceMiniGameReadyNotification> _parser = new pb::MessageParser<S2C_IceMiniGameReadyNotification>(() => new S2C_IceMiniGameReadyNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_IceMiniGameReadyNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[67]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_IceMiniGameReadyNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_IceMiniGameReadyNotification(S2C_IceMiniGameReadyNotification other) : this() {
    players_ = other.players_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_IceMiniGameReadyNotification Clone() {
    return new S2C_IceMiniGameReadyNotification(this);
  }

  /// <summary>Field number for the "players" field.</summary>
  public const int PlayersFieldNumber = 1;
  private static readonly pb::FieldCodec<global::S2C_IceMiniGameReadyNotification.Types.startPlayers> _repeated_players_codec
      = pb::FieldCodec.ForMessage(10, global::S2C_IceMiniGameReadyNotification.Types.startPlayers.Parser);
  private readonly pbc::RepeatedField<global::S2C_IceMiniGameReadyNotification.Types.startPlayers> players_ = new pbc::RepeatedField<global::S2C_IceMiniGameReadyNotification.Types.startPlayers>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::S2C_IceMiniGameReadyNotification.Types.startPlayers> Players {
    get { return players_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_IceMiniGameReadyNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_IceMiniGameReadyNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!players_.Equals(other.players_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= players_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    players_.WriteTo(output, _repeated_players_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += players_.CalculateSize(_repeated_players_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_IceMiniGameReadyNotification other) {
    if (other == null) {
      return;
    }
    players_.Add(other.players_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          players_.AddEntriesFrom(input, _repeated_players_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the S2C_IceMiniGameReadyNotification message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class startPlayers : pb::IMessage<startPlayers> {
      private static readonly pb::MessageParser<startPlayers> _parser = new pb::MessageParser<startPlayers>(() => new startPlayers());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<startPlayers> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::S2C_IceMiniGameReadyNotification.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public startPlayers() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public startPlayers(startPlayers other) : this() {
        sessionId_ = other.sessionId_;
        position_ = other.position_ != null ? other.position_.Clone() : null;
        rotation_ = other.rotation_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public startPlayers Clone() {
        return new startPlayers(this);
      }

      /// <summary>Field number for the "sessionId" field.</summary>
      public const int SessionIdFieldNumber = 1;
      private string sessionId_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string SessionId {
        get { return sessionId_; }
        set {
          sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "position" field.</summary>
      public const int PositionFieldNumber = 2;
      private global::Vector position_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::Vector Position {
        get { return position_; }
        set {
          position_ = value;
        }
      }

      /// <summary>Field number for the "rotation" field.</summary>
      public const int RotationFieldNumber = 3;
      private float rotation_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public float Rotation {
        get { return rotation_; }
        set {
          rotation_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as startPlayers);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(startPlayers other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (SessionId != other.SessionId) return false;
        if (!object.Equals(Position, other.Position)) return false;
        if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rotation, other.Rotation)) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
        if (position_ != null) hash ^= Position.GetHashCode();
        if (Rotation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rotation);
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (SessionId.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(SessionId);
        }
        if (position_ != null) {
          output.WriteRawTag(18);
          output.WriteMessage(Position);
        }
        if (Rotation != 0F) {
          output.WriteRawTag(29);
          output.WriteFloat(Rotation);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (SessionId.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
        }
        if (position_ != null) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
        }
        if (Rotation != 0F) {
          size += 1 + 4;
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(startPlayers other) {
        if (other == null) {
          return;
        }
        if (other.SessionId.Length != 0) {
          SessionId = other.SessionId;
        }
        if (other.position_ != null) {
          if (position_ == null) {
            Position = new global::Vector();
          }
          Position.MergeFrom(other.Position);
        }
        if (other.Rotation != 0F) {
          Rotation = other.Rotation;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              SessionId = input.ReadString();
              break;
            }
            case 18: {
              if (position_ == null) {
                Position = new global::Vector();
              }
              input.ReadMessage(Position);
              break;
            }
            case 29: {
              Rotation = input.ReadFloat();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

public sealed partial class C2S_IceGameReadyRequest : pb::IMessage<C2S_IceGameReadyRequest> {
  private static readonly pb::MessageParser<C2S_IceGameReadyRequest> _parser = new pb::MessageParser<C2S_IceGameReadyRequest>(() => new C2S_IceGameReadyRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_IceGameReadyRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[68]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_IceGameReadyRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_IceGameReadyRequest(C2S_IceGameReadyRequest other) : this() {
    sessionId_ = other.sessionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_IceGameReadyRequest Clone() {
    return new C2S_IceGameReadyRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_IceGameReadyRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_IceGameReadyRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_IceGameReadyRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_IceGameReadyNotification : pb::IMessage<S2C_IceGameReadyNotification> {
  private static readonly pb::MessageParser<S2C_IceGameReadyNotification> _parser = new pb::MessageParser<S2C_IceGameReadyNotification>(() => new S2C_IceGameReadyNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_IceGameReadyNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[69]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_IceGameReadyNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_IceGameReadyNotification(S2C_IceGameReadyNotification other) : this() {
    sessionId_ = other.sessionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_IceGameReadyNotification Clone() {
    return new S2C_IceGameReadyNotification(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_IceGameReadyNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_IceGameReadyNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_IceGameReadyNotification other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_IceMiniGameStartNotification : pb::IMessage<S2C_IceMiniGameStartNotification> {
  private static readonly pb::MessageParser<S2C_IceMiniGameStartNotification> _parser = new pb::MessageParser<S2C_IceMiniGameStartNotification>(() => new S2C_IceMiniGameStartNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_IceMiniGameStartNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[70]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_IceMiniGameStartNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_IceMiniGameStartNotification(S2C_IceMiniGameStartNotification other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_IceMiniGameStartNotification Clone() {
    return new S2C_IceMiniGameStartNotification(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_IceMiniGameStartNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_IceMiniGameStartNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_IceMiniGameStartNotification other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class C2S_IcePlayerSyncRequest : pb::IMessage<C2S_IcePlayerSyncRequest> {
  private static readonly pb::MessageParser<C2S_IcePlayerSyncRequest> _parser = new pb::MessageParser<C2S_IcePlayerSyncRequest>(() => new C2S_IcePlayerSyncRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_IcePlayerSyncRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[71]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_IcePlayerSyncRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_IcePlayerSyncRequest(C2S_IcePlayerSyncRequest other) : this() {
    sessionId_ = other.sessionId_;
    position_ = other.position_ != null ? other.position_.Clone() : null;
    rotation_ = other.rotation_;
    state_ = other.state_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_IcePlayerSyncRequest Clone() {
    return new C2S_IcePlayerSyncRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 2;
  private global::Vector position_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  /// <summary>Field number for the "rotation" field.</summary>
  public const int RotationFieldNumber = 3;
  private float rotation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Rotation {
    get { return rotation_; }
    set {
      rotation_ = value;
    }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 4;
  private global::State state_ = global::State.Idle;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::State State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_IcePlayerSyncRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_IcePlayerSyncRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (!object.Equals(Position, other.Position)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rotation, other.Rotation)) return false;
    if (State != other.State) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (position_ != null) hash ^= Position.GetHashCode();
    if (Rotation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rotation);
    if (State != global::State.Idle) hash ^= State.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (position_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Position);
    }
    if (Rotation != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Rotation);
    }
    if (State != global::State.Idle) {
      output.WriteRawTag(32);
      output.WriteEnum((int) State);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (position_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
    }
    if (Rotation != 0F) {
      size += 1 + 4;
    }
    if (State != global::State.Idle) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_IcePlayerSyncRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.position_ != null) {
      if (position_ == null) {
        Position = new global::Vector();
      }
      Position.MergeFrom(other.Position);
    }
    if (other.Rotation != 0F) {
      Rotation = other.Rotation;
    }
    if (other.State != global::State.Idle) {
      State = other.State;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 18: {
          if (position_ == null) {
            Position = new global::Vector();
          }
          input.ReadMessage(Position);
          break;
        }
        case 29: {
          Rotation = input.ReadFloat();
          break;
        }
        case 32: {
          State = (global::State) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_IcePlayerSyncNotification : pb::IMessage<S2C_IcePlayerSyncNotification> {
  private static readonly pb::MessageParser<S2C_IcePlayerSyncNotification> _parser = new pb::MessageParser<S2C_IcePlayerSyncNotification>(() => new S2C_IcePlayerSyncNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_IcePlayerSyncNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[72]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_IcePlayerSyncNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_IcePlayerSyncNotification(S2C_IcePlayerSyncNotification other) : this() {
    sessionId_ = other.sessionId_;
    position_ = other.position_ != null ? other.position_.Clone() : null;
    rotation_ = other.rotation_;
    state_ = other.state_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_IcePlayerSyncNotification Clone() {
    return new S2C_IcePlayerSyncNotification(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 2;
  private global::Vector position_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  /// <summary>Field number for the "rotation" field.</summary>
  public const int RotationFieldNumber = 3;
  private float rotation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Rotation {
    get { return rotation_; }
    set {
      rotation_ = value;
    }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 4;
  private global::State state_ = global::State.Idle;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::State State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_IcePlayerSyncNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_IcePlayerSyncNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (!object.Equals(Position, other.Position)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rotation, other.Rotation)) return false;
    if (State != other.State) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (position_ != null) hash ^= Position.GetHashCode();
    if (Rotation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rotation);
    if (State != global::State.Idle) hash ^= State.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (position_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Position);
    }
    if (Rotation != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Rotation);
    }
    if (State != global::State.Idle) {
      output.WriteRawTag(32);
      output.WriteEnum((int) State);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (position_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
    }
    if (Rotation != 0F) {
      size += 1 + 4;
    }
    if (State != global::State.Idle) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_IcePlayerSyncNotification other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.position_ != null) {
      if (position_ == null) {
        Position = new global::Vector();
      }
      Position.MergeFrom(other.Position);
    }
    if (other.Rotation != 0F) {
      Rotation = other.Rotation;
    }
    if (other.State != global::State.Idle) {
      State = other.State;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 18: {
          if (position_ == null) {
            Position = new global::Vector();
          }
          input.ReadMessage(Position);
          break;
        }
        case 29: {
          Rotation = input.ReadFloat();
          break;
        }
        case 32: {
          State = (global::State) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class C2S_IcePlayerDamageRequest : pb::IMessage<C2S_IcePlayerDamageRequest> {
  private static readonly pb::MessageParser<C2S_IcePlayerDamageRequest> _parser = new pb::MessageParser<C2S_IcePlayerDamageRequest>(() => new C2S_IcePlayerDamageRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_IcePlayerDamageRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[73]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_IcePlayerDamageRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_IcePlayerDamageRequest(C2S_IcePlayerDamageRequest other) : this() {
    sessionId_ = other.sessionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_IcePlayerDamageRequest Clone() {
    return new C2S_IcePlayerDamageRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_IcePlayerDamageRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_IcePlayerDamageRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_IcePlayerDamageRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_IcePlayerDamageNotification : pb::IMessage<S2C_IcePlayerDamageNotification> {
  private static readonly pb::MessageParser<S2C_IcePlayerDamageNotification> _parser = new pb::MessageParser<S2C_IcePlayerDamageNotification>(() => new S2C_IcePlayerDamageNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_IcePlayerDamageNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[74]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_IcePlayerDamageNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_IcePlayerDamageNotification(S2C_IcePlayerDamageNotification other) : this() {
    sessionId_ = other.sessionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_IcePlayerDamageNotification Clone() {
    return new S2C_IcePlayerDamageNotification(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_IcePlayerDamageNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_IcePlayerDamageNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_IcePlayerDamageNotification other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_IcePlayerDeathNotification : pb::IMessage<S2C_IcePlayerDeathNotification> {
  private static readonly pb::MessageParser<S2C_IcePlayerDeathNotification> _parser = new pb::MessageParser<S2C_IcePlayerDeathNotification>(() => new S2C_IcePlayerDeathNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_IcePlayerDeathNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[75]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_IcePlayerDeathNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_IcePlayerDeathNotification(S2C_IcePlayerDeathNotification other) : this() {
    sessionId_ = other.sessionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_IcePlayerDeathNotification Clone() {
    return new S2C_IcePlayerDeathNotification(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_IcePlayerDeathNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_IcePlayerDeathNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_IcePlayerDeathNotification other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_IceMapSyncNotification : pb::IMessage<S2C_IceMapSyncNotification> {
  private static readonly pb::MessageParser<S2C_IceMapSyncNotification> _parser = new pb::MessageParser<S2C_IceMapSyncNotification>(() => new S2C_IceMapSyncNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_IceMapSyncNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[76]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_IceMapSyncNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_IceMapSyncNotification(S2C_IceMapSyncNotification other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_IceMapSyncNotification Clone() {
    return new S2C_IceMapSyncNotification(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_IceMapSyncNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_IceMapSyncNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_IceMapSyncNotification other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class S2C_IceGameOverNotification : pb::IMessage<S2C_IceGameOverNotification> {
  private static readonly pb::MessageParser<S2C_IceGameOverNotification> _parser = new pb::MessageParser<S2C_IceGameOverNotification>(() => new S2C_IceGameOverNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_IceGameOverNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[77]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_IceGameOverNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_IceGameOverNotification(S2C_IceGameOverNotification other) : this() {
    ranks_ = other.ranks_.Clone();
    endTime_ = other.endTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_IceGameOverNotification Clone() {
    return new S2C_IceGameOverNotification(this);
  }

  /// <summary>Field number for the "ranks" field.</summary>
  public const int RanksFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Rank> _repeated_ranks_codec
      = pb::FieldCodec.ForMessage(10, global::Rank.Parser);
  private readonly pbc::RepeatedField<global::Rank> ranks_ = new pbc::RepeatedField<global::Rank>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Rank> Ranks {
    get { return ranks_; }
  }

  /// <summary>Field number for the "endTime" field.</summary>
  public const int EndTimeFieldNumber = 2;
  private long endTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long EndTime {
    get { return endTime_; }
    set {
      endTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_IceGameOverNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_IceGameOverNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!ranks_.Equals(other.ranks_)) return false;
    if (EndTime != other.EndTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ranks_.GetHashCode();
    if (EndTime != 0L) hash ^= EndTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    ranks_.WriteTo(output, _repeated_ranks_codec);
    if (EndTime != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(EndTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += ranks_.CalculateSize(_repeated_ranks_codec);
    if (EndTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_IceGameOverNotification other) {
    if (other == null) {
      return;
    }
    ranks_.Add(other.ranks_);
    if (other.EndTime != 0L) {
      EndTime = other.EndTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ranks_.AddEntriesFrom(input, _repeated_ranks_codec);
          break;
        }
        case 16: {
          EndTime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_IcePlayerExitNotification : pb::IMessage<S2C_IcePlayerExitNotification> {
  private static readonly pb::MessageParser<S2C_IcePlayerExitNotification> _parser = new pb::MessageParser<S2C_IcePlayerExitNotification>(() => new S2C_IcePlayerExitNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_IcePlayerExitNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[78]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_IcePlayerExitNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_IcePlayerExitNotification(S2C_IcePlayerExitNotification other) : this() {
    sessionId_ = other.sessionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_IcePlayerExitNotification Clone() {
    return new S2C_IcePlayerExitNotification(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_IcePlayerExitNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_IcePlayerExitNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_IcePlayerExitNotification other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///DROPPER
/// </summary>
public sealed partial class S2C_DropMiniGameReadyNotification : pb::IMessage<S2C_DropMiniGameReadyNotification> {
  private static readonly pb::MessageParser<S2C_DropMiniGameReadyNotification> _parser = new pb::MessageParser<S2C_DropMiniGameReadyNotification>(() => new S2C_DropMiniGameReadyNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_DropMiniGameReadyNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[79]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DropMiniGameReadyNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DropMiniGameReadyNotification(S2C_DropMiniGameReadyNotification other) : this() {
    players_ = other.players_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DropMiniGameReadyNotification Clone() {
    return new S2C_DropMiniGameReadyNotification(this);
  }

  /// <summary>Field number for the "players" field.</summary>
  public const int PlayersFieldNumber = 1;
  private static readonly pb::FieldCodec<global::S2C_DropMiniGameReadyNotification.Types.startPlayers> _repeated_players_codec
      = pb::FieldCodec.ForMessage(10, global::S2C_DropMiniGameReadyNotification.Types.startPlayers.Parser);
  private readonly pbc::RepeatedField<global::S2C_DropMiniGameReadyNotification.Types.startPlayers> players_ = new pbc::RepeatedField<global::S2C_DropMiniGameReadyNotification.Types.startPlayers>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::S2C_DropMiniGameReadyNotification.Types.startPlayers> Players {
    get { return players_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_DropMiniGameReadyNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_DropMiniGameReadyNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!players_.Equals(other.players_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= players_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    players_.WriteTo(output, _repeated_players_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += players_.CalculateSize(_repeated_players_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_DropMiniGameReadyNotification other) {
    if (other == null) {
      return;
    }
    players_.Add(other.players_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          players_.AddEntriesFrom(input, _repeated_players_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the S2C_DropMiniGameReadyNotification message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class startPlayers : pb::IMessage<startPlayers> {
      private static readonly pb::MessageParser<startPlayers> _parser = new pb::MessageParser<startPlayers>(() => new startPlayers());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<startPlayers> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::S2C_DropMiniGameReadyNotification.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public startPlayers() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public startPlayers(startPlayers other) : this() {
        sessionId_ = other.sessionId_;
        slot_ = other.slot_;
        rotation_ = other.rotation_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public startPlayers Clone() {
        return new startPlayers(this);
      }

      /// <summary>Field number for the "sessionId" field.</summary>
      public const int SessionIdFieldNumber = 1;
      private string sessionId_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string SessionId {
        get { return sessionId_; }
        set {
          sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "slot" field.</summary>
      public const int SlotFieldNumber = 2;
      private int slot_;
      /// <summary>
      ///0, 2, 6, 8
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int Slot {
        get { return slot_; }
        set {
          slot_ = value;
        }
      }

      /// <summary>Field number for the "rotation" field.</summary>
      public const int RotationFieldNumber = 3;
      private float rotation_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public float Rotation {
        get { return rotation_; }
        set {
          rotation_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as startPlayers);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(startPlayers other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (SessionId != other.SessionId) return false;
        if (Slot != other.Slot) return false;
        if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rotation, other.Rotation)) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
        if (Slot != 0) hash ^= Slot.GetHashCode();
        if (Rotation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rotation);
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (SessionId.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(SessionId);
        }
        if (Slot != 0) {
          output.WriteRawTag(16);
          output.WriteInt32(Slot);
        }
        if (Rotation != 0F) {
          output.WriteRawTag(29);
          output.WriteFloat(Rotation);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (SessionId.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
        }
        if (Slot != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Slot);
        }
        if (Rotation != 0F) {
          size += 1 + 4;
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(startPlayers other) {
        if (other == null) {
          return;
        }
        if (other.SessionId.Length != 0) {
          SessionId = other.SessionId;
        }
        if (other.Slot != 0) {
          Slot = other.Slot;
        }
        if (other.Rotation != 0F) {
          Rotation = other.Rotation;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              SessionId = input.ReadString();
              break;
            }
            case 16: {
              Slot = input.ReadInt32();
              break;
            }
            case 29: {
              Rotation = input.ReadFloat();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

public sealed partial class C2S_DropGameReadyRequest : pb::IMessage<C2S_DropGameReadyRequest> {
  private static readonly pb::MessageParser<C2S_DropGameReadyRequest> _parser = new pb::MessageParser<C2S_DropGameReadyRequest>(() => new C2S_DropGameReadyRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_DropGameReadyRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[80]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_DropGameReadyRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_DropGameReadyRequest(C2S_DropGameReadyRequest other) : this() {
    sessionId_ = other.sessionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_DropGameReadyRequest Clone() {
    return new C2S_DropGameReadyRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_DropGameReadyRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_DropGameReadyRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_DropGameReadyRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_DropGameReadyNotification : pb::IMessage<S2C_DropGameReadyNotification> {
  private static readonly pb::MessageParser<S2C_DropGameReadyNotification> _parser = new pb::MessageParser<S2C_DropGameReadyNotification>(() => new S2C_DropGameReadyNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_DropGameReadyNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[81]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DropGameReadyNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DropGameReadyNotification(S2C_DropGameReadyNotification other) : this() {
    sessionId_ = other.sessionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DropGameReadyNotification Clone() {
    return new S2C_DropGameReadyNotification(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_DropGameReadyNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_DropGameReadyNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_DropGameReadyNotification other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_DropMiniGameStartNotification : pb::IMessage<S2C_DropMiniGameStartNotification> {
  private static readonly pb::MessageParser<S2C_DropMiniGameStartNotification> _parser = new pb::MessageParser<S2C_DropMiniGameStartNotification>(() => new S2C_DropMiniGameStartNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_DropMiniGameStartNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[82]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DropMiniGameStartNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DropMiniGameStartNotification(S2C_DropMiniGameStartNotification other) : this() {
    startTime_ = other.startTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DropMiniGameStartNotification Clone() {
    return new S2C_DropMiniGameStartNotification(this);
  }

  /// <summary>Field number for the "startTime" field.</summary>
  public const int StartTimeFieldNumber = 1;
  private long startTime_;
  /// <summary>
  ///NOW + 4
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long StartTime {
    get { return startTime_; }
    set {
      startTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_DropMiniGameStartNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_DropMiniGameStartNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (StartTime != other.StartTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (StartTime != 0L) hash ^= StartTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (StartTime != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(StartTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (StartTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_DropMiniGameStartNotification other) {
    if (other == null) {
      return;
    }
    if (other.StartTime != 0L) {
      StartTime = other.StartTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          StartTime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class C2S_DropPlayerSyncRequest : pb::IMessage<C2S_DropPlayerSyncRequest> {
  private static readonly pb::MessageParser<C2S_DropPlayerSyncRequest> _parser = new pb::MessageParser<C2S_DropPlayerSyncRequest>(() => new C2S_DropPlayerSyncRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_DropPlayerSyncRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[83]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_DropPlayerSyncRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_DropPlayerSyncRequest(C2S_DropPlayerSyncRequest other) : this() {
    sessionId_ = other.sessionId_;
    slot_ = other.slot_;
    rotation_ = other.rotation_;
    state_ = other.state_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_DropPlayerSyncRequest Clone() {
    return new C2S_DropPlayerSyncRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "slot" field.</summary>
  public const int SlotFieldNumber = 2;
  private int slot_;
  /// <summary>
  ///0~8 사이.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Slot {
    get { return slot_; }
    set {
      slot_ = value;
    }
  }

  /// <summary>Field number for the "rotation" field.</summary>
  public const int RotationFieldNumber = 3;
  private float rotation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Rotation {
    get { return rotation_; }
    set {
      rotation_ = value;
    }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 4;
  private global::State state_ = global::State.Idle;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::State State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_DropPlayerSyncRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_DropPlayerSyncRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (Slot != other.Slot) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rotation, other.Rotation)) return false;
    if (State != other.State) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (Slot != 0) hash ^= Slot.GetHashCode();
    if (Rotation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rotation);
    if (State != global::State.Idle) hash ^= State.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (Slot != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Slot);
    }
    if (Rotation != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Rotation);
    }
    if (State != global::State.Idle) {
      output.WriteRawTag(32);
      output.WriteEnum((int) State);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (Slot != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Slot);
    }
    if (Rotation != 0F) {
      size += 1 + 4;
    }
    if (State != global::State.Idle) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_DropPlayerSyncRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.Slot != 0) {
      Slot = other.Slot;
    }
    if (other.Rotation != 0F) {
      Rotation = other.Rotation;
    }
    if (other.State != global::State.Idle) {
      State = other.State;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 16: {
          Slot = input.ReadInt32();
          break;
        }
        case 29: {
          Rotation = input.ReadFloat();
          break;
        }
        case 32: {
          State = (global::State) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_DropPlayerSyncNotification : pb::IMessage<S2C_DropPlayerSyncNotification> {
  private static readonly pb::MessageParser<S2C_DropPlayerSyncNotification> _parser = new pb::MessageParser<S2C_DropPlayerSyncNotification>(() => new S2C_DropPlayerSyncNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_DropPlayerSyncNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[84]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DropPlayerSyncNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DropPlayerSyncNotification(S2C_DropPlayerSyncNotification other) : this() {
    sessionId_ = other.sessionId_;
    slot_ = other.slot_;
    rotation_ = other.rotation_;
    state_ = other.state_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DropPlayerSyncNotification Clone() {
    return new S2C_DropPlayerSyncNotification(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "slot" field.</summary>
  public const int SlotFieldNumber = 2;
  private int slot_;
  /// <summary>
  ///무효 == -1
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Slot {
    get { return slot_; }
    set {
      slot_ = value;
    }
  }

  /// <summary>Field number for the "rotation" field.</summary>
  public const int RotationFieldNumber = 3;
  private float rotation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Rotation {
    get { return rotation_; }
    set {
      rotation_ = value;
    }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 4;
  private global::State state_ = global::State.Idle;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::State State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_DropPlayerSyncNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_DropPlayerSyncNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (Slot != other.Slot) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rotation, other.Rotation)) return false;
    if (State != other.State) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (Slot != 0) hash ^= Slot.GetHashCode();
    if (Rotation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rotation);
    if (State != global::State.Idle) hash ^= State.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (Slot != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Slot);
    }
    if (Rotation != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Rotation);
    }
    if (State != global::State.Idle) {
      output.WriteRawTag(32);
      output.WriteEnum((int) State);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (Slot != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Slot);
    }
    if (Rotation != 0F) {
      size += 1 + 4;
    }
    if (State != global::State.Idle) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_DropPlayerSyncNotification other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.Slot != 0) {
      Slot = other.Slot;
    }
    if (other.Rotation != 0F) {
      Rotation = other.Rotation;
    }
    if (other.State != global::State.Idle) {
      State = other.State;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 16: {
          Slot = input.ReadInt32();
          break;
        }
        case 29: {
          Rotation = input.ReadFloat();
          break;
        }
        case 32: {
          State = (global::State) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_DropPlayerDeathNotification : pb::IMessage<S2C_DropPlayerDeathNotification> {
  private static readonly pb::MessageParser<S2C_DropPlayerDeathNotification> _parser = new pb::MessageParser<S2C_DropPlayerDeathNotification>(() => new S2C_DropPlayerDeathNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_DropPlayerDeathNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[85]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DropPlayerDeathNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DropPlayerDeathNotification(S2C_DropPlayerDeathNotification other) : this() {
    sessionId_ = other.sessionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DropPlayerDeathNotification Clone() {
    return new S2C_DropPlayerDeathNotification(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_DropPlayerDeathNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_DropPlayerDeathNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_DropPlayerDeathNotification other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_DropLevelStartNotification : pb::IMessage<S2C_DropLevelStartNotification> {
  private static readonly pb::MessageParser<S2C_DropLevelStartNotification> _parser = new pb::MessageParser<S2C_DropLevelStartNotification>(() => new S2C_DropLevelStartNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_DropLevelStartNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[86]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DropLevelStartNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DropLevelStartNotification(S2C_DropLevelStartNotification other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DropLevelStartNotification Clone() {
    return new S2C_DropLevelStartNotification(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_DropLevelStartNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_DropLevelStartNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_DropLevelStartNotification other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class S2C_DropLevelEndNotification : pb::IMessage<S2C_DropLevelEndNotification> {
  private static readonly pb::MessageParser<S2C_DropLevelEndNotification> _parser = new pb::MessageParser<S2C_DropLevelEndNotification>(() => new S2C_DropLevelEndNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_DropLevelEndNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[87]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DropLevelEndNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DropLevelEndNotification(S2C_DropLevelEndNotification other) : this() {
    holes_ = other.holes_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DropLevelEndNotification Clone() {
    return new S2C_DropLevelEndNotification(this);
  }

  /// <summary>Field number for the "holes" field.</summary>
  public const int HolesFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_holes_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> holes_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///0~8사이 N개의 수
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Holes {
    get { return holes_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_DropLevelEndNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_DropLevelEndNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!holes_.Equals(other.holes_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= holes_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    holes_.WriteTo(output, _repeated_holes_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += holes_.CalculateSize(_repeated_holes_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_DropLevelEndNotification other) {
    if (other == null) {
      return;
    }
    holes_.Add(other.holes_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          holes_.AddEntriesFrom(input, _repeated_holes_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_DropGameOverNotification : pb::IMessage<S2C_DropGameOverNotification> {
  private static readonly pb::MessageParser<S2C_DropGameOverNotification> _parser = new pb::MessageParser<S2C_DropGameOverNotification>(() => new S2C_DropGameOverNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_DropGameOverNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[88]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DropGameOverNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DropGameOverNotification(S2C_DropGameOverNotification other) : this() {
    ranks_ = other.ranks_.Clone();
    endTime_ = other.endTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DropGameOverNotification Clone() {
    return new S2C_DropGameOverNotification(this);
  }

  /// <summary>Field number for the "ranks" field.</summary>
  public const int RanksFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Rank> _repeated_ranks_codec
      = pb::FieldCodec.ForMessage(10, global::Rank.Parser);
  private readonly pbc::RepeatedField<global::Rank> ranks_ = new pbc::RepeatedField<global::Rank>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Rank> Ranks {
    get { return ranks_; }
  }

  /// <summary>Field number for the "endTime" field.</summary>
  public const int EndTimeFieldNumber = 2;
  private long endTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long EndTime {
    get { return endTime_; }
    set {
      endTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_DropGameOverNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_DropGameOverNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!ranks_.Equals(other.ranks_)) return false;
    if (EndTime != other.EndTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ranks_.GetHashCode();
    if (EndTime != 0L) hash ^= EndTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    ranks_.WriteTo(output, _repeated_ranks_codec);
    if (EndTime != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(EndTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += ranks_.CalculateSize(_repeated_ranks_codec);
    if (EndTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_DropGameOverNotification other) {
    if (other == null) {
      return;
    }
    ranks_.Add(other.ranks_);
    if (other.EndTime != 0L) {
      EndTime = other.EndTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ranks_.AddEntriesFrom(input, _repeated_ranks_codec);
          break;
        }
        case 16: {
          EndTime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
/// DANCE
/// </summary>
public sealed partial class S2C_DanceMiniGameReadyNotification : pb::IMessage<S2C_DanceMiniGameReadyNotification> {
  private static readonly pb::MessageParser<S2C_DanceMiniGameReadyNotification> _parser = new pb::MessageParser<S2C_DanceMiniGameReadyNotification>(() => new S2C_DanceMiniGameReadyNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_DanceMiniGameReadyNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[89]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DanceMiniGameReadyNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DanceMiniGameReadyNotification(S2C_DanceMiniGameReadyNotification other) : this() {
    players_ = other.players_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DanceMiniGameReadyNotification Clone() {
    return new S2C_DanceMiniGameReadyNotification(this);
  }

  /// <summary>Field number for the "players" field.</summary>
  public const int PlayersFieldNumber = 1;
  private static readonly pb::FieldCodec<global::PlayerInfo> _repeated_players_codec
      = pb::FieldCodec.ForMessage(10, global::PlayerInfo.Parser);
  private readonly pbc::RepeatedField<global::PlayerInfo> players_ = new pbc::RepeatedField<global::PlayerInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PlayerInfo> Players {
    get { return players_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_DanceMiniGameReadyNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_DanceMiniGameReadyNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!players_.Equals(other.players_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= players_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    players_.WriteTo(output, _repeated_players_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += players_.CalculateSize(_repeated_players_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_DanceMiniGameReadyNotification other) {
    if (other == null) {
      return;
    }
    players_.Add(other.players_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          players_.AddEntriesFrom(input, _repeated_players_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class C2S_DanceReadyRequest : pb::IMessage<C2S_DanceReadyRequest> {
  private static readonly pb::MessageParser<C2S_DanceReadyRequest> _parser = new pb::MessageParser<C2S_DanceReadyRequest>(() => new C2S_DanceReadyRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_DanceReadyRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[90]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_DanceReadyRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_DanceReadyRequest(C2S_DanceReadyRequest other) : this() {
    sessionId_ = other.sessionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_DanceReadyRequest Clone() {
    return new C2S_DanceReadyRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_DanceReadyRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_DanceReadyRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_DanceReadyRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_DanceReadyNotification : pb::IMessage<S2C_DanceReadyNotification> {
  private static readonly pb::MessageParser<S2C_DanceReadyNotification> _parser = new pb::MessageParser<S2C_DanceReadyNotification>(() => new S2C_DanceReadyNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_DanceReadyNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[91]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DanceReadyNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DanceReadyNotification(S2C_DanceReadyNotification other) : this() {
    sessionId_ = other.sessionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DanceReadyNotification Clone() {
    return new S2C_DanceReadyNotification(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_DanceReadyNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_DanceReadyNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_DanceReadyNotification other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_DanceStartNotification : pb::IMessage<S2C_DanceStartNotification> {
  private static readonly pb::MessageParser<S2C_DanceStartNotification> _parser = new pb::MessageParser<S2C_DanceStartNotification>(() => new S2C_DanceStartNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_DanceStartNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[92]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DanceStartNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DanceStartNotification(S2C_DanceStartNotification other) : this() {
    startTime_ = other.startTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DanceStartNotification Clone() {
    return new S2C_DanceStartNotification(this);
  }

  /// <summary>Field number for the "startTime" field.</summary>
  public const int StartTimeFieldNumber = 1;
  private long startTime_;
  /// <summary>
  ///NOW + 4
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long StartTime {
    get { return startTime_; }
    set {
      startTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_DanceStartNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_DanceStartNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (StartTime != other.StartTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (StartTime != 0L) hash ^= StartTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (StartTime != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(StartTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (StartTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_DanceStartNotification other) {
    if (other == null) {
      return;
    }
    if (other.StartTime != 0L) {
      StartTime = other.StartTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          StartTime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class C2S_DanceTableCreateRequest : pb::IMessage<C2S_DanceTableCreateRequest> {
  private static readonly pb::MessageParser<C2S_DanceTableCreateRequest> _parser = new pb::MessageParser<C2S_DanceTableCreateRequest>(() => new C2S_DanceTableCreateRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_DanceTableCreateRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[93]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_DanceTableCreateRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_DanceTableCreateRequest(C2S_DanceTableCreateRequest other) : this() {
    sessionId_ = other.sessionId_;
    dancePools_ = other.dancePools_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_DanceTableCreateRequest Clone() {
    return new C2S_DanceTableCreateRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  /// <summary>
  /// 방장 세션 ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "dancePools" field.</summary>
  public const int DancePoolsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::DancePool> _repeated_dancePools_codec
      = pb::FieldCodec.ForMessage(18, global::DancePool.Parser);
  private readonly pbc::RepeatedField<global::DancePool> dancePools_ = new pbc::RepeatedField<global::DancePool>();
  /// <summary>
  /// 생성된 춤표들
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DancePool> DancePools {
    get { return dancePools_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_DanceTableCreateRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_DanceTableCreateRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if(!dancePools_.Equals(other.dancePools_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    hash ^= dancePools_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    dancePools_.WriteTo(output, _repeated_dancePools_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    size += dancePools_.CalculateSize(_repeated_dancePools_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_DanceTableCreateRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    dancePools_.Add(other.dancePools_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 18: {
          dancePools_.AddEntriesFrom(input, _repeated_dancePools_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_DanceTableNotification : pb::IMessage<S2C_DanceTableNotification> {
  private static readonly pb::MessageParser<S2C_DanceTableNotification> _parser = new pb::MessageParser<S2C_DanceTableNotification>(() => new S2C_DanceTableNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_DanceTableNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[94]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DanceTableNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DanceTableNotification(S2C_DanceTableNotification other) : this() {
    dancePools_ = other.dancePools_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DanceTableNotification Clone() {
    return new S2C_DanceTableNotification(this);
  }

  /// <summary>Field number for the "dancePools" field.</summary>
  public const int DancePoolsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::DancePool> _repeated_dancePools_codec
      = pb::FieldCodec.ForMessage(10, global::DancePool.Parser);
  private readonly pbc::RepeatedField<global::DancePool> dancePools_ = new pbc::RepeatedField<global::DancePool>();
  /// <summary>
  /// 새로운 테이블
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DancePool> DancePools {
    get { return dancePools_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_DanceTableNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_DanceTableNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!dancePools_.Equals(other.dancePools_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= dancePools_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    dancePools_.WriteTo(output, _repeated_dancePools_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += dancePools_.CalculateSize(_repeated_dancePools_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_DanceTableNotification other) {
    if (other == null) {
      return;
    }
    dancePools_.Add(other.dancePools_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          dancePools_.AddEntriesFrom(input, _repeated_dancePools_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class C2S_DanceKeyPressRequest : pb::IMessage<C2S_DanceKeyPressRequest> {
  private static readonly pb::MessageParser<C2S_DanceKeyPressRequest> _parser = new pb::MessageParser<C2S_DanceKeyPressRequest>(() => new C2S_DanceKeyPressRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_DanceKeyPressRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[95]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_DanceKeyPressRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_DanceKeyPressRequest(C2S_DanceKeyPressRequest other) : this() {
    sessionId_ = other.sessionId_;
    pressKey_ = other.pressKey_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_DanceKeyPressRequest Clone() {
    return new C2S_DanceKeyPressRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "pressKey" field.</summary>
  public const int PressKeyFieldNumber = 2;
  private global::Direction pressKey_ = global::Direction.Up;
  /// <summary>
  /// 눌린 키
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Direction PressKey {
    get { return pressKey_; }
    set {
      pressKey_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_DanceKeyPressRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_DanceKeyPressRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (PressKey != other.PressKey) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (PressKey != global::Direction.Up) hash ^= PressKey.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (PressKey != global::Direction.Up) {
      output.WriteRawTag(16);
      output.WriteEnum((int) PressKey);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (PressKey != global::Direction.Up) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PressKey);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_DanceKeyPressRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.PressKey != global::Direction.Up) {
      PressKey = other.PressKey;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 16: {
          PressKey = (global::Direction) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_DanceKeyPressResponse : pb::IMessage<S2C_DanceKeyPressResponse> {
  private static readonly pb::MessageParser<S2C_DanceKeyPressResponse> _parser = new pb::MessageParser<S2C_DanceKeyPressResponse>(() => new S2C_DanceKeyPressResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_DanceKeyPressResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[96]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DanceKeyPressResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DanceKeyPressResponse(S2C_DanceKeyPressResponse other) : this() {
    success_ = other.success_;
    correct_ = other.correct_;
    state_ = other.state_;
    failCode_ = other.failCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DanceKeyPressResponse Clone() {
    return new S2C_DanceKeyPressResponse(this);
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 1;
  private bool success_;
  /// <summary>
  /// 요청 성공 여부
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  /// <summary>Field number for the "correct" field.</summary>
  public const int CorrectFieldNumber = 2;
  private bool correct_;
  /// <summary>
  /// 올바른 입력이었는지
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Correct {
    get { return correct_; }
    set {
      correct_ = value;
    }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 3;
  private global::State state_ = global::State.Idle;
  /// <summary>
  /// 애니메이션
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::State State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  /// <summary>Field number for the "failCode" field.</summary>
  public const int FailCodeFieldNumber = 4;
  private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GlobalFailCode FailCode {
    get { return failCode_; }
    set {
      failCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_DanceKeyPressResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_DanceKeyPressResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Success != other.Success) return false;
    if (Correct != other.Correct) return false;
    if (State != other.State) return false;
    if (FailCode != other.FailCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Success != false) hash ^= Success.GetHashCode();
    if (Correct != false) hash ^= Correct.GetHashCode();
    if (State != global::State.Idle) hash ^= State.GetHashCode();
    if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Success != false) {
      output.WriteRawTag(8);
      output.WriteBool(Success);
    }
    if (Correct != false) {
      output.WriteRawTag(16);
      output.WriteBool(Correct);
    }
    if (State != global::State.Idle) {
      output.WriteRawTag(24);
      output.WriteEnum((int) State);
    }
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      output.WriteRawTag(32);
      output.WriteEnum((int) FailCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Success != false) {
      size += 1 + 1;
    }
    if (Correct != false) {
      size += 1 + 1;
    }
    if (State != global::State.Idle) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
    }
    if (FailCode != global::GlobalFailCode.NoneFailcode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FailCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_DanceKeyPressResponse other) {
    if (other == null) {
      return;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    if (other.Correct != false) {
      Correct = other.Correct;
    }
    if (other.State != global::State.Idle) {
      State = other.State;
    }
    if (other.FailCode != global::GlobalFailCode.NoneFailcode) {
      FailCode = other.FailCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Success = input.ReadBool();
          break;
        }
        case 16: {
          Correct = input.ReadBool();
          break;
        }
        case 24: {
          State = (global::State) input.ReadEnum();
          break;
        }
        case 32: {
          FailCode = (global::GlobalFailCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_DanceKeyPressNotification : pb::IMessage<S2C_DanceKeyPressNotification> {
  private static readonly pb::MessageParser<S2C_DanceKeyPressNotification> _parser = new pb::MessageParser<S2C_DanceKeyPressNotification>(() => new S2C_DanceKeyPressNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_DanceKeyPressNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[97]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DanceKeyPressNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DanceKeyPressNotification(S2C_DanceKeyPressNotification other) : this() {
    teamNumber_ = other.teamNumber_;
    correct_ = other.correct_;
    state_ = other.state_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DanceKeyPressNotification Clone() {
    return new S2C_DanceKeyPressNotification(this);
  }

  /// <summary>Field number for the "teamNumber" field.</summary>
  public const int TeamNumberFieldNumber = 1;
  private int teamNumber_;
  /// <summary>
  /// 입력한 플레이어팀
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TeamNumber {
    get { return teamNumber_; }
    set {
      teamNumber_ = value;
    }
  }

  /// <summary>Field number for the "correct" field.</summary>
  public const int CorrectFieldNumber = 2;
  private bool correct_;
  /// <summary>
  /// 올바른 입력이었는지
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Correct {
    get { return correct_; }
    set {
      correct_ = value;
    }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 3;
  private global::State state_ = global::State.Idle;
  /// <summary>
  /// 애니메이션        
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::State State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_DanceKeyPressNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_DanceKeyPressNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TeamNumber != other.TeamNumber) return false;
    if (Correct != other.Correct) return false;
    if (State != other.State) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TeamNumber != 0) hash ^= TeamNumber.GetHashCode();
    if (Correct != false) hash ^= Correct.GetHashCode();
    if (State != global::State.Idle) hash ^= State.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TeamNumber != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(TeamNumber);
    }
    if (Correct != false) {
      output.WriteRawTag(16);
      output.WriteBool(Correct);
    }
    if (State != global::State.Idle) {
      output.WriteRawTag(24);
      output.WriteEnum((int) State);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TeamNumber != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamNumber);
    }
    if (Correct != false) {
      size += 1 + 1;
    }
    if (State != global::State.Idle) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_DanceKeyPressNotification other) {
    if (other == null) {
      return;
    }
    if (other.TeamNumber != 0) {
      TeamNumber = other.TeamNumber;
    }
    if (other.Correct != false) {
      Correct = other.Correct;
    }
    if (other.State != global::State.Idle) {
      State = other.State;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TeamNumber = input.ReadInt32();
          break;
        }
        case 16: {
          Correct = input.ReadBool();
          break;
        }
        case 24: {
          State = (global::State) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_DanceGameOverNotification : pb::IMessage<S2C_DanceGameOverNotification> {
  private static readonly pb::MessageParser<S2C_DanceGameOverNotification> _parser = new pb::MessageParser<S2C_DanceGameOverNotification>(() => new S2C_DanceGameOverNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_DanceGameOverNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[98]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DanceGameOverNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DanceGameOverNotification(S2C_DanceGameOverNotification other) : this() {
    teamRank_ = other.teamRank_.Clone();
    result_ = other.result_.Clone();
    reason_ = other.reason_;
    endTime_ = other.endTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DanceGameOverNotification Clone() {
    return new S2C_DanceGameOverNotification(this);
  }

  /// <summary>Field number for the "TeamRank" field.</summary>
  public const int TeamRankFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_teamRank_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> teamRank_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 팀 등수
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> TeamRank {
    get { return teamRank_; }
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 2;
  private static readonly pb::FieldCodec<global::TeamResult> _repeated_result_codec
      = pb::FieldCodec.ForMessage(18, global::TeamResult.Parser);
  private readonly pbc::RepeatedField<global::TeamResult> result_ = new pbc::RepeatedField<global::TeamResult>();
  /// <summary>
  /// 팀별 게임 결과
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TeamResult> Result {
    get { return result_; }
  }

  /// <summary>Field number for the "reason" field.</summary>
  public const int ReasonFieldNumber = 3;
  private global::GameEndReason reason_ = global::GameEndReason.TimeOver;
  /// <summary>
  /// 게임 종료 이유 1. 시간 끝 2. 모든 테이블 완료
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GameEndReason Reason {
    get { return reason_; }
    set {
      reason_ = value;
    }
  }

  /// <summary>Field number for the "endTime" field.</summary>
  public const int EndTimeFieldNumber = 4;
  private long endTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long EndTime {
    get { return endTime_; }
    set {
      endTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_DanceGameOverNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_DanceGameOverNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!teamRank_.Equals(other.teamRank_)) return false;
    if(!result_.Equals(other.result_)) return false;
    if (Reason != other.Reason) return false;
    if (EndTime != other.EndTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= teamRank_.GetHashCode();
    hash ^= result_.GetHashCode();
    if (Reason != global::GameEndReason.TimeOver) hash ^= Reason.GetHashCode();
    if (EndTime != 0L) hash ^= EndTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    teamRank_.WriteTo(output, _repeated_teamRank_codec);
    result_.WriteTo(output, _repeated_result_codec);
    if (Reason != global::GameEndReason.TimeOver) {
      output.WriteRawTag(24);
      output.WriteEnum((int) Reason);
    }
    if (EndTime != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(EndTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += teamRank_.CalculateSize(_repeated_teamRank_codec);
    size += result_.CalculateSize(_repeated_result_codec);
    if (Reason != global::GameEndReason.TimeOver) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
    }
    if (EndTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_DanceGameOverNotification other) {
    if (other == null) {
      return;
    }
    teamRank_.Add(other.teamRank_);
    result_.Add(other.result_);
    if (other.Reason != global::GameEndReason.TimeOver) {
      Reason = other.Reason;
    }
    if (other.EndTime != 0L) {
      EndTime = other.EndTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          teamRank_.AddEntriesFrom(input, _repeated_teamRank_codec);
          break;
        }
        case 18: {
          result_.AddEntriesFrom(input, _repeated_result_codec);
          break;
        }
        case 24: {
          Reason = (global::GameEndReason) input.ReadEnum();
          break;
        }
        case 32: {
          EndTime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_DanceCloseSocketNotification : pb::IMessage<S2C_DanceCloseSocketNotification> {
  private static readonly pb::MessageParser<S2C_DanceCloseSocketNotification> _parser = new pb::MessageParser<S2C_DanceCloseSocketNotification>(() => new S2C_DanceCloseSocketNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_DanceCloseSocketNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[99]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DanceCloseSocketNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DanceCloseSocketNotification(S2C_DanceCloseSocketNotification other) : this() {
    disconnectedSessionId_ = other.disconnectedSessionId_;
    replacementSessionId_ = other.replacementSessionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DanceCloseSocketNotification Clone() {
    return new S2C_DanceCloseSocketNotification(this);
  }

  /// <summary>Field number for the "disconnectedSessionId" field.</summary>
  public const int DisconnectedSessionIdFieldNumber = 1;
  private string disconnectedSessionId_ = "";
  /// <summary>
  /// 나간 유저
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DisconnectedSessionId {
    get { return disconnectedSessionId_; }
    set {
      disconnectedSessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "replacementSessionId" field.</summary>
  public const int ReplacementSessionIdFieldNumber = 2;
  private string replacementSessionId_ = "";
  /// <summary>
  /// 대신 입력할 유저
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ReplacementSessionId {
    get { return replacementSessionId_; }
    set {
      replacementSessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_DanceCloseSocketNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_DanceCloseSocketNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DisconnectedSessionId != other.DisconnectedSessionId) return false;
    if (ReplacementSessionId != other.ReplacementSessionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DisconnectedSessionId.Length != 0) hash ^= DisconnectedSessionId.GetHashCode();
    if (ReplacementSessionId.Length != 0) hash ^= ReplacementSessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DisconnectedSessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DisconnectedSessionId);
    }
    if (ReplacementSessionId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ReplacementSessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DisconnectedSessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DisconnectedSessionId);
    }
    if (ReplacementSessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ReplacementSessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_DanceCloseSocketNotification other) {
    if (other == null) {
      return;
    }
    if (other.DisconnectedSessionId.Length != 0) {
      DisconnectedSessionId = other.DisconnectedSessionId;
    }
    if (other.ReplacementSessionId.Length != 0) {
      ReplacementSessionId = other.ReplacementSessionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DisconnectedSessionId = input.ReadString();
          break;
        }
        case 18: {
          ReplacementSessionId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class C2S_DanceTableCompleteRequest : pb::IMessage<C2S_DanceTableCompleteRequest> {
  private static readonly pb::MessageParser<C2S_DanceTableCompleteRequest> _parser = new pb::MessageParser<C2S_DanceTableCompleteRequest>(() => new C2S_DanceTableCompleteRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_DanceTableCompleteRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[100]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_DanceTableCompleteRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_DanceTableCompleteRequest(C2S_DanceTableCompleteRequest other) : this() {
    sessionId_ = other.sessionId_;
    endTime_ = other.endTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_DanceTableCompleteRequest Clone() {
    return new C2S_DanceTableCompleteRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  /// <summary>
  /// 테이블을 완료한 유저의 팀 넘버
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "endTime" field.</summary>
  public const int EndTimeFieldNumber = 2;
  private long endTime_;
  /// <summary>
  /// 테이블을 완료한 시간
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long EndTime {
    get { return endTime_; }
    set {
      endTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_DanceTableCompleteRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_DanceTableCompleteRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (EndTime != other.EndTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (EndTime != 0L) hash ^= EndTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (EndTime != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(EndTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (EndTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_DanceTableCompleteRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.EndTime != 0L) {
      EndTime = other.EndTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 16: {
          EndTime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///Bomb
///폭탄 미니게임 시작 알림
/// </summary>
public sealed partial class S2C_BombMiniGameReadyNotification : pb::IMessage<S2C_BombMiniGameReadyNotification> {
  private static readonly pb::MessageParser<S2C_BombMiniGameReadyNotification> _parser = new pb::MessageParser<S2C_BombMiniGameReadyNotification>(() => new S2C_BombMiniGameReadyNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_BombMiniGameReadyNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[101]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_BombMiniGameReadyNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_BombMiniGameReadyNotification(S2C_BombMiniGameReadyNotification other) : this() {
    players_ = other.players_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_BombMiniGameReadyNotification Clone() {
    return new S2C_BombMiniGameReadyNotification(this);
  }

  /// <summary>Field number for the "players" field.</summary>
  public const int PlayersFieldNumber = 1;
  private static readonly pb::FieldCodec<global::S2C_BombMiniGameReadyNotification.Types.startPlayers> _repeated_players_codec
      = pb::FieldCodec.ForMessage(10, global::S2C_BombMiniGameReadyNotification.Types.startPlayers.Parser);
  private readonly pbc::RepeatedField<global::S2C_BombMiniGameReadyNotification.Types.startPlayers> players_ = new pbc::RepeatedField<global::S2C_BombMiniGameReadyNotification.Types.startPlayers>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::S2C_BombMiniGameReadyNotification.Types.startPlayers> Players {
    get { return players_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_BombMiniGameReadyNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_BombMiniGameReadyNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!players_.Equals(other.players_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= players_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    players_.WriteTo(output, _repeated_players_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += players_.CalculateSize(_repeated_players_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_BombMiniGameReadyNotification other) {
    if (other == null) {
      return;
    }
    players_.Add(other.players_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          players_.AddEntriesFrom(input, _repeated_players_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the S2C_BombMiniGameReadyNotification message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class startPlayers : pb::IMessage<startPlayers> {
      private static readonly pb::MessageParser<startPlayers> _parser = new pb::MessageParser<startPlayers>(() => new startPlayers());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<startPlayers> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::S2C_BombMiniGameReadyNotification.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public startPlayers() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public startPlayers(startPlayers other) : this() {
        sessionId_ = other.sessionId_;
        position_ = other.position_ != null ? other.position_.Clone() : null;
        rotation_ = other.rotation_;
        bombSessionId_ = other.bombSessionId_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public startPlayers Clone() {
        return new startPlayers(this);
      }

      /// <summary>Field number for the "sessionId" field.</summary>
      public const int SessionIdFieldNumber = 1;
      private string sessionId_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string SessionId {
        get { return sessionId_; }
        set {
          sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "position" field.</summary>
      public const int PositionFieldNumber = 2;
      private global::Vector position_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::Vector Position {
        get { return position_; }
        set {
          position_ = value;
        }
      }

      /// <summary>Field number for the "rotation" field.</summary>
      public const int RotationFieldNumber = 3;
      private float rotation_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public float Rotation {
        get { return rotation_; }
        set {
          rotation_ = value;
        }
      }

      /// <summary>Field number for the "bombSessionId" field.</summary>
      public const int BombSessionIdFieldNumber = 4;
      private string bombSessionId_ = "";
      /// <summary>
      ///최초 폭탄 소지자
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string BombSessionId {
        get { return bombSessionId_; }
        set {
          bombSessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as startPlayers);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(startPlayers other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (SessionId != other.SessionId) return false;
        if (!object.Equals(Position, other.Position)) return false;
        if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rotation, other.Rotation)) return false;
        if (BombSessionId != other.BombSessionId) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
        if (position_ != null) hash ^= Position.GetHashCode();
        if (Rotation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rotation);
        if (BombSessionId.Length != 0) hash ^= BombSessionId.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (SessionId.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(SessionId);
        }
        if (position_ != null) {
          output.WriteRawTag(18);
          output.WriteMessage(Position);
        }
        if (Rotation != 0F) {
          output.WriteRawTag(29);
          output.WriteFloat(Rotation);
        }
        if (BombSessionId.Length != 0) {
          output.WriteRawTag(34);
          output.WriteString(BombSessionId);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (SessionId.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
        }
        if (position_ != null) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
        }
        if (Rotation != 0F) {
          size += 1 + 4;
        }
        if (BombSessionId.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(BombSessionId);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(startPlayers other) {
        if (other == null) {
          return;
        }
        if (other.SessionId.Length != 0) {
          SessionId = other.SessionId;
        }
        if (other.position_ != null) {
          if (position_ == null) {
            Position = new global::Vector();
          }
          Position.MergeFrom(other.Position);
        }
        if (other.Rotation != 0F) {
          Rotation = other.Rotation;
        }
        if (other.BombSessionId.Length != 0) {
          BombSessionId = other.BombSessionId;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              SessionId = input.ReadString();
              break;
            }
            case 18: {
              if (position_ == null) {
                Position = new global::Vector();
              }
              input.ReadMessage(Position);
              break;
            }
            case 29: {
              Rotation = input.ReadFloat();
              break;
            }
            case 34: {
              BombSessionId = input.ReadString();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

/// <summary>
///폭탄 미니게임 준비 완료
/// </summary>
public sealed partial class C2S_BombGameReadyRequest : pb::IMessage<C2S_BombGameReadyRequest> {
  private static readonly pb::MessageParser<C2S_BombGameReadyRequest> _parser = new pb::MessageParser<C2S_BombGameReadyRequest>(() => new C2S_BombGameReadyRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_BombGameReadyRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[102]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_BombGameReadyRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_BombGameReadyRequest(C2S_BombGameReadyRequest other) : this() {
    sessionId_ = other.sessionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_BombGameReadyRequest Clone() {
    return new C2S_BombGameReadyRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  /// <summary>
  /// 준비 완료한 플레이어 아이디
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_BombGameReadyRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_BombGameReadyRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_BombGameReadyRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///폭탄 미니게임 준비 완료 알림
/// </summary>
public sealed partial class S2C_BombGameReadyNotification : pb::IMessage<S2C_BombGameReadyNotification> {
  private static readonly pb::MessageParser<S2C_BombGameReadyNotification> _parser = new pb::MessageParser<S2C_BombGameReadyNotification>(() => new S2C_BombGameReadyNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_BombGameReadyNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[103]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_BombGameReadyNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_BombGameReadyNotification(S2C_BombGameReadyNotification other) : this() {
    sessionId_ = other.sessionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_BombGameReadyNotification Clone() {
    return new S2C_BombGameReadyNotification(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  /// <summary>
  /// 준비 완료한 인원 공유
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_BombGameReadyNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_BombGameReadyNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_BombGameReadyNotification other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///폭탄 게임 시작 알림
/// </summary>
public sealed partial class S2C_BombMiniGameStartNotification : pb::IMessage<S2C_BombMiniGameStartNotification> {
  private static readonly pb::MessageParser<S2C_BombMiniGameStartNotification> _parser = new pb::MessageParser<S2C_BombMiniGameStartNotification>(() => new S2C_BombMiniGameStartNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_BombMiniGameStartNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[104]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_BombMiniGameStartNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_BombMiniGameStartNotification(S2C_BombMiniGameStartNotification other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_BombMiniGameStartNotification Clone() {
    return new S2C_BombMiniGameStartNotification(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_BombMiniGameStartNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_BombMiniGameStartNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_BombMiniGameStartNotification other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

/// <summary>
///플레이어 이동
/// 빙판과 같은 형태
/// </summary>
public sealed partial class C2S_BombPlayerSyncRequest : pb::IMessage<C2S_BombPlayerSyncRequest> {
  private static readonly pb::MessageParser<C2S_BombPlayerSyncRequest> _parser = new pb::MessageParser<C2S_BombPlayerSyncRequest>(() => new C2S_BombPlayerSyncRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_BombPlayerSyncRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[105]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_BombPlayerSyncRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_BombPlayerSyncRequest(C2S_BombPlayerSyncRequest other) : this() {
    sessionId_ = other.sessionId_;
    position_ = other.position_ != null ? other.position_.Clone() : null;
    rotation_ = other.rotation_;
    state_ = other.state_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_BombPlayerSyncRequest Clone() {
    return new C2S_BombPlayerSyncRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 2;
  private global::Vector position_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  /// <summary>Field number for the "rotation" field.</summary>
  public const int RotationFieldNumber = 3;
  private float rotation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Rotation {
    get { return rotation_; }
    set {
      rotation_ = value;
    }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 4;
  private global::State state_ = global::State.Idle;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::State State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_BombPlayerSyncRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_BombPlayerSyncRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (!object.Equals(Position, other.Position)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rotation, other.Rotation)) return false;
    if (State != other.State) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (position_ != null) hash ^= Position.GetHashCode();
    if (Rotation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rotation);
    if (State != global::State.Idle) hash ^= State.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (position_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Position);
    }
    if (Rotation != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Rotation);
    }
    if (State != global::State.Idle) {
      output.WriteRawTag(32);
      output.WriteEnum((int) State);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (position_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
    }
    if (Rotation != 0F) {
      size += 1 + 4;
    }
    if (State != global::State.Idle) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_BombPlayerSyncRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.position_ != null) {
      if (position_ == null) {
        Position = new global::Vector();
      }
      Position.MergeFrom(other.Position);
    }
    if (other.Rotation != 0F) {
      Rotation = other.Rotation;
    }
    if (other.State != global::State.Idle) {
      State = other.State;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 18: {
          if (position_ == null) {
            Position = new global::Vector();
          }
          input.ReadMessage(Position);
          break;
        }
        case 29: {
          Rotation = input.ReadFloat();
          break;
        }
        case 32: {
          State = (global::State) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
///상태 동기화
/// 빙판과 같은 형태
/// </summary>
public sealed partial class S2C_BombPlayerSyncNotification : pb::IMessage<S2C_BombPlayerSyncNotification> {
  private static readonly pb::MessageParser<S2C_BombPlayerSyncNotification> _parser = new pb::MessageParser<S2C_BombPlayerSyncNotification>(() => new S2C_BombPlayerSyncNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_BombPlayerSyncNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[106]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_BombPlayerSyncNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_BombPlayerSyncNotification(S2C_BombPlayerSyncNotification other) : this() {
    sessionId_ = other.sessionId_;
    position_ = other.position_ != null ? other.position_.Clone() : null;
    rotation_ = other.rotation_;
    state_ = other.state_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_BombPlayerSyncNotification Clone() {
    return new S2C_BombPlayerSyncNotification(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 2;
  private global::Vector position_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  /// <summary>Field number for the "rotation" field.</summary>
  public const int RotationFieldNumber = 3;
  private float rotation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Rotation {
    get { return rotation_; }
    set {
      rotation_ = value;
    }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 4;
  private global::State state_ = global::State.Idle;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::State State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_BombPlayerSyncNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_BombPlayerSyncNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (!object.Equals(Position, other.Position)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rotation, other.Rotation)) return false;
    if (State != other.State) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (position_ != null) hash ^= Position.GetHashCode();
    if (Rotation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rotation);
    if (State != global::State.Idle) hash ^= State.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (position_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Position);
    }
    if (Rotation != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Rotation);
    }
    if (State != global::State.Idle) {
      output.WriteRawTag(32);
      output.WriteEnum((int) State);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (position_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
    }
    if (Rotation != 0F) {
      size += 1 + 4;
    }
    if (State != global::State.Idle) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_BombPlayerSyncNotification other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.position_ != null) {
      if (position_ == null) {
        Position = new global::Vector();
      }
      Position.MergeFrom(other.Position);
    }
    if (other.Rotation != 0F) {
      Rotation = other.Rotation;
    }
    if (other.State != global::State.Idle) {
      State = other.State;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 18: {
          if (position_ == null) {
            Position = new global::Vector();
          }
          input.ReadMessage(Position);
          break;
        }
        case 29: {
          Rotation = input.ReadFloat();
          break;
        }
        case 32: {
          State = (global::State) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
///폭탄 터짐
/// </summary>
public sealed partial class S2C_BombPlayerDeathNotification : pb::IMessage<S2C_BombPlayerDeathNotification> {
  private static readonly pb::MessageParser<S2C_BombPlayerDeathNotification> _parser = new pb::MessageParser<S2C_BombPlayerDeathNotification>(() => new S2C_BombPlayerDeathNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_BombPlayerDeathNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[107]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_BombPlayerDeathNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_BombPlayerDeathNotification(S2C_BombPlayerDeathNotification other) : this() {
    sessionId_ = other.sessionId_;
    bombSessionId_ = other.bombSessionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_BombPlayerDeathNotification Clone() {
    return new S2C_BombPlayerDeathNotification(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  /// <summary>
  /// 터질 때 들고있던 유저
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "bombSessionId" field.</summary>
  public const int BombSessionIdFieldNumber = 2;
  private string bombSessionId_ = "";
  /// <summary>
  /// 새로운 폭탄 유저
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string BombSessionId {
    get { return bombSessionId_; }
    set {
      bombSessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_BombPlayerDeathNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_BombPlayerDeathNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (BombSessionId != other.BombSessionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (BombSessionId.Length != 0) hash ^= BombSessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (BombSessionId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(BombSessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (BombSessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(BombSessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_BombPlayerDeathNotification other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.BombSessionId.Length != 0) {
      BombSessionId = other.BombSessionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 18: {
          BombSessionId = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///폭탄 건넴 
/// </summary>
public sealed partial class C2S_BombMoveRequest : pb::IMessage<C2S_BombMoveRequest> {
  private static readonly pb::MessageParser<C2S_BombMoveRequest> _parser = new pb::MessageParser<C2S_BombMoveRequest>(() => new C2S_BombMoveRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_BombMoveRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[108]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_BombMoveRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_BombMoveRequest(C2S_BombMoveRequest other) : this() {
    sessionId_ = other.sessionId_;
    bombUserId_ = other.bombUserId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_BombMoveRequest Clone() {
    return new C2S_BombMoveRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  /// <summary>
  /// 폭탄 받는 유저 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "bombUserId" field.</summary>
  public const int BombUserIdFieldNumber = 2;
  private string bombUserId_ = "";
  /// <summary>
  /// 폭탄 주는 유저
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string BombUserId {
    get { return bombUserId_; }
    set {
      bombUserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_BombMoveRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_BombMoveRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (BombUserId != other.BombUserId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (BombUserId.Length != 0) hash ^= BombUserId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (BombUserId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(BombUserId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (BombUserId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(BombUserId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_BombMoveRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.BombUserId.Length != 0) {
      BombUserId = other.BombUserId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 18: {
          BombUserId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_BombMoveNotification : pb::IMessage<S2C_BombMoveNotification> {
  private static readonly pb::MessageParser<S2C_BombMoveNotification> _parser = new pb::MessageParser<S2C_BombMoveNotification>(() => new S2C_BombMoveNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_BombMoveNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[109]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_BombMoveNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_BombMoveNotification(S2C_BombMoveNotification other) : this() {
    sessionId_ = other.sessionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_BombMoveNotification Clone() {
    return new S2C_BombMoveNotification(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  /// <summary>
  /// 폭탄 받는 유저 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_BombMoveNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_BombMoveNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_BombMoveNotification other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///END. 게임 종료 알림
/// </summary>
public sealed partial class S2C_BombGameOverNotification : pb::IMessage<S2C_BombGameOverNotification> {
  private static readonly pb::MessageParser<S2C_BombGameOverNotification> _parser = new pb::MessageParser<S2C_BombGameOverNotification>(() => new S2C_BombGameOverNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_BombGameOverNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[110]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_BombGameOverNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_BombGameOverNotification(S2C_BombGameOverNotification other) : this() {
    ranks_ = other.ranks_.Clone();
    endTime_ = other.endTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_BombGameOverNotification Clone() {
    return new S2C_BombGameOverNotification(this);
  }

  /// <summary>Field number for the "ranks" field.</summary>
  public const int RanksFieldNumber = 1;
  private static readonly pb::FieldCodec<global::S2C_BombGameOverNotification.Types.Rank> _repeated_ranks_codec
      = pb::FieldCodec.ForMessage(10, global::S2C_BombGameOverNotification.Types.Rank.Parser);
  private readonly pbc::RepeatedField<global::S2C_BombGameOverNotification.Types.Rank> ranks_ = new pbc::RepeatedField<global::S2C_BombGameOverNotification.Types.Rank>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::S2C_BombGameOverNotification.Types.Rank> Ranks {
    get { return ranks_; }
  }

  /// <summary>Field number for the "endTime" field.</summary>
  public const int EndTimeFieldNumber = 2;
  private long endTime_;
  /// <summary>
  /// 일단 ice랑 똑같이 +6초 해서?
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long EndTime {
    get { return endTime_; }
    set {
      endTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_BombGameOverNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_BombGameOverNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!ranks_.Equals(other.ranks_)) return false;
    if (EndTime != other.EndTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ranks_.GetHashCode();
    if (EndTime != 0L) hash ^= EndTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    ranks_.WriteTo(output, _repeated_ranks_codec);
    if (EndTime != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(EndTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += ranks_.CalculateSize(_repeated_ranks_codec);
    if (EndTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_BombGameOverNotification other) {
    if (other == null) {
      return;
    }
    ranks_.Add(other.ranks_);
    if (other.EndTime != 0L) {
      EndTime = other.EndTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ranks_.AddEntriesFrom(input, _repeated_ranks_codec);
          break;
        }
        case 16: {
          EndTime = input.ReadInt64();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the S2C_BombGameOverNotification message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class Rank : pb::IMessage<Rank> {
      private static readonly pb::MessageParser<Rank> _parser = new pb::MessageParser<Rank>(() => new Rank());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Rank> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::S2C_BombGameOverNotification.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Rank() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Rank(Rank other) : this() {
        sessionId_ = other.sessionId_;
        rank_ = other.rank_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Rank Clone() {
        return new Rank(this);
      }

      /// <summary>Field number for the "sessionId" field.</summary>
      public const int SessionIdFieldNumber = 1;
      private string sessionId_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string SessionId {
        get { return sessionId_; }
        set {
          sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "rank" field.</summary>
      public const int Rank_FieldNumber = 2;
      private int rank_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int Rank_ {
        get { return rank_; }
        set {
          rank_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Rank);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Rank other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (SessionId != other.SessionId) return false;
        if (Rank_ != other.Rank_) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
        if (Rank_ != 0) hash ^= Rank_.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (SessionId.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(SessionId);
        }
        if (Rank_ != 0) {
          output.WriteRawTag(16);
          output.WriteInt32(Rank_);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (SessionId.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
        }
        if (Rank_ != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank_);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Rank other) {
        if (other == null) {
          return;
        }
        if (other.SessionId.Length != 0) {
          SessionId = other.SessionId;
        }
        if (other.Rank_ != 0) {
          Rank_ = other.Rank_;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              SessionId = input.ReadString();
              break;
            }
            case 16: {
              Rank_ = input.ReadInt32();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

/// <summary>
///Dart
/// 미니게임 시작 노티 
/// </summary>
public sealed partial class S2C_DartMiniGameReadyNotification : pb::IMessage<S2C_DartMiniGameReadyNotification> {
  private static readonly pb::MessageParser<S2C_DartMiniGameReadyNotification> _parser = new pb::MessageParser<S2C_DartMiniGameReadyNotification>(() => new S2C_DartMiniGameReadyNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_DartMiniGameReadyNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[111]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DartMiniGameReadyNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DartMiniGameReadyNotification(S2C_DartMiniGameReadyNotification other) : this() {
    players_ = other.players_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DartMiniGameReadyNotification Clone() {
    return new S2C_DartMiniGameReadyNotification(this);
  }

  /// <summary>Field number for the "players" field.</summary>
  public const int PlayersFieldNumber = 1;
  private static readonly pb::FieldCodec<global::S2C_DartMiniGameReadyNotification.Types.startPlayers> _repeated_players_codec
      = pb::FieldCodec.ForMessage(10, global::S2C_DartMiniGameReadyNotification.Types.startPlayers.Parser);
  private readonly pbc::RepeatedField<global::S2C_DartMiniGameReadyNotification.Types.startPlayers> players_ = new pbc::RepeatedField<global::S2C_DartMiniGameReadyNotification.Types.startPlayers>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::S2C_DartMiniGameReadyNotification.Types.startPlayers> Players {
    get { return players_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_DartMiniGameReadyNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_DartMiniGameReadyNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!players_.Equals(other.players_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= players_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    players_.WriteTo(output, _repeated_players_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += players_.CalculateSize(_repeated_players_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_DartMiniGameReadyNotification other) {
    if (other == null) {
      return;
    }
    players_.Add(other.players_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          players_.AddEntriesFrom(input, _repeated_players_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the S2C_DartMiniGameReadyNotification message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class startPlayers : pb::IMessage<startPlayers> {
      private static readonly pb::MessageParser<startPlayers> _parser = new pb::MessageParser<startPlayers>(() => new startPlayers());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<startPlayers> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::S2C_DartMiniGameReadyNotification.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public startPlayers() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public startPlayers(startPlayers other) : this() {
        sessionId_ = other.sessionId_;
        position_ = other.position_ != null ? other.position_.Clone() : null;
        rotation_ = other.rotation_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public startPlayers Clone() {
        return new startPlayers(this);
      }

      /// <summary>Field number for the "sessionId" field.</summary>
      public const int SessionIdFieldNumber = 1;
      private string sessionId_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string SessionId {
        get { return sessionId_; }
        set {
          sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "position" field.</summary>
      public const int PositionFieldNumber = 2;
      private global::Vector position_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::Vector Position {
        get { return position_; }
        set {
          position_ = value;
        }
      }

      /// <summary>Field number for the "rotation" field.</summary>
      public const int RotationFieldNumber = 3;
      private float rotation_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public float Rotation {
        get { return rotation_; }
        set {
          rotation_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as startPlayers);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(startPlayers other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (SessionId != other.SessionId) return false;
        if (!object.Equals(Position, other.Position)) return false;
        if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rotation, other.Rotation)) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
        if (position_ != null) hash ^= Position.GetHashCode();
        if (Rotation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rotation);
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (SessionId.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(SessionId);
        }
        if (position_ != null) {
          output.WriteRawTag(18);
          output.WriteMessage(Position);
        }
        if (Rotation != 0F) {
          output.WriteRawTag(29);
          output.WriteFloat(Rotation);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (SessionId.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
        }
        if (position_ != null) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
        }
        if (Rotation != 0F) {
          size += 1 + 4;
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(startPlayers other) {
        if (other == null) {
          return;
        }
        if (other.SessionId.Length != 0) {
          SessionId = other.SessionId;
        }
        if (other.position_ != null) {
          if (position_ == null) {
            Position = new global::Vector();
          }
          Position.MergeFrom(other.Position);
        }
        if (other.Rotation != 0F) {
          Rotation = other.Rotation;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              SessionId = input.ReadString();
              break;
            }
            case 18: {
              if (position_ == null) {
                Position = new global::Vector();
              }
              input.ReadMessage(Position);
              break;
            }
            case 29: {
              Rotation = input.ReadFloat();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

/// <summary>
/// 미니게임 레디 판넬 - 준비 
/// </summary>
public sealed partial class C2S_DartGameReadyRequest : pb::IMessage<C2S_DartGameReadyRequest> {
  private static readonly pb::MessageParser<C2S_DartGameReadyRequest> _parser = new pb::MessageParser<C2S_DartGameReadyRequest>(() => new C2S_DartGameReadyRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_DartGameReadyRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[112]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_DartGameReadyRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_DartGameReadyRequest(C2S_DartGameReadyRequest other) : this() {
    sessionId_ = other.sessionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_DartGameReadyRequest Clone() {
    return new C2S_DartGameReadyRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_DartGameReadyRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_DartGameReadyRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_DartGameReadyRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_DartGameReadyNotification : pb::IMessage<S2C_DartGameReadyNotification> {
  private static readonly pb::MessageParser<S2C_DartGameReadyNotification> _parser = new pb::MessageParser<S2C_DartGameReadyNotification>(() => new S2C_DartGameReadyNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_DartGameReadyNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[113]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DartGameReadyNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DartGameReadyNotification(S2C_DartGameReadyNotification other) : this() {
    sessionId_ = other.sessionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DartGameReadyNotification Clone() {
    return new S2C_DartGameReadyNotification(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_DartGameReadyNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_DartGameReadyNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_DartGameReadyNotification other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 미니게임 - 던지기 요청
/// </summary>
public sealed partial class C2S_DartGameThrowRequest : pb::IMessage<C2S_DartGameThrowRequest> {
  private static readonly pb::MessageParser<C2S_DartGameThrowRequest> _parser = new pb::MessageParser<C2S_DartGameThrowRequest>(() => new C2S_DartGameThrowRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_DartGameThrowRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[114]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_DartGameThrowRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_DartGameThrowRequest(C2S_DartGameThrowRequest other) : this() {
    sessionId_ = other.sessionId_;
    distance_ = other.distance_;
    angle_ = other.angle_ != null ? other.angle_.Clone() : null;
    location_ = other.location_ != null ? other.location_.Clone() : null;
    power_ = other.power_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_DartGameThrowRequest Clone() {
    return new C2S_DartGameThrowRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "distance" field.</summary>
  public const int DistanceFieldNumber = 2;
  private float distance_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Distance {
    get { return distance_; }
    set {
      distance_ = value;
    }
  }

  /// <summary>Field number for the "angle" field.</summary>
  public const int AngleFieldNumber = 3;
  private global::Vector angle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector Angle {
    get { return angle_; }
    set {
      angle_ = value;
    }
  }

  /// <summary>Field number for the "location" field.</summary>
  public const int LocationFieldNumber = 4;
  private global::Vector location_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector Location {
    get { return location_; }
    set {
      location_ = value;
    }
  }

  /// <summary>Field number for the "power" field.</summary>
  public const int PowerFieldNumber = 5;
  private float power_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Power {
    get { return power_; }
    set {
      power_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_DartGameThrowRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_DartGameThrowRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Distance, other.Distance)) return false;
    if (!object.Equals(Angle, other.Angle)) return false;
    if (!object.Equals(Location, other.Location)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Power, other.Power)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (Distance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Distance);
    if (angle_ != null) hash ^= Angle.GetHashCode();
    if (location_ != null) hash ^= Location.GetHashCode();
    if (Power != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Power);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (Distance != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Distance);
    }
    if (angle_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Angle);
    }
    if (location_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Location);
    }
    if (Power != 0F) {
      output.WriteRawTag(45);
      output.WriteFloat(Power);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (Distance != 0F) {
      size += 1 + 4;
    }
    if (angle_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Angle);
    }
    if (location_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
    }
    if (Power != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_DartGameThrowRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.Distance != 0F) {
      Distance = other.Distance;
    }
    if (other.angle_ != null) {
      if (angle_ == null) {
        Angle = new global::Vector();
      }
      Angle.MergeFrom(other.Angle);
    }
    if (other.location_ != null) {
      if (location_ == null) {
        Location = new global::Vector();
      }
      Location.MergeFrom(other.Location);
    }
    if (other.Power != 0F) {
      Power = other.Power;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 21: {
          Distance = input.ReadFloat();
          break;
        }
        case 26: {
          if (angle_ == null) {
            Angle = new global::Vector();
          }
          input.ReadMessage(Angle);
          break;
        }
        case 34: {
          if (location_ == null) {
            Location = new global::Vector();
          }
          input.ReadMessage(Location);
          break;
        }
        case 45: {
          Power = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_DartMiniGameStartNotification : pb::IMessage<S2C_DartMiniGameStartNotification> {
  private static readonly pb::MessageParser<S2C_DartMiniGameStartNotification> _parser = new pb::MessageParser<S2C_DartMiniGameStartNotification>(() => new S2C_DartMiniGameStartNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_DartMiniGameStartNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[115]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DartMiniGameStartNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DartMiniGameStartNotification(S2C_DartMiniGameStartNotification other) : this() {
    startTime_ = other.startTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DartMiniGameStartNotification Clone() {
    return new S2C_DartMiniGameStartNotification(this);
  }

  /// <summary>Field number for the "startTime" field.</summary>
  public const int StartTimeFieldNumber = 1;
  private long startTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long StartTime {
    get { return startTime_; }
    set {
      startTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_DartMiniGameStartNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_DartMiniGameStartNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (StartTime != other.StartTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (StartTime != 0L) hash ^= StartTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (StartTime != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(StartTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (StartTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_DartMiniGameStartNotification other) {
    if (other == null) {
      return;
    }
    if (other.StartTime != 0L) {
      StartTime = other.StartTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          StartTime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 미니게임 - 던지기 알림 
/// </summary>
public sealed partial class S2C_DartGameThrowNotification : pb::IMessage<S2C_DartGameThrowNotification> {
  private static readonly pb::MessageParser<S2C_DartGameThrowNotification> _parser = new pb::MessageParser<S2C_DartGameThrowNotification>(() => new S2C_DartGameThrowNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_DartGameThrowNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[116]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DartGameThrowNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DartGameThrowNotification(S2C_DartGameThrowNotification other) : this() {
    result_ = other.result_ != null ? other.result_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DartGameThrowNotification Clone() {
    return new S2C_DartGameThrowNotification(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private global::DartGameData result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DartGameData Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_DartGameThrowNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_DartGameThrowNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Result, other.Result)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (result_ != null) hash ^= Result.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (result_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Result);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (result_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_DartGameThrowNotification other) {
    if (other == null) {
      return;
    }
    if (other.result_ != null) {
      if (result_ == null) {
        Result = new global::DartGameData();
      }
      Result.MergeFrom(other.Result);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (result_ == null) {
            Result = new global::DartGameData();
          }
          input.ReadMessage(Result);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 미니게임 종료 
/// </summary>
public sealed partial class S2C_DartGameOverNotification : pb::IMessage<S2C_DartGameOverNotification> {
  private static readonly pb::MessageParser<S2C_DartGameOverNotification> _parser = new pb::MessageParser<S2C_DartGameOverNotification>(() => new S2C_DartGameOverNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_DartGameOverNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[117]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DartGameOverNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DartGameOverNotification(S2C_DartGameOverNotification other) : this() {
    ranks_ = other.ranks_.Clone();
    endTime_ = other.endTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DartGameOverNotification Clone() {
    return new S2C_DartGameOverNotification(this);
  }

  /// <summary>Field number for the "ranks" field.</summary>
  public const int RanksFieldNumber = 1;
  private static readonly pb::FieldCodec<global::S2C_DartGameOverNotification.Types.Rank> _repeated_ranks_codec
      = pb::FieldCodec.ForMessage(10, global::S2C_DartGameOverNotification.Types.Rank.Parser);
  private readonly pbc::RepeatedField<global::S2C_DartGameOverNotification.Types.Rank> ranks_ = new pbc::RepeatedField<global::S2C_DartGameOverNotification.Types.Rank>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::S2C_DartGameOverNotification.Types.Rank> Ranks {
    get { return ranks_; }
  }

  /// <summary>Field number for the "endTime" field.</summary>
  public const int EndTimeFieldNumber = 2;
  private long endTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long EndTime {
    get { return endTime_; }
    set {
      endTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_DartGameOverNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_DartGameOverNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!ranks_.Equals(other.ranks_)) return false;
    if (EndTime != other.EndTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ranks_.GetHashCode();
    if (EndTime != 0L) hash ^= EndTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    ranks_.WriteTo(output, _repeated_ranks_codec);
    if (EndTime != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(EndTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += ranks_.CalculateSize(_repeated_ranks_codec);
    if (EndTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_DartGameOverNotification other) {
    if (other == null) {
      return;
    }
    ranks_.Add(other.ranks_);
    if (other.EndTime != 0L) {
      EndTime = other.EndTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ranks_.AddEntriesFrom(input, _repeated_ranks_codec);
          break;
        }
        case 16: {
          EndTime = input.ReadInt64();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the S2C_DartGameOverNotification message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class Rank : pb::IMessage<Rank> {
      private static readonly pb::MessageParser<Rank> _parser = new pb::MessageParser<Rank>(() => new Rank());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Rank> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::S2C_DartGameOverNotification.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Rank() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Rank(Rank other) : this() {
        sessionId_ = other.sessionId_;
        rank_ = other.rank_;
        totalPoint_ = other.totalPoint_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Rank Clone() {
        return new Rank(this);
      }

      /// <summary>Field number for the "sessionId" field.</summary>
      public const int SessionIdFieldNumber = 1;
      private string sessionId_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string SessionId {
        get { return sessionId_; }
        set {
          sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "rank" field.</summary>
      public const int Rank_FieldNumber = 2;
      private int rank_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int Rank_ {
        get { return rank_; }
        set {
          rank_ = value;
        }
      }

      /// <summary>Field number for the "totalPoint" field.</summary>
      public const int TotalPointFieldNumber = 3;
      private int totalPoint_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int TotalPoint {
        get { return totalPoint_; }
        set {
          totalPoint_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Rank);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Rank other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (SessionId != other.SessionId) return false;
        if (Rank_ != other.Rank_) return false;
        if (TotalPoint != other.TotalPoint) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
        if (Rank_ != 0) hash ^= Rank_.GetHashCode();
        if (TotalPoint != 0) hash ^= TotalPoint.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (SessionId.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(SessionId);
        }
        if (Rank_ != 0) {
          output.WriteRawTag(16);
          output.WriteInt32(Rank_);
        }
        if (TotalPoint != 0) {
          output.WriteRawTag(24);
          output.WriteInt32(TotalPoint);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (SessionId.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
        }
        if (Rank_ != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank_);
        }
        if (TotalPoint != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalPoint);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Rank other) {
        if (other == null) {
          return;
        }
        if (other.SessionId.Length != 0) {
          SessionId = other.SessionId;
        }
        if (other.Rank_ != 0) {
          Rank_ = other.Rank_;
        }
        if (other.TotalPoint != 0) {
          TotalPoint = other.TotalPoint;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              SessionId = input.ReadString();
              break;
            }
            case 16: {
              Rank_ = input.ReadInt32();
              break;
            }
            case 24: {
              TotalPoint = input.ReadInt32();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

/// <summary>
/// 다트판 싱크 패킷
/// </summary>
public sealed partial class C2S_DartPannelSyncRequest : pb::IMessage<C2S_DartPannelSyncRequest> {
  private static readonly pb::MessageParser<C2S_DartPannelSyncRequest> _parser = new pb::MessageParser<C2S_DartPannelSyncRequest>(() => new C2S_DartPannelSyncRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_DartPannelSyncRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[118]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_DartPannelSyncRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_DartPannelSyncRequest(C2S_DartPannelSyncRequest other) : this() {
    sessionId_ = other.sessionId_;
    location_ = other.location_ != null ? other.location_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_DartPannelSyncRequest Clone() {
    return new C2S_DartPannelSyncRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "location" field.</summary>
  public const int LocationFieldNumber = 2;
  private global::Vector location_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector Location {
    get { return location_; }
    set {
      location_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_DartPannelSyncRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_DartPannelSyncRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (!object.Equals(Location, other.Location)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (location_ != null) hash ^= Location.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (location_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Location);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (location_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_DartPannelSyncRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.location_ != null) {
      if (location_ == null) {
        Location = new global::Vector();
      }
      Location.MergeFrom(other.Location);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 18: {
          if (location_ == null) {
            Location = new global::Vector();
          }
          input.ReadMessage(Location);
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_DartPannelSyncNotification : pb::IMessage<S2C_DartPannelSyncNotification> {
  private static readonly pb::MessageParser<S2C_DartPannelSyncNotification> _parser = new pb::MessageParser<S2C_DartPannelSyncNotification>(() => new S2C_DartPannelSyncNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_DartPannelSyncNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[119]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DartPannelSyncNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DartPannelSyncNotification(S2C_DartPannelSyncNotification other) : this() {
    sessionId_ = other.sessionId_;
    location_ = other.location_ != null ? other.location_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DartPannelSyncNotification Clone() {
    return new S2C_DartPannelSyncNotification(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "location" field.</summary>
  public const int LocationFieldNumber = 2;
  private global::Vector location_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector Location {
    get { return location_; }
    set {
      location_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_DartPannelSyncNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_DartPannelSyncNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (!object.Equals(Location, other.Location)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (location_ != null) hash ^= Location.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (location_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Location);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (location_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_DartPannelSyncNotification other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.location_ != null) {
      if (location_ == null) {
        Location = new global::Vector();
      }
      Location.MergeFrom(other.Location);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 18: {
          if (location_ == null) {
            Location = new global::Vector();
          }
          input.ReadMessage(Location);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 다트 싱크 패킷 
/// </summary>
public sealed partial class C2S_DartSyncRequest : pb::IMessage<C2S_DartSyncRequest> {
  private static readonly pb::MessageParser<C2S_DartSyncRequest> _parser = new pb::MessageParser<C2S_DartSyncRequest>(() => new C2S_DartSyncRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2S_DartSyncRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[120]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_DartSyncRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_DartSyncRequest(C2S_DartSyncRequest other) : this() {
    sessionId_ = other.sessionId_;
    angle_ = other.angle_ != null ? other.angle_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2S_DartSyncRequest Clone() {
    return new C2S_DartSyncRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "angle" field.</summary>
  public const int AngleFieldNumber = 2;
  private global::Vector angle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector Angle {
    get { return angle_; }
    set {
      angle_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2S_DartSyncRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2S_DartSyncRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (!object.Equals(Angle, other.Angle)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (angle_ != null) hash ^= Angle.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (angle_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Angle);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (angle_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Angle);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2S_DartSyncRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.angle_ != null) {
      if (angle_ == null) {
        Angle = new global::Vector();
      }
      Angle.MergeFrom(other.Angle);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 18: {
          if (angle_ == null) {
            Angle = new global::Vector();
          }
          input.ReadMessage(Angle);
          break;
        }
      }
    }
  }

}

public sealed partial class S2C_DartSyncNotification : pb::IMessage<S2C_DartSyncNotification> {
  private static readonly pb::MessageParser<S2C_DartSyncNotification> _parser = new pb::MessageParser<S2C_DartSyncNotification>(() => new S2C_DartSyncNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2C_DartSyncNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[121]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DartSyncNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DartSyncNotification(S2C_DartSyncNotification other) : this() {
    sessionId_ = other.sessionId_;
    angle_ = other.angle_ != null ? other.angle_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2C_DartSyncNotification Clone() {
    return new S2C_DartSyncNotification(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "angle" field.</summary>
  public const int AngleFieldNumber = 2;
  private global::Vector angle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector Angle {
    get { return angle_; }
    set {
      angle_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2C_DartSyncNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2C_DartSyncNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (!object.Equals(Angle, other.Angle)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (angle_ != null) hash ^= Angle.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (angle_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Angle);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (angle_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Angle);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2C_DartSyncNotification other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.angle_ != null) {
      if (angle_ == null) {
        Angle = new global::Vector();
      }
      Angle.MergeFrom(other.Angle);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 18: {
          if (angle_ == null) {
            Angle = new global::Vector();
          }
          input.ReadMessage(Angle);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 게임패킷
/// </summary>
public sealed partial class GamePacket : pb::IMessage<GamePacket> {
  private static readonly pb::MessageParser<GamePacket> _parser = new pb::MessageParser<GamePacket>(() => new GamePacket());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GamePacket> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[122]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GamePacket() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GamePacket(GamePacket other) : this() {
    switch (other.PayloadCase) {
      case PayloadOneofCase.RegisterRequest:
        RegisterRequest = other.RegisterRequest.Clone();
        break;
      case PayloadOneofCase.RegisterResponse:
        RegisterResponse = other.RegisterResponse.Clone();
        break;
      case PayloadOneofCase.LoginRequest:
        LoginRequest = other.LoginRequest.Clone();
        break;
      case PayloadOneofCase.LoginResponse:
        LoginResponse = other.LoginResponse.Clone();
        break;
      case PayloadOneofCase.LogoutRequest:
        LogoutRequest = other.LogoutRequest.Clone();
        break;
      case PayloadOneofCase.CloseSocketNotification:
        CloseSocketNotification = other.CloseSocketNotification.Clone();
        break;
      case PayloadOneofCase.LobbyJoinRequest:
        LobbyJoinRequest = other.LobbyJoinRequest.Clone();
        break;
      case PayloadOneofCase.LobbyJoinResponse:
        LobbyJoinResponse = other.LobbyJoinResponse.Clone();
        break;
      case PayloadOneofCase.LobbyLeaveRequest:
        LobbyLeaveRequest = other.LobbyLeaveRequest.Clone();
        break;
      case PayloadOneofCase.LobbyLeaveResponse:
        LobbyLeaveResponse = other.LobbyLeaveResponse.Clone();
        break;
      case PayloadOneofCase.LobbyUserListRequest:
        LobbyUserListRequest = other.LobbyUserListRequest.Clone();
        break;
      case PayloadOneofCase.LobbyUserListResponse:
        LobbyUserListResponse = other.LobbyUserListResponse.Clone();
        break;
      case PayloadOneofCase.LobbyUserDetailRequest:
        LobbyUserDetailRequest = other.LobbyUserDetailRequest.Clone();
        break;
      case PayloadOneofCase.LobbyUserDetailResponse:
        LobbyUserDetailResponse = other.LobbyUserDetailResponse.Clone();
        break;
      case PayloadOneofCase.RoomListRequest:
        RoomListRequest = other.RoomListRequest.Clone();
        break;
      case PayloadOneofCase.RoomListResponse:
        RoomListResponse = other.RoomListResponse.Clone();
        break;
      case PayloadOneofCase.CreateRoomRequest:
        CreateRoomRequest = other.CreateRoomRequest.Clone();
        break;
      case PayloadOneofCase.CreateRoomResponse:
        CreateRoomResponse = other.CreateRoomResponse.Clone();
        break;
      case PayloadOneofCase.JoinRoomRequest:
        JoinRoomRequest = other.JoinRoomRequest.Clone();
        break;
      case PayloadOneofCase.JoinRoomResponse:
        JoinRoomResponse = other.JoinRoomResponse.Clone();
        break;
      case PayloadOneofCase.JoinRoomNotification:
        JoinRoomNotification = other.JoinRoomNotification.Clone();
        break;
      case PayloadOneofCase.LeaveRoomRequest:
        LeaveRoomRequest = other.LeaveRoomRequest.Clone();
        break;
      case PayloadOneofCase.LeaveRoomResponse:
        LeaveRoomResponse = other.LeaveRoomResponse.Clone();
        break;
      case PayloadOneofCase.LeaveRoomNotification:
        LeaveRoomNotification = other.LeaveRoomNotification.Clone();
        break;
      case PayloadOneofCase.GamePrepareRequest:
        GamePrepareRequest = other.GamePrepareRequest.Clone();
        break;
      case PayloadOneofCase.GamePrepareResponse:
        GamePrepareResponse = other.GamePrepareResponse.Clone();
        break;
      case PayloadOneofCase.GamePrepareNotification:
        GamePrepareNotification = other.GamePrepareNotification.Clone();
        break;
      case PayloadOneofCase.GameStartRequest:
        GameStartRequest = other.GameStartRequest.Clone();
        break;
      case PayloadOneofCase.GameStartNotification:
        GameStartNotification = other.GameStartNotification.Clone();
        break;
      case PayloadOneofCase.RollDiceRequest:
        RollDiceRequest = other.RollDiceRequest.Clone();
        break;
      case PayloadOneofCase.RollDiceResponse:
        RollDiceResponse = other.RollDiceResponse.Clone();
        break;
      case PayloadOneofCase.RollDiceNotification:
        RollDiceNotification = other.RollDiceNotification.Clone();
        break;
      case PayloadOneofCase.MovePlayerBoardRequest:
        MovePlayerBoardRequest = other.MovePlayerBoardRequest.Clone();
        break;
      case PayloadOneofCase.MovePlayerBoardResponse:
        MovePlayerBoardResponse = other.MovePlayerBoardResponse.Clone();
        break;
      case PayloadOneofCase.MovePlayerBoardNotification:
        MovePlayerBoardNotification = other.MovePlayerBoardNotification.Clone();
        break;
      case PayloadOneofCase.PurchaseTileRequest:
        PurchaseTileRequest = other.PurchaseTileRequest.Clone();
        break;
      case PayloadOneofCase.PurchaseTileResponse:
        PurchaseTileResponse = other.PurchaseTileResponse.Clone();
        break;
      case PayloadOneofCase.PurchaseTileNotification:
        PurchaseTileNotification = other.PurchaseTileNotification.Clone();
        break;
      case PayloadOneofCase.GameEndNotification:
        GameEndNotification = other.GameEndNotification.Clone();
        break;
      case PayloadOneofCase.PurchaseTrophyRequest:
        PurchaseTrophyRequest = other.PurchaseTrophyRequest.Clone();
        break;
      case PayloadOneofCase.PurchaseTrophyResponse:
        PurchaseTrophyResponse = other.PurchaseTrophyResponse.Clone();
        break;
      case PayloadOneofCase.PurchaseTrophyNotification:
        PurchaseTrophyNotification = other.PurchaseTrophyNotification.Clone();
        break;
      case PayloadOneofCase.TilePenaltyRequest:
        TilePenaltyRequest = other.TilePenaltyRequest.Clone();
        break;
      case PayloadOneofCase.TilePenaltyResponse:
        TilePenaltyResponse = other.TilePenaltyResponse.Clone();
        break;
      case PayloadOneofCase.TilePenaltyNotification:
        TilePenaltyNotification = other.TilePenaltyNotification.Clone();
        break;
      case PayloadOneofCase.DiceGameRequest:
        DiceGameRequest = other.DiceGameRequest.Clone();
        break;
      case PayloadOneofCase.DiceGameResponse:
        DiceGameResponse = other.DiceGameResponse.Clone();
        break;
      case PayloadOneofCase.DiceGameNotification:
        DiceGameNotification = other.DiceGameNotification.Clone();
        break;
      case PayloadOneofCase.TurnEndRequest:
        TurnEndRequest = other.TurnEndRequest.Clone();
        break;
      case PayloadOneofCase.TurnEndNotification:
        TurnEndNotification = other.TurnEndNotification.Clone();
        break;
      case PayloadOneofCase.BackToTheRoomRequest:
        BackToTheRoomRequest = other.BackToTheRoomRequest.Clone();
        break;
      case PayloadOneofCase.BackToTheRoomResponse:
        BackToTheRoomResponse = other.BackToTheRoomResponse.Clone();
        break;
      case PayloadOneofCase.BackToTheRoomNotification:
        BackToTheRoomNotification = other.BackToTheRoomNotification.Clone();
        break;
      case PayloadOneofCase.StartMiniGameRequest:
        StartMiniGameRequest = other.StartMiniGameRequest.Clone();
        break;
      case PayloadOneofCase.IceMiniGameReadyNotification:
        IceMiniGameReadyNotification = other.IceMiniGameReadyNotification.Clone();
        break;
      case PayloadOneofCase.IceGameReadyRequest:
        IceGameReadyRequest = other.IceGameReadyRequest.Clone();
        break;
      case PayloadOneofCase.IceGameReadyNotification:
        IceGameReadyNotification = other.IceGameReadyNotification.Clone();
        break;
      case PayloadOneofCase.IceMiniGameStartNotification:
        IceMiniGameStartNotification = other.IceMiniGameStartNotification.Clone();
        break;
      case PayloadOneofCase.IcePlayerSyncRequest:
        IcePlayerSyncRequest = other.IcePlayerSyncRequest.Clone();
        break;
      case PayloadOneofCase.IcePlayerSyncNotification:
        IcePlayerSyncNotification = other.IcePlayerSyncNotification.Clone();
        break;
      case PayloadOneofCase.IcePlayerDamageRequest:
        IcePlayerDamageRequest = other.IcePlayerDamageRequest.Clone();
        break;
      case PayloadOneofCase.IcePlayerDamageNotification:
        IcePlayerDamageNotification = other.IcePlayerDamageNotification.Clone();
        break;
      case PayloadOneofCase.IcePlayerDeathNotification:
        IcePlayerDeathNotification = other.IcePlayerDeathNotification.Clone();
        break;
      case PayloadOneofCase.IceGameOverNotification:
        IceGameOverNotification = other.IceGameOverNotification.Clone();
        break;
      case PayloadOneofCase.IceMapSyncNotification:
        IceMapSyncNotification = other.IceMapSyncNotification.Clone();
        break;
      case PayloadOneofCase.IcePlayerExitNotification:
        IcePlayerExitNotification = other.IcePlayerExitNotification.Clone();
        break;
      case PayloadOneofCase.DropMiniGameReadyNotification:
        DropMiniGameReadyNotification = other.DropMiniGameReadyNotification.Clone();
        break;
      case PayloadOneofCase.DropGameReadyRequest:
        DropGameReadyRequest = other.DropGameReadyRequest.Clone();
        break;
      case PayloadOneofCase.DropGameReadyNotification:
        DropGameReadyNotification = other.DropGameReadyNotification.Clone();
        break;
      case PayloadOneofCase.DropMiniGameStartNotification:
        DropMiniGameStartNotification = other.DropMiniGameStartNotification.Clone();
        break;
      case PayloadOneofCase.DropPlayerSyncRequest:
        DropPlayerSyncRequest = other.DropPlayerSyncRequest.Clone();
        break;
      case PayloadOneofCase.DropPlayerSyncNotification:
        DropPlayerSyncNotification = other.DropPlayerSyncNotification.Clone();
        break;
      case PayloadOneofCase.DropPlayerDeathNotification:
        DropPlayerDeathNotification = other.DropPlayerDeathNotification.Clone();
        break;
      case PayloadOneofCase.DropLevelStartNotification:
        DropLevelStartNotification = other.DropLevelStartNotification.Clone();
        break;
      case PayloadOneofCase.DropLevelEndNotification:
        DropLevelEndNotification = other.DropLevelEndNotification.Clone();
        break;
      case PayloadOneofCase.DropGameOverNotification:
        DropGameOverNotification = other.DropGameOverNotification.Clone();
        break;
      case PayloadOneofCase.DanceMiniGameReadyNotification:
        DanceMiniGameReadyNotification = other.DanceMiniGameReadyNotification.Clone();
        break;
      case PayloadOneofCase.DanceReadyRequest:
        DanceReadyRequest = other.DanceReadyRequest.Clone();
        break;
      case PayloadOneofCase.DanceReadyNotification:
        DanceReadyNotification = other.DanceReadyNotification.Clone();
        break;
      case PayloadOneofCase.DanceStartNotification:
        DanceStartNotification = other.DanceStartNotification.Clone();
        break;
      case PayloadOneofCase.DanceTableCreateRequest:
        DanceTableCreateRequest = other.DanceTableCreateRequest.Clone();
        break;
      case PayloadOneofCase.DanceTableNotification:
        DanceTableNotification = other.DanceTableNotification.Clone();
        break;
      case PayloadOneofCase.DanceKeyPressRequest:
        DanceKeyPressRequest = other.DanceKeyPressRequest.Clone();
        break;
      case PayloadOneofCase.DanceKeyPressResponse:
        DanceKeyPressResponse = other.DanceKeyPressResponse.Clone();
        break;
      case PayloadOneofCase.DanceKeyPressNotification:
        DanceKeyPressNotification = other.DanceKeyPressNotification.Clone();
        break;
      case PayloadOneofCase.DanceGameOverNotification:
        DanceGameOverNotification = other.DanceGameOverNotification.Clone();
        break;
      case PayloadOneofCase.DanceCloseSocketNotification:
        DanceCloseSocketNotification = other.DanceCloseSocketNotification.Clone();
        break;
      case PayloadOneofCase.DanceTableCompleteRequest:
        DanceTableCompleteRequest = other.DanceTableCompleteRequest.Clone();
        break;
      case PayloadOneofCase.BombMiniGameReadyNotification:
        BombMiniGameReadyNotification = other.BombMiniGameReadyNotification.Clone();
        break;
      case PayloadOneofCase.BombGameReadyRequest:
        BombGameReadyRequest = other.BombGameReadyRequest.Clone();
        break;
      case PayloadOneofCase.BombGameReadyNotification:
        BombGameReadyNotification = other.BombGameReadyNotification.Clone();
        break;
      case PayloadOneofCase.BombMiniGameStartNotification:
        BombMiniGameStartNotification = other.BombMiniGameStartNotification.Clone();
        break;
      case PayloadOneofCase.BombPlayerSyncRequest:
        BombPlayerSyncRequest = other.BombPlayerSyncRequest.Clone();
        break;
      case PayloadOneofCase.BombPlayerSyncNotification:
        BombPlayerSyncNotification = other.BombPlayerSyncNotification.Clone();
        break;
      case PayloadOneofCase.BombPlayerDeathNotification:
        BombPlayerDeathNotification = other.BombPlayerDeathNotification.Clone();
        break;
      case PayloadOneofCase.BombMoveRequest:
        BombMoveRequest = other.BombMoveRequest.Clone();
        break;
      case PayloadOneofCase.BombMoveNotification:
        BombMoveNotification = other.BombMoveNotification.Clone();
        break;
      case PayloadOneofCase.BombGameOverNotification:
        BombGameOverNotification = other.BombGameOverNotification.Clone();
        break;
      case PayloadOneofCase.DartMiniGameReadyNotification:
        DartMiniGameReadyNotification = other.DartMiniGameReadyNotification.Clone();
        break;
      case PayloadOneofCase.DartGameReadyRequest:
        DartGameReadyRequest = other.DartGameReadyRequest.Clone();
        break;
      case PayloadOneofCase.DartGameReadyNotification:
        DartGameReadyNotification = other.DartGameReadyNotification.Clone();
        break;
      case PayloadOneofCase.DartMiniGameStartNotification:
        DartMiniGameStartNotification = other.DartMiniGameStartNotification.Clone();
        break;
      case PayloadOneofCase.DartGameThrowRequest:
        DartGameThrowRequest = other.DartGameThrowRequest.Clone();
        break;
      case PayloadOneofCase.DartGameThrowNotification:
        DartGameThrowNotification = other.DartGameThrowNotification.Clone();
        break;
      case PayloadOneofCase.DartGameOverNotification:
        DartGameOverNotification = other.DartGameOverNotification.Clone();
        break;
      case PayloadOneofCase.DartPannelSyncRequest:
        DartPannelSyncRequest = other.DartPannelSyncRequest.Clone();
        break;
      case PayloadOneofCase.DartPannelSyncNotification:
        DartPannelSyncNotification = other.DartPannelSyncNotification.Clone();
        break;
      case PayloadOneofCase.DartSyncRequest:
        DartSyncRequest = other.DartSyncRequest.Clone();
        break;
      case PayloadOneofCase.DartSyncNotification:
        DartSyncNotification = other.DartSyncNotification.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GamePacket Clone() {
    return new GamePacket(this);
  }

  /// <summary>Field number for the "registerRequest" field.</summary>
  public const int RegisterRequestFieldNumber = 1;
  /// <summary>
  /// Auth (1~9)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_RegisterRequest RegisterRequest {
    get { return payloadCase_ == PayloadOneofCase.RegisterRequest ? (global::C2S_RegisterRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.RegisterRequest;
    }
  }

  /// <summary>Field number for the "registerResponse" field.</summary>
  public const int RegisterResponseFieldNumber = 2;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_RegisterResponse RegisterResponse {
    get { return payloadCase_ == PayloadOneofCase.RegisterResponse ? (global::S2C_RegisterResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.RegisterResponse;
    }
  }

  /// <summary>Field number for the "loginRequest" field.</summary>
  public const int LoginRequestFieldNumber = 3;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_LoginRequest LoginRequest {
    get { return payloadCase_ == PayloadOneofCase.LoginRequest ? (global::C2S_LoginRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LoginRequest;
    }
  }

  /// <summary>Field number for the "loginResponse" field.</summary>
  public const int LoginResponseFieldNumber = 4;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_LoginResponse LoginResponse {
    get { return payloadCase_ == PayloadOneofCase.LoginResponse ? (global::S2C_LoginResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LoginResponse;
    }
  }

  /// <summary>Field number for the "logoutRequest" field.</summary>
  public const int LogoutRequestFieldNumber = 5;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_LoggoutRequest LogoutRequest {
    get { return payloadCase_ == PayloadOneofCase.LogoutRequest ? (global::C2S_LoggoutRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LogoutRequest;
    }
  }

  /// <summary>Field number for the "closeSocketNotification" field.</summary>
  public const int CloseSocketNotificationFieldNumber = 8;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_CloseSocketNotification CloseSocketNotification {
    get { return payloadCase_ == PayloadOneofCase.CloseSocketNotification ? (global::S2C_CloseSocketNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.CloseSocketNotification;
    }
  }

  /// <summary>Field number for the "lobbyJoinRequest" field.</summary>
  public const int LobbyJoinRequestFieldNumber = 11;
  /// <summary>
  /// Lobby (11-30)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_LobbyJoinRequest LobbyJoinRequest {
    get { return payloadCase_ == PayloadOneofCase.LobbyJoinRequest ? (global::C2S_LobbyJoinRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LobbyJoinRequest;
    }
  }

  /// <summary>Field number for the "lobbyJoinResponse" field.</summary>
  public const int LobbyJoinResponseFieldNumber = 12;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_LobbyJoinResponse LobbyJoinResponse {
    get { return payloadCase_ == PayloadOneofCase.LobbyJoinResponse ? (global::S2C_LobbyJoinResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LobbyJoinResponse;
    }
  }

  /// <summary>Field number for the "lobbyLeaveRequest" field.</summary>
  public const int LobbyLeaveRequestFieldNumber = 13;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_LobbyLeaveRequest LobbyLeaveRequest {
    get { return payloadCase_ == PayloadOneofCase.LobbyLeaveRequest ? (global::C2S_LobbyLeaveRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LobbyLeaveRequest;
    }
  }

  /// <summary>Field number for the "lobbyLeaveResponse" field.</summary>
  public const int LobbyLeaveResponseFieldNumber = 14;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_LobbyLeaveResponse LobbyLeaveResponse {
    get { return payloadCase_ == PayloadOneofCase.LobbyLeaveResponse ? (global::S2C_LobbyLeaveResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LobbyLeaveResponse;
    }
  }

  /// <summary>Field number for the "lobbyUserListRequest" field.</summary>
  public const int LobbyUserListRequestFieldNumber = 15;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_LobbyUserListRequest LobbyUserListRequest {
    get { return payloadCase_ == PayloadOneofCase.LobbyUserListRequest ? (global::C2S_LobbyUserListRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LobbyUserListRequest;
    }
  }

  /// <summary>Field number for the "lobbyUserListResponse" field.</summary>
  public const int LobbyUserListResponseFieldNumber = 16;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_LobbyUserListResponse LobbyUserListResponse {
    get { return payloadCase_ == PayloadOneofCase.LobbyUserListResponse ? (global::S2C_LobbyUserListResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LobbyUserListResponse;
    }
  }

  /// <summary>Field number for the "lobbyUserDetailRequest" field.</summary>
  public const int LobbyUserDetailRequestFieldNumber = 17;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_LobbyUserDetailRequest LobbyUserDetailRequest {
    get { return payloadCase_ == PayloadOneofCase.LobbyUserDetailRequest ? (global::C2S_LobbyUserDetailRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LobbyUserDetailRequest;
    }
  }

  /// <summary>Field number for the "lobbyUserDetailResponse" field.</summary>
  public const int LobbyUserDetailResponseFieldNumber = 18;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_LobbyUserDetailResponse LobbyUserDetailResponse {
    get { return payloadCase_ == PayloadOneofCase.LobbyUserDetailResponse ? (global::S2C_LobbyUserDetailResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LobbyUserDetailResponse;
    }
  }

  /// <summary>Field number for the "roomListRequest" field.</summary>
  public const int RoomListRequestFieldNumber = 31;
  /// <summary>
  /// Room (31-50)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_RoomListRequest RoomListRequest {
    get { return payloadCase_ == PayloadOneofCase.RoomListRequest ? (global::C2S_RoomListRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.RoomListRequest;
    }
  }

  /// <summary>Field number for the "roomListResponse" field.</summary>
  public const int RoomListResponseFieldNumber = 32;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_RoomListResponse RoomListResponse {
    get { return payloadCase_ == PayloadOneofCase.RoomListResponse ? (global::S2C_RoomListResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.RoomListResponse;
    }
  }

  /// <summary>Field number for the "createRoomRequest" field.</summary>
  public const int CreateRoomRequestFieldNumber = 33;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_CreateRoomRequest CreateRoomRequest {
    get { return payloadCase_ == PayloadOneofCase.CreateRoomRequest ? (global::C2S_CreateRoomRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.CreateRoomRequest;
    }
  }

  /// <summary>Field number for the "createRoomResponse" field.</summary>
  public const int CreateRoomResponseFieldNumber = 34;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_CreateRoomResponse CreateRoomResponse {
    get { return payloadCase_ == PayloadOneofCase.CreateRoomResponse ? (global::S2C_CreateRoomResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.CreateRoomResponse;
    }
  }

  /// <summary>Field number for the "joinRoomRequest" field.</summary>
  public const int JoinRoomRequestFieldNumber = 35;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_JoinRoomRequest JoinRoomRequest {
    get { return payloadCase_ == PayloadOneofCase.JoinRoomRequest ? (global::C2S_JoinRoomRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.JoinRoomRequest;
    }
  }

  /// <summary>Field number for the "joinRoomResponse" field.</summary>
  public const int JoinRoomResponseFieldNumber = 36;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_JoinRoomResponse JoinRoomResponse {
    get { return payloadCase_ == PayloadOneofCase.JoinRoomResponse ? (global::S2C_JoinRoomResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.JoinRoomResponse;
    }
  }

  /// <summary>Field number for the "joinRoomNotification" field.</summary>
  public const int JoinRoomNotificationFieldNumber = 37;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_JoinRoomNotification JoinRoomNotification {
    get { return payloadCase_ == PayloadOneofCase.JoinRoomNotification ? (global::S2C_JoinRoomNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.JoinRoomNotification;
    }
  }

  /// <summary>Field number for the "leaveRoomRequest" field.</summary>
  public const int LeaveRoomRequestFieldNumber = 38;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_LeaveRoomRequest LeaveRoomRequest {
    get { return payloadCase_ == PayloadOneofCase.LeaveRoomRequest ? (global::C2S_LeaveRoomRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LeaveRoomRequest;
    }
  }

  /// <summary>Field number for the "leaveRoomResponse" field.</summary>
  public const int LeaveRoomResponseFieldNumber = 39;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_LeaveRoomResponse LeaveRoomResponse {
    get { return payloadCase_ == PayloadOneofCase.LeaveRoomResponse ? (global::S2C_LeaveRoomResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LeaveRoomResponse;
    }
  }

  /// <summary>Field number for the "leaveRoomNotification" field.</summary>
  public const int LeaveRoomNotificationFieldNumber = 40;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_LeaveRoomNotification LeaveRoomNotification {
    get { return payloadCase_ == PayloadOneofCase.LeaveRoomNotification ? (global::S2C_LeaveRoomNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LeaveRoomNotification;
    }
  }

  /// <summary>Field number for the "gamePrepareRequest" field.</summary>
  public const int GamePrepareRequestFieldNumber = 41;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_GamePrepareRequest GamePrepareRequest {
    get { return payloadCase_ == PayloadOneofCase.GamePrepareRequest ? (global::C2S_GamePrepareRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GamePrepareRequest;
    }
  }

  /// <summary>Field number for the "gamePrepareResponse" field.</summary>
  public const int GamePrepareResponseFieldNumber = 42;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_GamePrepareResponse GamePrepareResponse {
    get { return payloadCase_ == PayloadOneofCase.GamePrepareResponse ? (global::S2C_GamePrepareResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GamePrepareResponse;
    }
  }

  /// <summary>Field number for the "gamePrepareNotification" field.</summary>
  public const int GamePrepareNotificationFieldNumber = 43;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_GamePrepareNotification GamePrepareNotification {
    get { return payloadCase_ == PayloadOneofCase.GamePrepareNotification ? (global::S2C_GamePrepareNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GamePrepareNotification;
    }
  }

  /// <summary>Field number for the "gameStartRequest" field.</summary>
  public const int GameStartRequestFieldNumber = 51;
  /// <summary>
  /// Game start (51-60)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_GameStartRequest GameStartRequest {
    get { return payloadCase_ == PayloadOneofCase.GameStartRequest ? (global::C2S_GameStartRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GameStartRequest;
    }
  }

  /// <summary>Field number for the "gameStartNotification" field.</summary>
  public const int GameStartNotificationFieldNumber = 52;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_GameStartNotification GameStartNotification {
    get { return payloadCase_ == PayloadOneofCase.GameStartNotification ? (global::S2C_GameStartNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GameStartNotification;
    }
  }

  /// <summary>Field number for the "rollDiceRequest" field.</summary>
  public const int RollDiceRequestFieldNumber = 61;
  /// <summary>
  /// Game Play (61-90)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_RollDiceRequest RollDiceRequest {
    get { return payloadCase_ == PayloadOneofCase.RollDiceRequest ? (global::C2S_RollDiceRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.RollDiceRequest;
    }
  }

  /// <summary>Field number for the "rollDiceResponse" field.</summary>
  public const int RollDiceResponseFieldNumber = 62;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_RollDiceResponse RollDiceResponse {
    get { return payloadCase_ == PayloadOneofCase.RollDiceResponse ? (global::S2C_RollDiceResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.RollDiceResponse;
    }
  }

  /// <summary>Field number for the "rollDiceNotification" field.</summary>
  public const int RollDiceNotificationFieldNumber = 63;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_RollDiceNotification RollDiceNotification {
    get { return payloadCase_ == PayloadOneofCase.RollDiceNotification ? (global::S2C_RollDiceNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.RollDiceNotification;
    }
  }

  /// <summary>Field number for the "movePlayerBoardRequest" field.</summary>
  public const int MovePlayerBoardRequestFieldNumber = 64;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_MovePlayerBoardRequest MovePlayerBoardRequest {
    get { return payloadCase_ == PayloadOneofCase.MovePlayerBoardRequest ? (global::C2S_MovePlayerBoardRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.MovePlayerBoardRequest;
    }
  }

  /// <summary>Field number for the "movePlayerBoardResponse" field.</summary>
  public const int MovePlayerBoardResponseFieldNumber = 65;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_MovePlayerBoardResponse MovePlayerBoardResponse {
    get { return payloadCase_ == PayloadOneofCase.MovePlayerBoardResponse ? (global::S2C_MovePlayerBoardResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.MovePlayerBoardResponse;
    }
  }

  /// <summary>Field number for the "movePlayerBoardNotification" field.</summary>
  public const int MovePlayerBoardNotificationFieldNumber = 66;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_MovePlayerBoardNotification MovePlayerBoardNotification {
    get { return payloadCase_ == PayloadOneofCase.MovePlayerBoardNotification ? (global::S2C_MovePlayerBoardNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.MovePlayerBoardNotification;
    }
  }

  /// <summary>Field number for the "purchaseTileRequest" field.</summary>
  public const int PurchaseTileRequestFieldNumber = 67;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_PurchaseTileRequest PurchaseTileRequest {
    get { return payloadCase_ == PayloadOneofCase.PurchaseTileRequest ? (global::C2S_PurchaseTileRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.PurchaseTileRequest;
    }
  }

  /// <summary>Field number for the "purchaseTileResponse" field.</summary>
  public const int PurchaseTileResponseFieldNumber = 68;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_PurchaseTileResponse PurchaseTileResponse {
    get { return payloadCase_ == PayloadOneofCase.PurchaseTileResponse ? (global::S2C_PurchaseTileResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.PurchaseTileResponse;
    }
  }

  /// <summary>Field number for the "purchaseTileNotification" field.</summary>
  public const int PurchaseTileNotificationFieldNumber = 69;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_PurchaseTileNotification PurchaseTileNotification {
    get { return payloadCase_ == PayloadOneofCase.PurchaseTileNotification ? (global::S2C_PurchaseTileNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.PurchaseTileNotification;
    }
  }

  /// <summary>Field number for the "gameEndNotification" field.</summary>
  public const int GameEndNotificationFieldNumber = 70;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_GameEndNotification GameEndNotification {
    get { return payloadCase_ == PayloadOneofCase.GameEndNotification ? (global::S2C_GameEndNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GameEndNotification;
    }
  }

  /// <summary>Field number for the "purchaseTrophyRequest" field.</summary>
  public const int PurchaseTrophyRequestFieldNumber = 71;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_PurchaseTrophyRequest PurchaseTrophyRequest {
    get { return payloadCase_ == PayloadOneofCase.PurchaseTrophyRequest ? (global::C2S_PurchaseTrophyRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.PurchaseTrophyRequest;
    }
  }

  /// <summary>Field number for the "purchaseTrophyResponse" field.</summary>
  public const int PurchaseTrophyResponseFieldNumber = 72;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_PurchaseTrophyResponse PurchaseTrophyResponse {
    get { return payloadCase_ == PayloadOneofCase.PurchaseTrophyResponse ? (global::S2C_PurchaseTrophyResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.PurchaseTrophyResponse;
    }
  }

  /// <summary>Field number for the "purchaseTrophyNotification" field.</summary>
  public const int PurchaseTrophyNotificationFieldNumber = 73;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_PurchaseTrophyNotification PurchaseTrophyNotification {
    get { return payloadCase_ == PayloadOneofCase.PurchaseTrophyNotification ? (global::S2C_PurchaseTrophyNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.PurchaseTrophyNotification;
    }
  }

  /// <summary>Field number for the "tilePenaltyRequest" field.</summary>
  public const int TilePenaltyRequestFieldNumber = 74;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_TilePenaltyRequest TilePenaltyRequest {
    get { return payloadCase_ == PayloadOneofCase.TilePenaltyRequest ? (global::C2S_TilePenaltyRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.TilePenaltyRequest;
    }
  }

  /// <summary>Field number for the "tilePenaltyResponse" field.</summary>
  public const int TilePenaltyResponseFieldNumber = 75;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_TilePenaltyResponse TilePenaltyResponse {
    get { return payloadCase_ == PayloadOneofCase.TilePenaltyResponse ? (global::S2C_TilePenaltyResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.TilePenaltyResponse;
    }
  }

  /// <summary>Field number for the "tilePenaltyNotification" field.</summary>
  public const int TilePenaltyNotificationFieldNumber = 76;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_TilePenaltyNotification TilePenaltyNotification {
    get { return payloadCase_ == PayloadOneofCase.TilePenaltyNotification ? (global::S2C_TilePenaltyNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.TilePenaltyNotification;
    }
  }

  /// <summary>Field number for the "diceGameRequest" field.</summary>
  public const int DiceGameRequestFieldNumber = 77;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_DiceGameRequest DiceGameRequest {
    get { return payloadCase_ == PayloadOneofCase.DiceGameRequest ? (global::C2S_DiceGameRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DiceGameRequest;
    }
  }

  /// <summary>Field number for the "diceGameResponse" field.</summary>
  public const int DiceGameResponseFieldNumber = 78;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_DiceGameResponse DiceGameResponse {
    get { return payloadCase_ == PayloadOneofCase.DiceGameResponse ? (global::S2C_DiceGameResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DiceGameResponse;
    }
  }

  /// <summary>Field number for the "diceGameNotification" field.</summary>
  public const int DiceGameNotificationFieldNumber = 79;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_DiceGameNotification DiceGameNotification {
    get { return payloadCase_ == PayloadOneofCase.DiceGameNotification ? (global::S2C_DiceGameNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DiceGameNotification;
    }
  }

  /// <summary>Field number for the "turnEndRequest" field.</summary>
  public const int TurnEndRequestFieldNumber = 80;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_TurnEndRequest TurnEndRequest {
    get { return payloadCase_ == PayloadOneofCase.TurnEndRequest ? (global::C2S_TurnEndRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.TurnEndRequest;
    }
  }

  /// <summary>Field number for the "turnEndNotification" field.</summary>
  public const int TurnEndNotificationFieldNumber = 81;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_TurnEndNotification TurnEndNotification {
    get { return payloadCase_ == PayloadOneofCase.TurnEndNotification ? (global::S2C_TurnEndNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.TurnEndNotification;
    }
  }

  /// <summary>Field number for the "backToTheRoomRequest" field.</summary>
  public const int BackToTheRoomRequestFieldNumber = 91;
  /// <summary>
  /// Post Game (91-100)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_BackToTheRoomRequest BackToTheRoomRequest {
    get { return payloadCase_ == PayloadOneofCase.BackToTheRoomRequest ? (global::C2S_BackToTheRoomRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.BackToTheRoomRequest;
    }
  }

  /// <summary>Field number for the "backToTheRoomResponse" field.</summary>
  public const int BackToTheRoomResponseFieldNumber = 92;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_BackToTheRoomResponse BackToTheRoomResponse {
    get { return payloadCase_ == PayloadOneofCase.BackToTheRoomResponse ? (global::S2C_BackToTheRoomResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.BackToTheRoomResponse;
    }
  }

  /// <summary>Field number for the "backToTheRoomNotification" field.</summary>
  public const int BackToTheRoomNotificationFieldNumber = 93;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_BackToTheRoomNotification BackToTheRoomNotification {
    get { return payloadCase_ == PayloadOneofCase.BackToTheRoomNotification ? (global::S2C_BackToTheRoomNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.BackToTheRoomNotification;
    }
  }

  /// <summary>Field number for the "startMiniGameRequest" field.</summary>
  public const int StartMiniGameRequestFieldNumber = 101;
  /// <summary>
  /// Mini Game (101-110)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_StartMiniGameRequest StartMiniGameRequest {
    get { return payloadCase_ == PayloadOneofCase.StartMiniGameRequest ? (global::C2S_StartMiniGameRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.StartMiniGameRequest;
    }
  }

  /// <summary>Field number for the "iceMiniGameReadyNotification" field.</summary>
  public const int IceMiniGameReadyNotificationFieldNumber = 201;
  /// <summary>
  /// ice  (201)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_IceMiniGameReadyNotification IceMiniGameReadyNotification {
    get { return payloadCase_ == PayloadOneofCase.IceMiniGameReadyNotification ? (global::S2C_IceMiniGameReadyNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.IceMiniGameReadyNotification;
    }
  }

  /// <summary>Field number for the "iceGameReadyRequest" field.</summary>
  public const int IceGameReadyRequestFieldNumber = 202;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_IceGameReadyRequest IceGameReadyRequest {
    get { return payloadCase_ == PayloadOneofCase.IceGameReadyRequest ? (global::C2S_IceGameReadyRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.IceGameReadyRequest;
    }
  }

  /// <summary>Field number for the "iceGameReadyNotification" field.</summary>
  public const int IceGameReadyNotificationFieldNumber = 203;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_IceGameReadyNotification IceGameReadyNotification {
    get { return payloadCase_ == PayloadOneofCase.IceGameReadyNotification ? (global::S2C_IceGameReadyNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.IceGameReadyNotification;
    }
  }

  /// <summary>Field number for the "iceMiniGameStartNotification" field.</summary>
  public const int IceMiniGameStartNotificationFieldNumber = 204;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_IceMiniGameStartNotification IceMiniGameStartNotification {
    get { return payloadCase_ == PayloadOneofCase.IceMiniGameStartNotification ? (global::S2C_IceMiniGameStartNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.IceMiniGameStartNotification;
    }
  }

  /// <summary>Field number for the "icePlayerSyncRequest" field.</summary>
  public const int IcePlayerSyncRequestFieldNumber = 205;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_IcePlayerSyncRequest IcePlayerSyncRequest {
    get { return payloadCase_ == PayloadOneofCase.IcePlayerSyncRequest ? (global::C2S_IcePlayerSyncRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.IcePlayerSyncRequest;
    }
  }

  /// <summary>Field number for the "icePlayerSyncNotification" field.</summary>
  public const int IcePlayerSyncNotificationFieldNumber = 206;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_IcePlayerSyncNotification IcePlayerSyncNotification {
    get { return payloadCase_ == PayloadOneofCase.IcePlayerSyncNotification ? (global::S2C_IcePlayerSyncNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.IcePlayerSyncNotification;
    }
  }

  /// <summary>Field number for the "icePlayerDamageRequest" field.</summary>
  public const int IcePlayerDamageRequestFieldNumber = 207;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_IcePlayerDamageRequest IcePlayerDamageRequest {
    get { return payloadCase_ == PayloadOneofCase.IcePlayerDamageRequest ? (global::C2S_IcePlayerDamageRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.IcePlayerDamageRequest;
    }
  }

  /// <summary>Field number for the "icePlayerDamageNotification" field.</summary>
  public const int IcePlayerDamageNotificationFieldNumber = 208;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_IcePlayerDamageNotification IcePlayerDamageNotification {
    get { return payloadCase_ == PayloadOneofCase.IcePlayerDamageNotification ? (global::S2C_IcePlayerDamageNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.IcePlayerDamageNotification;
    }
  }

  /// <summary>Field number for the "icePlayerDeathNotification" field.</summary>
  public const int IcePlayerDeathNotificationFieldNumber = 209;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_IcePlayerDeathNotification IcePlayerDeathNotification {
    get { return payloadCase_ == PayloadOneofCase.IcePlayerDeathNotification ? (global::S2C_IcePlayerDeathNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.IcePlayerDeathNotification;
    }
  }

  /// <summary>Field number for the "iceGameOverNotification" field.</summary>
  public const int IceGameOverNotificationFieldNumber = 210;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_IceGameOverNotification IceGameOverNotification {
    get { return payloadCase_ == PayloadOneofCase.IceGameOverNotification ? (global::S2C_IceGameOverNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.IceGameOverNotification;
    }
  }

  /// <summary>Field number for the "iceMapSyncNotification" field.</summary>
  public const int IceMapSyncNotificationFieldNumber = 211;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_IceMapSyncNotification IceMapSyncNotification {
    get { return payloadCase_ == PayloadOneofCase.IceMapSyncNotification ? (global::S2C_IceMapSyncNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.IceMapSyncNotification;
    }
  }

  /// <summary>Field number for the "icePlayerExitNotification" field.</summary>
  public const int IcePlayerExitNotificationFieldNumber = 212;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_IcePlayerExitNotification IcePlayerExitNotification {
    get { return payloadCase_ == PayloadOneofCase.IcePlayerExitNotification ? (global::S2C_IcePlayerExitNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.IcePlayerExitNotification;
    }
  }

  /// <summary>Field number for the "dropMiniGameReadyNotification" field.</summary>
  public const int DropMiniGameReadyNotificationFieldNumber = 301;
  /// <summary>
  ///dropper (301)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_DropMiniGameReadyNotification DropMiniGameReadyNotification {
    get { return payloadCase_ == PayloadOneofCase.DropMiniGameReadyNotification ? (global::S2C_DropMiniGameReadyNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DropMiniGameReadyNotification;
    }
  }

  /// <summary>Field number for the "dropGameReadyRequest" field.</summary>
  public const int DropGameReadyRequestFieldNumber = 302;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_DropGameReadyRequest DropGameReadyRequest {
    get { return payloadCase_ == PayloadOneofCase.DropGameReadyRequest ? (global::C2S_DropGameReadyRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DropGameReadyRequest;
    }
  }

  /// <summary>Field number for the "dropGameReadyNotification" field.</summary>
  public const int DropGameReadyNotificationFieldNumber = 303;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_DropGameReadyNotification DropGameReadyNotification {
    get { return payloadCase_ == PayloadOneofCase.DropGameReadyNotification ? (global::S2C_DropGameReadyNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DropGameReadyNotification;
    }
  }

  /// <summary>Field number for the "dropMiniGameStartNotification" field.</summary>
  public const int DropMiniGameStartNotificationFieldNumber = 304;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_DropMiniGameStartNotification DropMiniGameStartNotification {
    get { return payloadCase_ == PayloadOneofCase.DropMiniGameStartNotification ? (global::S2C_DropMiniGameStartNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DropMiniGameStartNotification;
    }
  }

  /// <summary>Field number for the "dropPlayerSyncRequest" field.</summary>
  public const int DropPlayerSyncRequestFieldNumber = 305;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_DropPlayerSyncRequest DropPlayerSyncRequest {
    get { return payloadCase_ == PayloadOneofCase.DropPlayerSyncRequest ? (global::C2S_DropPlayerSyncRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DropPlayerSyncRequest;
    }
  }

  /// <summary>Field number for the "dropPlayerSyncNotification" field.</summary>
  public const int DropPlayerSyncNotificationFieldNumber = 306;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_DropPlayerSyncNotification DropPlayerSyncNotification {
    get { return payloadCase_ == PayloadOneofCase.DropPlayerSyncNotification ? (global::S2C_DropPlayerSyncNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DropPlayerSyncNotification;
    }
  }

  /// <summary>Field number for the "dropPlayerDeathNotification" field.</summary>
  public const int DropPlayerDeathNotificationFieldNumber = 307;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_DropPlayerDeathNotification DropPlayerDeathNotification {
    get { return payloadCase_ == PayloadOneofCase.DropPlayerDeathNotification ? (global::S2C_DropPlayerDeathNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DropPlayerDeathNotification;
    }
  }

  /// <summary>Field number for the "dropLevelStartNotification" field.</summary>
  public const int DropLevelStartNotificationFieldNumber = 308;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_DropLevelStartNotification DropLevelStartNotification {
    get { return payloadCase_ == PayloadOneofCase.DropLevelStartNotification ? (global::S2C_DropLevelStartNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DropLevelStartNotification;
    }
  }

  /// <summary>Field number for the "dropLevelEndNotification" field.</summary>
  public const int DropLevelEndNotificationFieldNumber = 309;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_DropLevelEndNotification DropLevelEndNotification {
    get { return payloadCase_ == PayloadOneofCase.DropLevelEndNotification ? (global::S2C_DropLevelEndNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DropLevelEndNotification;
    }
  }

  /// <summary>Field number for the "dropGameOverNotification" field.</summary>
  public const int DropGameOverNotificationFieldNumber = 310;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_DropGameOverNotification DropGameOverNotification {
    get { return payloadCase_ == PayloadOneofCase.DropGameOverNotification ? (global::S2C_DropGameOverNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DropGameOverNotification;
    }
  }

  /// <summary>Field number for the "danceMiniGameReadyNotification" field.</summary>
  public const int DanceMiniGameReadyNotificationFieldNumber = 401;
  /// <summary>
  /// dance (401)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_DanceMiniGameReadyNotification DanceMiniGameReadyNotification {
    get { return payloadCase_ == PayloadOneofCase.DanceMiniGameReadyNotification ? (global::S2C_DanceMiniGameReadyNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DanceMiniGameReadyNotification;
    }
  }

  /// <summary>Field number for the "danceReadyRequest" field.</summary>
  public const int DanceReadyRequestFieldNumber = 402;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_DanceReadyRequest DanceReadyRequest {
    get { return payloadCase_ == PayloadOneofCase.DanceReadyRequest ? (global::C2S_DanceReadyRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DanceReadyRequest;
    }
  }

  /// <summary>Field number for the "danceReadyNotification" field.</summary>
  public const int DanceReadyNotificationFieldNumber = 403;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_DanceReadyNotification DanceReadyNotification {
    get { return payloadCase_ == PayloadOneofCase.DanceReadyNotification ? (global::S2C_DanceReadyNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DanceReadyNotification;
    }
  }

  /// <summary>Field number for the "danceStartNotification" field.</summary>
  public const int DanceStartNotificationFieldNumber = 404;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_DanceStartNotification DanceStartNotification {
    get { return payloadCase_ == PayloadOneofCase.DanceStartNotification ? (global::S2C_DanceStartNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DanceStartNotification;
    }
  }

  /// <summary>Field number for the "danceTableCreateRequest" field.</summary>
  public const int DanceTableCreateRequestFieldNumber = 405;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_DanceTableCreateRequest DanceTableCreateRequest {
    get { return payloadCase_ == PayloadOneofCase.DanceTableCreateRequest ? (global::C2S_DanceTableCreateRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DanceTableCreateRequest;
    }
  }

  /// <summary>Field number for the "danceTableNotification" field.</summary>
  public const int DanceTableNotificationFieldNumber = 406;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_DanceTableNotification DanceTableNotification {
    get { return payloadCase_ == PayloadOneofCase.DanceTableNotification ? (global::S2C_DanceTableNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DanceTableNotification;
    }
  }

  /// <summary>Field number for the "danceKeyPressRequest" field.</summary>
  public const int DanceKeyPressRequestFieldNumber = 407;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_DanceKeyPressRequest DanceKeyPressRequest {
    get { return payloadCase_ == PayloadOneofCase.DanceKeyPressRequest ? (global::C2S_DanceKeyPressRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DanceKeyPressRequest;
    }
  }

  /// <summary>Field number for the "danceKeyPressResponse" field.</summary>
  public const int DanceKeyPressResponseFieldNumber = 408;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_DanceKeyPressResponse DanceKeyPressResponse {
    get { return payloadCase_ == PayloadOneofCase.DanceKeyPressResponse ? (global::S2C_DanceKeyPressResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DanceKeyPressResponse;
    }
  }

  /// <summary>Field number for the "danceKeyPressNotification" field.</summary>
  public const int DanceKeyPressNotificationFieldNumber = 409;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_DanceKeyPressNotification DanceKeyPressNotification {
    get { return payloadCase_ == PayloadOneofCase.DanceKeyPressNotification ? (global::S2C_DanceKeyPressNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DanceKeyPressNotification;
    }
  }

  /// <summary>Field number for the "danceGameOverNotification" field.</summary>
  public const int DanceGameOverNotificationFieldNumber = 410;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_DanceGameOverNotification DanceGameOverNotification {
    get { return payloadCase_ == PayloadOneofCase.DanceGameOverNotification ? (global::S2C_DanceGameOverNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DanceGameOverNotification;
    }
  }

  /// <summary>Field number for the "danceCloseSocketNotification" field.</summary>
  public const int DanceCloseSocketNotificationFieldNumber = 411;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_DanceCloseSocketNotification DanceCloseSocketNotification {
    get { return payloadCase_ == PayloadOneofCase.DanceCloseSocketNotification ? (global::S2C_DanceCloseSocketNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DanceCloseSocketNotification;
    }
  }

  /// <summary>Field number for the "danceTableCompleteRequest" field.</summary>
  public const int DanceTableCompleteRequestFieldNumber = 412;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_DanceTableCompleteRequest DanceTableCompleteRequest {
    get { return payloadCase_ == PayloadOneofCase.DanceTableCompleteRequest ? (global::C2S_DanceTableCompleteRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DanceTableCompleteRequest;
    }
  }

  /// <summary>Field number for the "bombMiniGameReadyNotification" field.</summary>
  public const int BombMiniGameReadyNotificationFieldNumber = 501;
  /// <summary>
  ///Bomb (501)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_BombMiniGameReadyNotification BombMiniGameReadyNotification {
    get { return payloadCase_ == PayloadOneofCase.BombMiniGameReadyNotification ? (global::S2C_BombMiniGameReadyNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.BombMiniGameReadyNotification;
    }
  }

  /// <summary>Field number for the "bombGameReadyRequest" field.</summary>
  public const int BombGameReadyRequestFieldNumber = 502;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_BombGameReadyRequest BombGameReadyRequest {
    get { return payloadCase_ == PayloadOneofCase.BombGameReadyRequest ? (global::C2S_BombGameReadyRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.BombGameReadyRequest;
    }
  }

  /// <summary>Field number for the "bombGameReadyNotification" field.</summary>
  public const int BombGameReadyNotificationFieldNumber = 503;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_BombGameReadyNotification BombGameReadyNotification {
    get { return payloadCase_ == PayloadOneofCase.BombGameReadyNotification ? (global::S2C_BombGameReadyNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.BombGameReadyNotification;
    }
  }

  /// <summary>Field number for the "bombMiniGameStartNotification" field.</summary>
  public const int BombMiniGameStartNotificationFieldNumber = 504;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_BombMiniGameStartNotification BombMiniGameStartNotification {
    get { return payloadCase_ == PayloadOneofCase.BombMiniGameStartNotification ? (global::S2C_BombMiniGameStartNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.BombMiniGameStartNotification;
    }
  }

  /// <summary>Field number for the "bombPlayerSyncRequest" field.</summary>
  public const int BombPlayerSyncRequestFieldNumber = 505;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_BombPlayerSyncRequest BombPlayerSyncRequest {
    get { return payloadCase_ == PayloadOneofCase.BombPlayerSyncRequest ? (global::C2S_BombPlayerSyncRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.BombPlayerSyncRequest;
    }
  }

  /// <summary>Field number for the "bombPlayerSyncNotification" field.</summary>
  public const int BombPlayerSyncNotificationFieldNumber = 506;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_BombPlayerSyncNotification BombPlayerSyncNotification {
    get { return payloadCase_ == PayloadOneofCase.BombPlayerSyncNotification ? (global::S2C_BombPlayerSyncNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.BombPlayerSyncNotification;
    }
  }

  /// <summary>Field number for the "bombPlayerDeathNotification" field.</summary>
  public const int BombPlayerDeathNotificationFieldNumber = 507;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_BombPlayerDeathNotification BombPlayerDeathNotification {
    get { return payloadCase_ == PayloadOneofCase.BombPlayerDeathNotification ? (global::S2C_BombPlayerDeathNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.BombPlayerDeathNotification;
    }
  }

  /// <summary>Field number for the "bombMoveRequest" field.</summary>
  public const int BombMoveRequestFieldNumber = 508;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_BombMoveRequest BombMoveRequest {
    get { return payloadCase_ == PayloadOneofCase.BombMoveRequest ? (global::C2S_BombMoveRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.BombMoveRequest;
    }
  }

  /// <summary>Field number for the "bombMoveNotification" field.</summary>
  public const int BombMoveNotificationFieldNumber = 509;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_BombMoveNotification BombMoveNotification {
    get { return payloadCase_ == PayloadOneofCase.BombMoveNotification ? (global::S2C_BombMoveNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.BombMoveNotification;
    }
  }

  /// <summary>Field number for the "bombGameOverNotification" field.</summary>
  public const int BombGameOverNotificationFieldNumber = 510;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_BombGameOverNotification BombGameOverNotification {
    get { return payloadCase_ == PayloadOneofCase.BombGameOverNotification ? (global::S2C_BombGameOverNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.BombGameOverNotification;
    }
  }

  /// <summary>Field number for the "dartMiniGameReadyNotification" field.</summary>
  public const int DartMiniGameReadyNotificationFieldNumber = 601;
  /// <summary>
  /// Dart(601)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_DartMiniGameReadyNotification DartMiniGameReadyNotification {
    get { return payloadCase_ == PayloadOneofCase.DartMiniGameReadyNotification ? (global::S2C_DartMiniGameReadyNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DartMiniGameReadyNotification;
    }
  }

  /// <summary>Field number for the "dartGameReadyRequest" field.</summary>
  public const int DartGameReadyRequestFieldNumber = 602;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_DartGameReadyRequest DartGameReadyRequest {
    get { return payloadCase_ == PayloadOneofCase.DartGameReadyRequest ? (global::C2S_DartGameReadyRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DartGameReadyRequest;
    }
  }

  /// <summary>Field number for the "dartGameReadyNotification" field.</summary>
  public const int DartGameReadyNotificationFieldNumber = 603;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_DartGameReadyNotification DartGameReadyNotification {
    get { return payloadCase_ == PayloadOneofCase.DartGameReadyNotification ? (global::S2C_DartGameReadyNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DartGameReadyNotification;
    }
  }

  /// <summary>Field number for the "dartMiniGameStartNotification" field.</summary>
  public const int DartMiniGameStartNotificationFieldNumber = 604;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_DartMiniGameStartNotification DartMiniGameStartNotification {
    get { return payloadCase_ == PayloadOneofCase.DartMiniGameStartNotification ? (global::S2C_DartMiniGameStartNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DartMiniGameStartNotification;
    }
  }

  /// <summary>Field number for the "dartGameThrowRequest" field.</summary>
  public const int DartGameThrowRequestFieldNumber = 605;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_DartGameThrowRequest DartGameThrowRequest {
    get { return payloadCase_ == PayloadOneofCase.DartGameThrowRequest ? (global::C2S_DartGameThrowRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DartGameThrowRequest;
    }
  }

  /// <summary>Field number for the "dartGameThrowNotification" field.</summary>
  public const int DartGameThrowNotificationFieldNumber = 606;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_DartGameThrowNotification DartGameThrowNotification {
    get { return payloadCase_ == PayloadOneofCase.DartGameThrowNotification ? (global::S2C_DartGameThrowNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DartGameThrowNotification;
    }
  }

  /// <summary>Field number for the "dartGameOverNotification" field.</summary>
  public const int DartGameOverNotificationFieldNumber = 607;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_DartGameOverNotification DartGameOverNotification {
    get { return payloadCase_ == PayloadOneofCase.DartGameOverNotification ? (global::S2C_DartGameOverNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DartGameOverNotification;
    }
  }

  /// <summary>Field number for the "dartPannelSyncRequest" field.</summary>
  public const int DartPannelSyncRequestFieldNumber = 608;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_DartPannelSyncRequest DartPannelSyncRequest {
    get { return payloadCase_ == PayloadOneofCase.DartPannelSyncRequest ? (global::C2S_DartPannelSyncRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DartPannelSyncRequest;
    }
  }

  /// <summary>Field number for the "dartPannelSyncNotification" field.</summary>
  public const int DartPannelSyncNotificationFieldNumber = 609;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_DartPannelSyncNotification DartPannelSyncNotification {
    get { return payloadCase_ == PayloadOneofCase.DartPannelSyncNotification ? (global::S2C_DartPannelSyncNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DartPannelSyncNotification;
    }
  }

  /// <summary>Field number for the "dartSyncRequest" field.</summary>
  public const int DartSyncRequestFieldNumber = 610;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2S_DartSyncRequest DartSyncRequest {
    get { return payloadCase_ == PayloadOneofCase.DartSyncRequest ? (global::C2S_DartSyncRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DartSyncRequest;
    }
  }

  /// <summary>Field number for the "dartSyncNotification" field.</summary>
  public const int DartSyncNotificationFieldNumber = 611;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2C_DartSyncNotification DartSyncNotification {
    get { return payloadCase_ == PayloadOneofCase.DartSyncNotification ? (global::S2C_DartSyncNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DartSyncNotification;
    }
  }

  private object payload_;
  /// <summary>Enum of possible cases for the "payload" oneof.</summary>
  public enum PayloadOneofCase {
    None = 0,
    RegisterRequest = 1,
    RegisterResponse = 2,
    LoginRequest = 3,
    LoginResponse = 4,
    LogoutRequest = 5,
    CloseSocketNotification = 8,
    LobbyJoinRequest = 11,
    LobbyJoinResponse = 12,
    LobbyLeaveRequest = 13,
    LobbyLeaveResponse = 14,
    LobbyUserListRequest = 15,
    LobbyUserListResponse = 16,
    LobbyUserDetailRequest = 17,
    LobbyUserDetailResponse = 18,
    RoomListRequest = 31,
    RoomListResponse = 32,
    CreateRoomRequest = 33,
    CreateRoomResponse = 34,
    JoinRoomRequest = 35,
    JoinRoomResponse = 36,
    JoinRoomNotification = 37,
    LeaveRoomRequest = 38,
    LeaveRoomResponse = 39,
    LeaveRoomNotification = 40,
    GamePrepareRequest = 41,
    GamePrepareResponse = 42,
    GamePrepareNotification = 43,
    GameStartRequest = 51,
    GameStartNotification = 52,
    RollDiceRequest = 61,
    RollDiceResponse = 62,
    RollDiceNotification = 63,
    MovePlayerBoardRequest = 64,
    MovePlayerBoardResponse = 65,
    MovePlayerBoardNotification = 66,
    PurchaseTileRequest = 67,
    PurchaseTileResponse = 68,
    PurchaseTileNotification = 69,
    GameEndNotification = 70,
    PurchaseTrophyRequest = 71,
    PurchaseTrophyResponse = 72,
    PurchaseTrophyNotification = 73,
    TilePenaltyRequest = 74,
    TilePenaltyResponse = 75,
    TilePenaltyNotification = 76,
    DiceGameRequest = 77,
    DiceGameResponse = 78,
    DiceGameNotification = 79,
    TurnEndRequest = 80,
    TurnEndNotification = 81,
    BackToTheRoomRequest = 91,
    BackToTheRoomResponse = 92,
    BackToTheRoomNotification = 93,
    StartMiniGameRequest = 101,
    IceMiniGameReadyNotification = 201,
    IceGameReadyRequest = 202,
    IceGameReadyNotification = 203,
    IceMiniGameStartNotification = 204,
    IcePlayerSyncRequest = 205,
    IcePlayerSyncNotification = 206,
    IcePlayerDamageRequest = 207,
    IcePlayerDamageNotification = 208,
    IcePlayerDeathNotification = 209,
    IceGameOverNotification = 210,
    IceMapSyncNotification = 211,
    IcePlayerExitNotification = 212,
    DropMiniGameReadyNotification = 301,
    DropGameReadyRequest = 302,
    DropGameReadyNotification = 303,
    DropMiniGameStartNotification = 304,
    DropPlayerSyncRequest = 305,
    DropPlayerSyncNotification = 306,
    DropPlayerDeathNotification = 307,
    DropLevelStartNotification = 308,
    DropLevelEndNotification = 309,
    DropGameOverNotification = 310,
    DanceMiniGameReadyNotification = 401,
    DanceReadyRequest = 402,
    DanceReadyNotification = 403,
    DanceStartNotification = 404,
    DanceTableCreateRequest = 405,
    DanceTableNotification = 406,
    DanceKeyPressRequest = 407,
    DanceKeyPressResponse = 408,
    DanceKeyPressNotification = 409,
    DanceGameOverNotification = 410,
    DanceCloseSocketNotification = 411,
    DanceTableCompleteRequest = 412,
    BombMiniGameReadyNotification = 501,
    BombGameReadyRequest = 502,
    BombGameReadyNotification = 503,
    BombMiniGameStartNotification = 504,
    BombPlayerSyncRequest = 505,
    BombPlayerSyncNotification = 506,
    BombPlayerDeathNotification = 507,
    BombMoveRequest = 508,
    BombMoveNotification = 509,
    BombGameOverNotification = 510,
    DartMiniGameReadyNotification = 601,
    DartGameReadyRequest = 602,
    DartGameReadyNotification = 603,
    DartMiniGameStartNotification = 604,
    DartGameThrowRequest = 605,
    DartGameThrowNotification = 606,
    DartGameOverNotification = 607,
    DartPannelSyncRequest = 608,
    DartPannelSyncNotification = 609,
    DartSyncRequest = 610,
    DartSyncNotification = 611,
  }
  private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PayloadOneofCase PayloadCase {
    get { return payloadCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayload() {
    payloadCase_ = PayloadOneofCase.None;
    payload_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GamePacket);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GamePacket other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RegisterRequest, other.RegisterRequest)) return false;
    if (!object.Equals(RegisterResponse, other.RegisterResponse)) return false;
    if (!object.Equals(LoginRequest, other.LoginRequest)) return false;
    if (!object.Equals(LoginResponse, other.LoginResponse)) return false;
    if (!object.Equals(LogoutRequest, other.LogoutRequest)) return false;
    if (!object.Equals(CloseSocketNotification, other.CloseSocketNotification)) return false;
    if (!object.Equals(LobbyJoinRequest, other.LobbyJoinRequest)) return false;
    if (!object.Equals(LobbyJoinResponse, other.LobbyJoinResponse)) return false;
    if (!object.Equals(LobbyLeaveRequest, other.LobbyLeaveRequest)) return false;
    if (!object.Equals(LobbyLeaveResponse, other.LobbyLeaveResponse)) return false;
    if (!object.Equals(LobbyUserListRequest, other.LobbyUserListRequest)) return false;
    if (!object.Equals(LobbyUserListResponse, other.LobbyUserListResponse)) return false;
    if (!object.Equals(LobbyUserDetailRequest, other.LobbyUserDetailRequest)) return false;
    if (!object.Equals(LobbyUserDetailResponse, other.LobbyUserDetailResponse)) return false;
    if (!object.Equals(RoomListRequest, other.RoomListRequest)) return false;
    if (!object.Equals(RoomListResponse, other.RoomListResponse)) return false;
    if (!object.Equals(CreateRoomRequest, other.CreateRoomRequest)) return false;
    if (!object.Equals(CreateRoomResponse, other.CreateRoomResponse)) return false;
    if (!object.Equals(JoinRoomRequest, other.JoinRoomRequest)) return false;
    if (!object.Equals(JoinRoomResponse, other.JoinRoomResponse)) return false;
    if (!object.Equals(JoinRoomNotification, other.JoinRoomNotification)) return false;
    if (!object.Equals(LeaveRoomRequest, other.LeaveRoomRequest)) return false;
    if (!object.Equals(LeaveRoomResponse, other.LeaveRoomResponse)) return false;
    if (!object.Equals(LeaveRoomNotification, other.LeaveRoomNotification)) return false;
    if (!object.Equals(GamePrepareRequest, other.GamePrepareRequest)) return false;
    if (!object.Equals(GamePrepareResponse, other.GamePrepareResponse)) return false;
    if (!object.Equals(GamePrepareNotification, other.GamePrepareNotification)) return false;
    if (!object.Equals(GameStartRequest, other.GameStartRequest)) return false;
    if (!object.Equals(GameStartNotification, other.GameStartNotification)) return false;
    if (!object.Equals(RollDiceRequest, other.RollDiceRequest)) return false;
    if (!object.Equals(RollDiceResponse, other.RollDiceResponse)) return false;
    if (!object.Equals(RollDiceNotification, other.RollDiceNotification)) return false;
    if (!object.Equals(MovePlayerBoardRequest, other.MovePlayerBoardRequest)) return false;
    if (!object.Equals(MovePlayerBoardResponse, other.MovePlayerBoardResponse)) return false;
    if (!object.Equals(MovePlayerBoardNotification, other.MovePlayerBoardNotification)) return false;
    if (!object.Equals(PurchaseTileRequest, other.PurchaseTileRequest)) return false;
    if (!object.Equals(PurchaseTileResponse, other.PurchaseTileResponse)) return false;
    if (!object.Equals(PurchaseTileNotification, other.PurchaseTileNotification)) return false;
    if (!object.Equals(GameEndNotification, other.GameEndNotification)) return false;
    if (!object.Equals(PurchaseTrophyRequest, other.PurchaseTrophyRequest)) return false;
    if (!object.Equals(PurchaseTrophyResponse, other.PurchaseTrophyResponse)) return false;
    if (!object.Equals(PurchaseTrophyNotification, other.PurchaseTrophyNotification)) return false;
    if (!object.Equals(TilePenaltyRequest, other.TilePenaltyRequest)) return false;
    if (!object.Equals(TilePenaltyResponse, other.TilePenaltyResponse)) return false;
    if (!object.Equals(TilePenaltyNotification, other.TilePenaltyNotification)) return false;
    if (!object.Equals(DiceGameRequest, other.DiceGameRequest)) return false;
    if (!object.Equals(DiceGameResponse, other.DiceGameResponse)) return false;
    if (!object.Equals(DiceGameNotification, other.DiceGameNotification)) return false;
    if (!object.Equals(TurnEndRequest, other.TurnEndRequest)) return false;
    if (!object.Equals(TurnEndNotification, other.TurnEndNotification)) return false;
    if (!object.Equals(BackToTheRoomRequest, other.BackToTheRoomRequest)) return false;
    if (!object.Equals(BackToTheRoomResponse, other.BackToTheRoomResponse)) return false;
    if (!object.Equals(BackToTheRoomNotification, other.BackToTheRoomNotification)) return false;
    if (!object.Equals(StartMiniGameRequest, other.StartMiniGameRequest)) return false;
    if (!object.Equals(IceMiniGameReadyNotification, other.IceMiniGameReadyNotification)) return false;
    if (!object.Equals(IceGameReadyRequest, other.IceGameReadyRequest)) return false;
    if (!object.Equals(IceGameReadyNotification, other.IceGameReadyNotification)) return false;
    if (!object.Equals(IceMiniGameStartNotification, other.IceMiniGameStartNotification)) return false;
    if (!object.Equals(IcePlayerSyncRequest, other.IcePlayerSyncRequest)) return false;
    if (!object.Equals(IcePlayerSyncNotification, other.IcePlayerSyncNotification)) return false;
    if (!object.Equals(IcePlayerDamageRequest, other.IcePlayerDamageRequest)) return false;
    if (!object.Equals(IcePlayerDamageNotification, other.IcePlayerDamageNotification)) return false;
    if (!object.Equals(IcePlayerDeathNotification, other.IcePlayerDeathNotification)) return false;
    if (!object.Equals(IceGameOverNotification, other.IceGameOverNotification)) return false;
    if (!object.Equals(IceMapSyncNotification, other.IceMapSyncNotification)) return false;
    if (!object.Equals(IcePlayerExitNotification, other.IcePlayerExitNotification)) return false;
    if (!object.Equals(DropMiniGameReadyNotification, other.DropMiniGameReadyNotification)) return false;
    if (!object.Equals(DropGameReadyRequest, other.DropGameReadyRequest)) return false;
    if (!object.Equals(DropGameReadyNotification, other.DropGameReadyNotification)) return false;
    if (!object.Equals(DropMiniGameStartNotification, other.DropMiniGameStartNotification)) return false;
    if (!object.Equals(DropPlayerSyncRequest, other.DropPlayerSyncRequest)) return false;
    if (!object.Equals(DropPlayerSyncNotification, other.DropPlayerSyncNotification)) return false;
    if (!object.Equals(DropPlayerDeathNotification, other.DropPlayerDeathNotification)) return false;
    if (!object.Equals(DropLevelStartNotification, other.DropLevelStartNotification)) return false;
    if (!object.Equals(DropLevelEndNotification, other.DropLevelEndNotification)) return false;
    if (!object.Equals(DropGameOverNotification, other.DropGameOverNotification)) return false;
    if (!object.Equals(DanceMiniGameReadyNotification, other.DanceMiniGameReadyNotification)) return false;
    if (!object.Equals(DanceReadyRequest, other.DanceReadyRequest)) return false;
    if (!object.Equals(DanceReadyNotification, other.DanceReadyNotification)) return false;
    if (!object.Equals(DanceStartNotification, other.DanceStartNotification)) return false;
    if (!object.Equals(DanceTableCreateRequest, other.DanceTableCreateRequest)) return false;
    if (!object.Equals(DanceTableNotification, other.DanceTableNotification)) return false;
    if (!object.Equals(DanceKeyPressRequest, other.DanceKeyPressRequest)) return false;
    if (!object.Equals(DanceKeyPressResponse, other.DanceKeyPressResponse)) return false;
    if (!object.Equals(DanceKeyPressNotification, other.DanceKeyPressNotification)) return false;
    if (!object.Equals(DanceGameOverNotification, other.DanceGameOverNotification)) return false;
    if (!object.Equals(DanceCloseSocketNotification, other.DanceCloseSocketNotification)) return false;
    if (!object.Equals(DanceTableCompleteRequest, other.DanceTableCompleteRequest)) return false;
    if (!object.Equals(BombMiniGameReadyNotification, other.BombMiniGameReadyNotification)) return false;
    if (!object.Equals(BombGameReadyRequest, other.BombGameReadyRequest)) return false;
    if (!object.Equals(BombGameReadyNotification, other.BombGameReadyNotification)) return false;
    if (!object.Equals(BombMiniGameStartNotification, other.BombMiniGameStartNotification)) return false;
    if (!object.Equals(BombPlayerSyncRequest, other.BombPlayerSyncRequest)) return false;
    if (!object.Equals(BombPlayerSyncNotification, other.BombPlayerSyncNotification)) return false;
    if (!object.Equals(BombPlayerDeathNotification, other.BombPlayerDeathNotification)) return false;
    if (!object.Equals(BombMoveRequest, other.BombMoveRequest)) return false;
    if (!object.Equals(BombMoveNotification, other.BombMoveNotification)) return false;
    if (!object.Equals(BombGameOverNotification, other.BombGameOverNotification)) return false;
    if (!object.Equals(DartMiniGameReadyNotification, other.DartMiniGameReadyNotification)) return false;
    if (!object.Equals(DartGameReadyRequest, other.DartGameReadyRequest)) return false;
    if (!object.Equals(DartGameReadyNotification, other.DartGameReadyNotification)) return false;
    if (!object.Equals(DartMiniGameStartNotification, other.DartMiniGameStartNotification)) return false;
    if (!object.Equals(DartGameThrowRequest, other.DartGameThrowRequest)) return false;
    if (!object.Equals(DartGameThrowNotification, other.DartGameThrowNotification)) return false;
    if (!object.Equals(DartGameOverNotification, other.DartGameOverNotification)) return false;
    if (!object.Equals(DartPannelSyncRequest, other.DartPannelSyncRequest)) return false;
    if (!object.Equals(DartPannelSyncNotification, other.DartPannelSyncNotification)) return false;
    if (!object.Equals(DartSyncRequest, other.DartSyncRequest)) return false;
    if (!object.Equals(DartSyncNotification, other.DartSyncNotification)) return false;
    if (PayloadCase != other.PayloadCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (payloadCase_ == PayloadOneofCase.RegisterRequest) hash ^= RegisterRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.RegisterResponse) hash ^= RegisterResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.LoginRequest) hash ^= LoginRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.LoginResponse) hash ^= LoginResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.LogoutRequest) hash ^= LogoutRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.CloseSocketNotification) hash ^= CloseSocketNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.LobbyJoinRequest) hash ^= LobbyJoinRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.LobbyJoinResponse) hash ^= LobbyJoinResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.LobbyLeaveRequest) hash ^= LobbyLeaveRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.LobbyLeaveResponse) hash ^= LobbyLeaveResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.LobbyUserListRequest) hash ^= LobbyUserListRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.LobbyUserListResponse) hash ^= LobbyUserListResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.LobbyUserDetailRequest) hash ^= LobbyUserDetailRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.LobbyUserDetailResponse) hash ^= LobbyUserDetailResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.RoomListRequest) hash ^= RoomListRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.RoomListResponse) hash ^= RoomListResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.CreateRoomRequest) hash ^= CreateRoomRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.CreateRoomResponse) hash ^= CreateRoomResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.JoinRoomRequest) hash ^= JoinRoomRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.JoinRoomResponse) hash ^= JoinRoomResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.JoinRoomNotification) hash ^= JoinRoomNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.LeaveRoomRequest) hash ^= LeaveRoomRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.LeaveRoomResponse) hash ^= LeaveRoomResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.LeaveRoomNotification) hash ^= LeaveRoomNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.GamePrepareRequest) hash ^= GamePrepareRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.GamePrepareResponse) hash ^= GamePrepareResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.GamePrepareNotification) hash ^= GamePrepareNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.GameStartRequest) hash ^= GameStartRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.GameStartNotification) hash ^= GameStartNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.RollDiceRequest) hash ^= RollDiceRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.RollDiceResponse) hash ^= RollDiceResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.RollDiceNotification) hash ^= RollDiceNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.MovePlayerBoardRequest) hash ^= MovePlayerBoardRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.MovePlayerBoardResponse) hash ^= MovePlayerBoardResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.MovePlayerBoardNotification) hash ^= MovePlayerBoardNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.PurchaseTileRequest) hash ^= PurchaseTileRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.PurchaseTileResponse) hash ^= PurchaseTileResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.PurchaseTileNotification) hash ^= PurchaseTileNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.GameEndNotification) hash ^= GameEndNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.PurchaseTrophyRequest) hash ^= PurchaseTrophyRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.PurchaseTrophyResponse) hash ^= PurchaseTrophyResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.PurchaseTrophyNotification) hash ^= PurchaseTrophyNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.TilePenaltyRequest) hash ^= TilePenaltyRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.TilePenaltyResponse) hash ^= TilePenaltyResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.TilePenaltyNotification) hash ^= TilePenaltyNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DiceGameRequest) hash ^= DiceGameRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DiceGameResponse) hash ^= DiceGameResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DiceGameNotification) hash ^= DiceGameNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.TurnEndRequest) hash ^= TurnEndRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.TurnEndNotification) hash ^= TurnEndNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.BackToTheRoomRequest) hash ^= BackToTheRoomRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.BackToTheRoomResponse) hash ^= BackToTheRoomResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.BackToTheRoomNotification) hash ^= BackToTheRoomNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.StartMiniGameRequest) hash ^= StartMiniGameRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.IceMiniGameReadyNotification) hash ^= IceMiniGameReadyNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.IceGameReadyRequest) hash ^= IceGameReadyRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.IceGameReadyNotification) hash ^= IceGameReadyNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.IceMiniGameStartNotification) hash ^= IceMiniGameStartNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.IcePlayerSyncRequest) hash ^= IcePlayerSyncRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.IcePlayerSyncNotification) hash ^= IcePlayerSyncNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.IcePlayerDamageRequest) hash ^= IcePlayerDamageRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.IcePlayerDamageNotification) hash ^= IcePlayerDamageNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.IcePlayerDeathNotification) hash ^= IcePlayerDeathNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.IceGameOverNotification) hash ^= IceGameOverNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.IceMapSyncNotification) hash ^= IceMapSyncNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.IcePlayerExitNotification) hash ^= IcePlayerExitNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DropMiniGameReadyNotification) hash ^= DropMiniGameReadyNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DropGameReadyRequest) hash ^= DropGameReadyRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DropGameReadyNotification) hash ^= DropGameReadyNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DropMiniGameStartNotification) hash ^= DropMiniGameStartNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DropPlayerSyncRequest) hash ^= DropPlayerSyncRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DropPlayerSyncNotification) hash ^= DropPlayerSyncNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DropPlayerDeathNotification) hash ^= DropPlayerDeathNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DropLevelStartNotification) hash ^= DropLevelStartNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DropLevelEndNotification) hash ^= DropLevelEndNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DropGameOverNotification) hash ^= DropGameOverNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DanceMiniGameReadyNotification) hash ^= DanceMiniGameReadyNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DanceReadyRequest) hash ^= DanceReadyRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DanceReadyNotification) hash ^= DanceReadyNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DanceStartNotification) hash ^= DanceStartNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DanceTableCreateRequest) hash ^= DanceTableCreateRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DanceTableNotification) hash ^= DanceTableNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DanceKeyPressRequest) hash ^= DanceKeyPressRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DanceKeyPressResponse) hash ^= DanceKeyPressResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DanceKeyPressNotification) hash ^= DanceKeyPressNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DanceGameOverNotification) hash ^= DanceGameOverNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DanceCloseSocketNotification) hash ^= DanceCloseSocketNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DanceTableCompleteRequest) hash ^= DanceTableCompleteRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.BombMiniGameReadyNotification) hash ^= BombMiniGameReadyNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.BombGameReadyRequest) hash ^= BombGameReadyRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.BombGameReadyNotification) hash ^= BombGameReadyNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.BombMiniGameStartNotification) hash ^= BombMiniGameStartNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.BombPlayerSyncRequest) hash ^= BombPlayerSyncRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.BombPlayerSyncNotification) hash ^= BombPlayerSyncNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.BombPlayerDeathNotification) hash ^= BombPlayerDeathNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.BombMoveRequest) hash ^= BombMoveRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.BombMoveNotification) hash ^= BombMoveNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.BombGameOverNotification) hash ^= BombGameOverNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DartMiniGameReadyNotification) hash ^= DartMiniGameReadyNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DartGameReadyRequest) hash ^= DartGameReadyRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DartGameReadyNotification) hash ^= DartGameReadyNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DartMiniGameStartNotification) hash ^= DartMiniGameStartNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DartGameThrowRequest) hash ^= DartGameThrowRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DartGameThrowNotification) hash ^= DartGameThrowNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DartGameOverNotification) hash ^= DartGameOverNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DartPannelSyncRequest) hash ^= DartPannelSyncRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DartPannelSyncNotification) hash ^= DartPannelSyncNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DartSyncRequest) hash ^= DartSyncRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DartSyncNotification) hash ^= DartSyncNotification.GetHashCode();
    hash ^= (int) payloadCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (payloadCase_ == PayloadOneofCase.RegisterRequest) {
      output.WriteRawTag(10);
      output.WriteMessage(RegisterRequest);
    }
    if (payloadCase_ == PayloadOneofCase.RegisterResponse) {
      output.WriteRawTag(18);
      output.WriteMessage(RegisterResponse);
    }
    if (payloadCase_ == PayloadOneofCase.LoginRequest) {
      output.WriteRawTag(26);
      output.WriteMessage(LoginRequest);
    }
    if (payloadCase_ == PayloadOneofCase.LoginResponse) {
      output.WriteRawTag(34);
      output.WriteMessage(LoginResponse);
    }
    if (payloadCase_ == PayloadOneofCase.LogoutRequest) {
      output.WriteRawTag(42);
      output.WriteMessage(LogoutRequest);
    }
    if (payloadCase_ == PayloadOneofCase.CloseSocketNotification) {
      output.WriteRawTag(66);
      output.WriteMessage(CloseSocketNotification);
    }
    if (payloadCase_ == PayloadOneofCase.LobbyJoinRequest) {
      output.WriteRawTag(90);
      output.WriteMessage(LobbyJoinRequest);
    }
    if (payloadCase_ == PayloadOneofCase.LobbyJoinResponse) {
      output.WriteRawTag(98);
      output.WriteMessage(LobbyJoinResponse);
    }
    if (payloadCase_ == PayloadOneofCase.LobbyLeaveRequest) {
      output.WriteRawTag(106);
      output.WriteMessage(LobbyLeaveRequest);
    }
    if (payloadCase_ == PayloadOneofCase.LobbyLeaveResponse) {
      output.WriteRawTag(114);
      output.WriteMessage(LobbyLeaveResponse);
    }
    if (payloadCase_ == PayloadOneofCase.LobbyUserListRequest) {
      output.WriteRawTag(122);
      output.WriteMessage(LobbyUserListRequest);
    }
    if (payloadCase_ == PayloadOneofCase.LobbyUserListResponse) {
      output.WriteRawTag(130, 1);
      output.WriteMessage(LobbyUserListResponse);
    }
    if (payloadCase_ == PayloadOneofCase.LobbyUserDetailRequest) {
      output.WriteRawTag(138, 1);
      output.WriteMessage(LobbyUserDetailRequest);
    }
    if (payloadCase_ == PayloadOneofCase.LobbyUserDetailResponse) {
      output.WriteRawTag(146, 1);
      output.WriteMessage(LobbyUserDetailResponse);
    }
    if (payloadCase_ == PayloadOneofCase.RoomListRequest) {
      output.WriteRawTag(250, 1);
      output.WriteMessage(RoomListRequest);
    }
    if (payloadCase_ == PayloadOneofCase.RoomListResponse) {
      output.WriteRawTag(130, 2);
      output.WriteMessage(RoomListResponse);
    }
    if (payloadCase_ == PayloadOneofCase.CreateRoomRequest) {
      output.WriteRawTag(138, 2);
      output.WriteMessage(CreateRoomRequest);
    }
    if (payloadCase_ == PayloadOneofCase.CreateRoomResponse) {
      output.WriteRawTag(146, 2);
      output.WriteMessage(CreateRoomResponse);
    }
    if (payloadCase_ == PayloadOneofCase.JoinRoomRequest) {
      output.WriteRawTag(154, 2);
      output.WriteMessage(JoinRoomRequest);
    }
    if (payloadCase_ == PayloadOneofCase.JoinRoomResponse) {
      output.WriteRawTag(162, 2);
      output.WriteMessage(JoinRoomResponse);
    }
    if (payloadCase_ == PayloadOneofCase.JoinRoomNotification) {
      output.WriteRawTag(170, 2);
      output.WriteMessage(JoinRoomNotification);
    }
    if (payloadCase_ == PayloadOneofCase.LeaveRoomRequest) {
      output.WriteRawTag(178, 2);
      output.WriteMessage(LeaveRoomRequest);
    }
    if (payloadCase_ == PayloadOneofCase.LeaveRoomResponse) {
      output.WriteRawTag(186, 2);
      output.WriteMessage(LeaveRoomResponse);
    }
    if (payloadCase_ == PayloadOneofCase.LeaveRoomNotification) {
      output.WriteRawTag(194, 2);
      output.WriteMessage(LeaveRoomNotification);
    }
    if (payloadCase_ == PayloadOneofCase.GamePrepareRequest) {
      output.WriteRawTag(202, 2);
      output.WriteMessage(GamePrepareRequest);
    }
    if (payloadCase_ == PayloadOneofCase.GamePrepareResponse) {
      output.WriteRawTag(210, 2);
      output.WriteMessage(GamePrepareResponse);
    }
    if (payloadCase_ == PayloadOneofCase.GamePrepareNotification) {
      output.WriteRawTag(218, 2);
      output.WriteMessage(GamePrepareNotification);
    }
    if (payloadCase_ == PayloadOneofCase.GameStartRequest) {
      output.WriteRawTag(154, 3);
      output.WriteMessage(GameStartRequest);
    }
    if (payloadCase_ == PayloadOneofCase.GameStartNotification) {
      output.WriteRawTag(162, 3);
      output.WriteMessage(GameStartNotification);
    }
    if (payloadCase_ == PayloadOneofCase.RollDiceRequest) {
      output.WriteRawTag(234, 3);
      output.WriteMessage(RollDiceRequest);
    }
    if (payloadCase_ == PayloadOneofCase.RollDiceResponse) {
      output.WriteRawTag(242, 3);
      output.WriteMessage(RollDiceResponse);
    }
    if (payloadCase_ == PayloadOneofCase.RollDiceNotification) {
      output.WriteRawTag(250, 3);
      output.WriteMessage(RollDiceNotification);
    }
    if (payloadCase_ == PayloadOneofCase.MovePlayerBoardRequest) {
      output.WriteRawTag(130, 4);
      output.WriteMessage(MovePlayerBoardRequest);
    }
    if (payloadCase_ == PayloadOneofCase.MovePlayerBoardResponse) {
      output.WriteRawTag(138, 4);
      output.WriteMessage(MovePlayerBoardResponse);
    }
    if (payloadCase_ == PayloadOneofCase.MovePlayerBoardNotification) {
      output.WriteRawTag(146, 4);
      output.WriteMessage(MovePlayerBoardNotification);
    }
    if (payloadCase_ == PayloadOneofCase.PurchaseTileRequest) {
      output.WriteRawTag(154, 4);
      output.WriteMessage(PurchaseTileRequest);
    }
    if (payloadCase_ == PayloadOneofCase.PurchaseTileResponse) {
      output.WriteRawTag(162, 4);
      output.WriteMessage(PurchaseTileResponse);
    }
    if (payloadCase_ == PayloadOneofCase.PurchaseTileNotification) {
      output.WriteRawTag(170, 4);
      output.WriteMessage(PurchaseTileNotification);
    }
    if (payloadCase_ == PayloadOneofCase.GameEndNotification) {
      output.WriteRawTag(178, 4);
      output.WriteMessage(GameEndNotification);
    }
    if (payloadCase_ == PayloadOneofCase.PurchaseTrophyRequest) {
      output.WriteRawTag(186, 4);
      output.WriteMessage(PurchaseTrophyRequest);
    }
    if (payloadCase_ == PayloadOneofCase.PurchaseTrophyResponse) {
      output.WriteRawTag(194, 4);
      output.WriteMessage(PurchaseTrophyResponse);
    }
    if (payloadCase_ == PayloadOneofCase.PurchaseTrophyNotification) {
      output.WriteRawTag(202, 4);
      output.WriteMessage(PurchaseTrophyNotification);
    }
    if (payloadCase_ == PayloadOneofCase.TilePenaltyRequest) {
      output.WriteRawTag(210, 4);
      output.WriteMessage(TilePenaltyRequest);
    }
    if (payloadCase_ == PayloadOneofCase.TilePenaltyResponse) {
      output.WriteRawTag(218, 4);
      output.WriteMessage(TilePenaltyResponse);
    }
    if (payloadCase_ == PayloadOneofCase.TilePenaltyNotification) {
      output.WriteRawTag(226, 4);
      output.WriteMessage(TilePenaltyNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DiceGameRequest) {
      output.WriteRawTag(234, 4);
      output.WriteMessage(DiceGameRequest);
    }
    if (payloadCase_ == PayloadOneofCase.DiceGameResponse) {
      output.WriteRawTag(242, 4);
      output.WriteMessage(DiceGameResponse);
    }
    if (payloadCase_ == PayloadOneofCase.DiceGameNotification) {
      output.WriteRawTag(250, 4);
      output.WriteMessage(DiceGameNotification);
    }
    if (payloadCase_ == PayloadOneofCase.TurnEndRequest) {
      output.WriteRawTag(130, 5);
      output.WriteMessage(TurnEndRequest);
    }
    if (payloadCase_ == PayloadOneofCase.TurnEndNotification) {
      output.WriteRawTag(138, 5);
      output.WriteMessage(TurnEndNotification);
    }
    if (payloadCase_ == PayloadOneofCase.BackToTheRoomRequest) {
      output.WriteRawTag(218, 5);
      output.WriteMessage(BackToTheRoomRequest);
    }
    if (payloadCase_ == PayloadOneofCase.BackToTheRoomResponse) {
      output.WriteRawTag(226, 5);
      output.WriteMessage(BackToTheRoomResponse);
    }
    if (payloadCase_ == PayloadOneofCase.BackToTheRoomNotification) {
      output.WriteRawTag(234, 5);
      output.WriteMessage(BackToTheRoomNotification);
    }
    if (payloadCase_ == PayloadOneofCase.StartMiniGameRequest) {
      output.WriteRawTag(170, 6);
      output.WriteMessage(StartMiniGameRequest);
    }
    if (payloadCase_ == PayloadOneofCase.IceMiniGameReadyNotification) {
      output.WriteRawTag(202, 12);
      output.WriteMessage(IceMiniGameReadyNotification);
    }
    if (payloadCase_ == PayloadOneofCase.IceGameReadyRequest) {
      output.WriteRawTag(210, 12);
      output.WriteMessage(IceGameReadyRequest);
    }
    if (payloadCase_ == PayloadOneofCase.IceGameReadyNotification) {
      output.WriteRawTag(218, 12);
      output.WriteMessage(IceGameReadyNotification);
    }
    if (payloadCase_ == PayloadOneofCase.IceMiniGameStartNotification) {
      output.WriteRawTag(226, 12);
      output.WriteMessage(IceMiniGameStartNotification);
    }
    if (payloadCase_ == PayloadOneofCase.IcePlayerSyncRequest) {
      output.WriteRawTag(234, 12);
      output.WriteMessage(IcePlayerSyncRequest);
    }
    if (payloadCase_ == PayloadOneofCase.IcePlayerSyncNotification) {
      output.WriteRawTag(242, 12);
      output.WriteMessage(IcePlayerSyncNotification);
    }
    if (payloadCase_ == PayloadOneofCase.IcePlayerDamageRequest) {
      output.WriteRawTag(250, 12);
      output.WriteMessage(IcePlayerDamageRequest);
    }
    if (payloadCase_ == PayloadOneofCase.IcePlayerDamageNotification) {
      output.WriteRawTag(130, 13);
      output.WriteMessage(IcePlayerDamageNotification);
    }
    if (payloadCase_ == PayloadOneofCase.IcePlayerDeathNotification) {
      output.WriteRawTag(138, 13);
      output.WriteMessage(IcePlayerDeathNotification);
    }
    if (payloadCase_ == PayloadOneofCase.IceGameOverNotification) {
      output.WriteRawTag(146, 13);
      output.WriteMessage(IceGameOverNotification);
    }
    if (payloadCase_ == PayloadOneofCase.IceMapSyncNotification) {
      output.WriteRawTag(154, 13);
      output.WriteMessage(IceMapSyncNotification);
    }
    if (payloadCase_ == PayloadOneofCase.IcePlayerExitNotification) {
      output.WriteRawTag(162, 13);
      output.WriteMessage(IcePlayerExitNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DropMiniGameReadyNotification) {
      output.WriteRawTag(234, 18);
      output.WriteMessage(DropMiniGameReadyNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DropGameReadyRequest) {
      output.WriteRawTag(242, 18);
      output.WriteMessage(DropGameReadyRequest);
    }
    if (payloadCase_ == PayloadOneofCase.DropGameReadyNotification) {
      output.WriteRawTag(250, 18);
      output.WriteMessage(DropGameReadyNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DropMiniGameStartNotification) {
      output.WriteRawTag(130, 19);
      output.WriteMessage(DropMiniGameStartNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DropPlayerSyncRequest) {
      output.WriteRawTag(138, 19);
      output.WriteMessage(DropPlayerSyncRequest);
    }
    if (payloadCase_ == PayloadOneofCase.DropPlayerSyncNotification) {
      output.WriteRawTag(146, 19);
      output.WriteMessage(DropPlayerSyncNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DropPlayerDeathNotification) {
      output.WriteRawTag(154, 19);
      output.WriteMessage(DropPlayerDeathNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DropLevelStartNotification) {
      output.WriteRawTag(162, 19);
      output.WriteMessage(DropLevelStartNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DropLevelEndNotification) {
      output.WriteRawTag(170, 19);
      output.WriteMessage(DropLevelEndNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DropGameOverNotification) {
      output.WriteRawTag(178, 19);
      output.WriteMessage(DropGameOverNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DanceMiniGameReadyNotification) {
      output.WriteRawTag(138, 25);
      output.WriteMessage(DanceMiniGameReadyNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DanceReadyRequest) {
      output.WriteRawTag(146, 25);
      output.WriteMessage(DanceReadyRequest);
    }
    if (payloadCase_ == PayloadOneofCase.DanceReadyNotification) {
      output.WriteRawTag(154, 25);
      output.WriteMessage(DanceReadyNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DanceStartNotification) {
      output.WriteRawTag(162, 25);
      output.WriteMessage(DanceStartNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DanceTableCreateRequest) {
      output.WriteRawTag(170, 25);
      output.WriteMessage(DanceTableCreateRequest);
    }
    if (payloadCase_ == PayloadOneofCase.DanceTableNotification) {
      output.WriteRawTag(178, 25);
      output.WriteMessage(DanceTableNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DanceKeyPressRequest) {
      output.WriteRawTag(186, 25);
      output.WriteMessage(DanceKeyPressRequest);
    }
    if (payloadCase_ == PayloadOneofCase.DanceKeyPressResponse) {
      output.WriteRawTag(194, 25);
      output.WriteMessage(DanceKeyPressResponse);
    }
    if (payloadCase_ == PayloadOneofCase.DanceKeyPressNotification) {
      output.WriteRawTag(202, 25);
      output.WriteMessage(DanceKeyPressNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DanceGameOverNotification) {
      output.WriteRawTag(210, 25);
      output.WriteMessage(DanceGameOverNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DanceCloseSocketNotification) {
      output.WriteRawTag(218, 25);
      output.WriteMessage(DanceCloseSocketNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DanceTableCompleteRequest) {
      output.WriteRawTag(226, 25);
      output.WriteMessage(DanceTableCompleteRequest);
    }
    if (payloadCase_ == PayloadOneofCase.BombMiniGameReadyNotification) {
      output.WriteRawTag(170, 31);
      output.WriteMessage(BombMiniGameReadyNotification);
    }
    if (payloadCase_ == PayloadOneofCase.BombGameReadyRequest) {
      output.WriteRawTag(178, 31);
      output.WriteMessage(BombGameReadyRequest);
    }
    if (payloadCase_ == PayloadOneofCase.BombGameReadyNotification) {
      output.WriteRawTag(186, 31);
      output.WriteMessage(BombGameReadyNotification);
    }
    if (payloadCase_ == PayloadOneofCase.BombMiniGameStartNotification) {
      output.WriteRawTag(194, 31);
      output.WriteMessage(BombMiniGameStartNotification);
    }
    if (payloadCase_ == PayloadOneofCase.BombPlayerSyncRequest) {
      output.WriteRawTag(202, 31);
      output.WriteMessage(BombPlayerSyncRequest);
    }
    if (payloadCase_ == PayloadOneofCase.BombPlayerSyncNotification) {
      output.WriteRawTag(210, 31);
      output.WriteMessage(BombPlayerSyncNotification);
    }
    if (payloadCase_ == PayloadOneofCase.BombPlayerDeathNotification) {
      output.WriteRawTag(218, 31);
      output.WriteMessage(BombPlayerDeathNotification);
    }
    if (payloadCase_ == PayloadOneofCase.BombMoveRequest) {
      output.WriteRawTag(226, 31);
      output.WriteMessage(BombMoveRequest);
    }
    if (payloadCase_ == PayloadOneofCase.BombMoveNotification) {
      output.WriteRawTag(234, 31);
      output.WriteMessage(BombMoveNotification);
    }
    if (payloadCase_ == PayloadOneofCase.BombGameOverNotification) {
      output.WriteRawTag(242, 31);
      output.WriteMessage(BombGameOverNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DartMiniGameReadyNotification) {
      output.WriteRawTag(202, 37);
      output.WriteMessage(DartMiniGameReadyNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DartGameReadyRequest) {
      output.WriteRawTag(210, 37);
      output.WriteMessage(DartGameReadyRequest);
    }
    if (payloadCase_ == PayloadOneofCase.DartGameReadyNotification) {
      output.WriteRawTag(218, 37);
      output.WriteMessage(DartGameReadyNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DartMiniGameStartNotification) {
      output.WriteRawTag(226, 37);
      output.WriteMessage(DartMiniGameStartNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DartGameThrowRequest) {
      output.WriteRawTag(234, 37);
      output.WriteMessage(DartGameThrowRequest);
    }
    if (payloadCase_ == PayloadOneofCase.DartGameThrowNotification) {
      output.WriteRawTag(242, 37);
      output.WriteMessage(DartGameThrowNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DartGameOverNotification) {
      output.WriteRawTag(250, 37);
      output.WriteMessage(DartGameOverNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DartPannelSyncRequest) {
      output.WriteRawTag(130, 38);
      output.WriteMessage(DartPannelSyncRequest);
    }
    if (payloadCase_ == PayloadOneofCase.DartPannelSyncNotification) {
      output.WriteRawTag(138, 38);
      output.WriteMessage(DartPannelSyncNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DartSyncRequest) {
      output.WriteRawTag(146, 38);
      output.WriteMessage(DartSyncRequest);
    }
    if (payloadCase_ == PayloadOneofCase.DartSyncNotification) {
      output.WriteRawTag(154, 38);
      output.WriteMessage(DartSyncNotification);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (payloadCase_ == PayloadOneofCase.RegisterRequest) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegisterRequest);
    }
    if (payloadCase_ == PayloadOneofCase.RegisterResponse) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegisterResponse);
    }
    if (payloadCase_ == PayloadOneofCase.LoginRequest) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoginRequest);
    }
    if (payloadCase_ == PayloadOneofCase.LoginResponse) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoginResponse);
    }
    if (payloadCase_ == PayloadOneofCase.LogoutRequest) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LogoutRequest);
    }
    if (payloadCase_ == PayloadOneofCase.CloseSocketNotification) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CloseSocketNotification);
    }
    if (payloadCase_ == PayloadOneofCase.LobbyJoinRequest) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LobbyJoinRequest);
    }
    if (payloadCase_ == PayloadOneofCase.LobbyJoinResponse) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LobbyJoinResponse);
    }
    if (payloadCase_ == PayloadOneofCase.LobbyLeaveRequest) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LobbyLeaveRequest);
    }
    if (payloadCase_ == PayloadOneofCase.LobbyLeaveResponse) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LobbyLeaveResponse);
    }
    if (payloadCase_ == PayloadOneofCase.LobbyUserListRequest) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LobbyUserListRequest);
    }
    if (payloadCase_ == PayloadOneofCase.LobbyUserListResponse) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(LobbyUserListResponse);
    }
    if (payloadCase_ == PayloadOneofCase.LobbyUserDetailRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(LobbyUserDetailRequest);
    }
    if (payloadCase_ == PayloadOneofCase.LobbyUserDetailResponse) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(LobbyUserDetailResponse);
    }
    if (payloadCase_ == PayloadOneofCase.RoomListRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(RoomListRequest);
    }
    if (payloadCase_ == PayloadOneofCase.RoomListResponse) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(RoomListResponse);
    }
    if (payloadCase_ == PayloadOneofCase.CreateRoomRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(CreateRoomRequest);
    }
    if (payloadCase_ == PayloadOneofCase.CreateRoomResponse) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(CreateRoomResponse);
    }
    if (payloadCase_ == PayloadOneofCase.JoinRoomRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(JoinRoomRequest);
    }
    if (payloadCase_ == PayloadOneofCase.JoinRoomResponse) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(JoinRoomResponse);
    }
    if (payloadCase_ == PayloadOneofCase.JoinRoomNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(JoinRoomNotification);
    }
    if (payloadCase_ == PayloadOneofCase.LeaveRoomRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(LeaveRoomRequest);
    }
    if (payloadCase_ == PayloadOneofCase.LeaveRoomResponse) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(LeaveRoomResponse);
    }
    if (payloadCase_ == PayloadOneofCase.LeaveRoomNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(LeaveRoomNotification);
    }
    if (payloadCase_ == PayloadOneofCase.GamePrepareRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(GamePrepareRequest);
    }
    if (payloadCase_ == PayloadOneofCase.GamePrepareResponse) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(GamePrepareResponse);
    }
    if (payloadCase_ == PayloadOneofCase.GamePrepareNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(GamePrepareNotification);
    }
    if (payloadCase_ == PayloadOneofCase.GameStartRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(GameStartRequest);
    }
    if (payloadCase_ == PayloadOneofCase.GameStartNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(GameStartNotification);
    }
    if (payloadCase_ == PayloadOneofCase.RollDiceRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(RollDiceRequest);
    }
    if (payloadCase_ == PayloadOneofCase.RollDiceResponse) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(RollDiceResponse);
    }
    if (payloadCase_ == PayloadOneofCase.RollDiceNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(RollDiceNotification);
    }
    if (payloadCase_ == PayloadOneofCase.MovePlayerBoardRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(MovePlayerBoardRequest);
    }
    if (payloadCase_ == PayloadOneofCase.MovePlayerBoardResponse) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(MovePlayerBoardResponse);
    }
    if (payloadCase_ == PayloadOneofCase.MovePlayerBoardNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(MovePlayerBoardNotification);
    }
    if (payloadCase_ == PayloadOneofCase.PurchaseTileRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(PurchaseTileRequest);
    }
    if (payloadCase_ == PayloadOneofCase.PurchaseTileResponse) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(PurchaseTileResponse);
    }
    if (payloadCase_ == PayloadOneofCase.PurchaseTileNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(PurchaseTileNotification);
    }
    if (payloadCase_ == PayloadOneofCase.GameEndNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(GameEndNotification);
    }
    if (payloadCase_ == PayloadOneofCase.PurchaseTrophyRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(PurchaseTrophyRequest);
    }
    if (payloadCase_ == PayloadOneofCase.PurchaseTrophyResponse) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(PurchaseTrophyResponse);
    }
    if (payloadCase_ == PayloadOneofCase.PurchaseTrophyNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(PurchaseTrophyNotification);
    }
    if (payloadCase_ == PayloadOneofCase.TilePenaltyRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(TilePenaltyRequest);
    }
    if (payloadCase_ == PayloadOneofCase.TilePenaltyResponse) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(TilePenaltyResponse);
    }
    if (payloadCase_ == PayloadOneofCase.TilePenaltyNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(TilePenaltyNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DiceGameRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DiceGameRequest);
    }
    if (payloadCase_ == PayloadOneofCase.DiceGameResponse) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DiceGameResponse);
    }
    if (payloadCase_ == PayloadOneofCase.DiceGameNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DiceGameNotification);
    }
    if (payloadCase_ == PayloadOneofCase.TurnEndRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(TurnEndRequest);
    }
    if (payloadCase_ == PayloadOneofCase.TurnEndNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(TurnEndNotification);
    }
    if (payloadCase_ == PayloadOneofCase.BackToTheRoomRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(BackToTheRoomRequest);
    }
    if (payloadCase_ == PayloadOneofCase.BackToTheRoomResponse) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(BackToTheRoomResponse);
    }
    if (payloadCase_ == PayloadOneofCase.BackToTheRoomNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(BackToTheRoomNotification);
    }
    if (payloadCase_ == PayloadOneofCase.StartMiniGameRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StartMiniGameRequest);
    }
    if (payloadCase_ == PayloadOneofCase.IceMiniGameReadyNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(IceMiniGameReadyNotification);
    }
    if (payloadCase_ == PayloadOneofCase.IceGameReadyRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(IceGameReadyRequest);
    }
    if (payloadCase_ == PayloadOneofCase.IceGameReadyNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(IceGameReadyNotification);
    }
    if (payloadCase_ == PayloadOneofCase.IceMiniGameStartNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(IceMiniGameStartNotification);
    }
    if (payloadCase_ == PayloadOneofCase.IcePlayerSyncRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(IcePlayerSyncRequest);
    }
    if (payloadCase_ == PayloadOneofCase.IcePlayerSyncNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(IcePlayerSyncNotification);
    }
    if (payloadCase_ == PayloadOneofCase.IcePlayerDamageRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(IcePlayerDamageRequest);
    }
    if (payloadCase_ == PayloadOneofCase.IcePlayerDamageNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(IcePlayerDamageNotification);
    }
    if (payloadCase_ == PayloadOneofCase.IcePlayerDeathNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(IcePlayerDeathNotification);
    }
    if (payloadCase_ == PayloadOneofCase.IceGameOverNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(IceGameOverNotification);
    }
    if (payloadCase_ == PayloadOneofCase.IceMapSyncNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(IceMapSyncNotification);
    }
    if (payloadCase_ == PayloadOneofCase.IcePlayerExitNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(IcePlayerExitNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DropMiniGameReadyNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DropMiniGameReadyNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DropGameReadyRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DropGameReadyRequest);
    }
    if (payloadCase_ == PayloadOneofCase.DropGameReadyNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DropGameReadyNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DropMiniGameStartNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DropMiniGameStartNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DropPlayerSyncRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DropPlayerSyncRequest);
    }
    if (payloadCase_ == PayloadOneofCase.DropPlayerSyncNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DropPlayerSyncNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DropPlayerDeathNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DropPlayerDeathNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DropLevelStartNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DropLevelStartNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DropLevelEndNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DropLevelEndNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DropGameOverNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DropGameOverNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DanceMiniGameReadyNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DanceMiniGameReadyNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DanceReadyRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DanceReadyRequest);
    }
    if (payloadCase_ == PayloadOneofCase.DanceReadyNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DanceReadyNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DanceStartNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DanceStartNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DanceTableCreateRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DanceTableCreateRequest);
    }
    if (payloadCase_ == PayloadOneofCase.DanceTableNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DanceTableNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DanceKeyPressRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DanceKeyPressRequest);
    }
    if (payloadCase_ == PayloadOneofCase.DanceKeyPressResponse) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DanceKeyPressResponse);
    }
    if (payloadCase_ == PayloadOneofCase.DanceKeyPressNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DanceKeyPressNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DanceGameOverNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DanceGameOverNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DanceCloseSocketNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DanceCloseSocketNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DanceTableCompleteRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DanceTableCompleteRequest);
    }
    if (payloadCase_ == PayloadOneofCase.BombMiniGameReadyNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(BombMiniGameReadyNotification);
    }
    if (payloadCase_ == PayloadOneofCase.BombGameReadyRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(BombGameReadyRequest);
    }
    if (payloadCase_ == PayloadOneofCase.BombGameReadyNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(BombGameReadyNotification);
    }
    if (payloadCase_ == PayloadOneofCase.BombMiniGameStartNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(BombMiniGameStartNotification);
    }
    if (payloadCase_ == PayloadOneofCase.BombPlayerSyncRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(BombPlayerSyncRequest);
    }
    if (payloadCase_ == PayloadOneofCase.BombPlayerSyncNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(BombPlayerSyncNotification);
    }
    if (payloadCase_ == PayloadOneofCase.BombPlayerDeathNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(BombPlayerDeathNotification);
    }
    if (payloadCase_ == PayloadOneofCase.BombMoveRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(BombMoveRequest);
    }
    if (payloadCase_ == PayloadOneofCase.BombMoveNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(BombMoveNotification);
    }
    if (payloadCase_ == PayloadOneofCase.BombGameOverNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(BombGameOverNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DartMiniGameReadyNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DartMiniGameReadyNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DartGameReadyRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DartGameReadyRequest);
    }
    if (payloadCase_ == PayloadOneofCase.DartGameReadyNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DartGameReadyNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DartMiniGameStartNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DartMiniGameStartNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DartGameThrowRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DartGameThrowRequest);
    }
    if (payloadCase_ == PayloadOneofCase.DartGameThrowNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DartGameThrowNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DartGameOverNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DartGameOverNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DartPannelSyncRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DartPannelSyncRequest);
    }
    if (payloadCase_ == PayloadOneofCase.DartPannelSyncNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DartPannelSyncNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DartSyncRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DartSyncRequest);
    }
    if (payloadCase_ == PayloadOneofCase.DartSyncNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DartSyncNotification);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GamePacket other) {
    if (other == null) {
      return;
    }
    switch (other.PayloadCase) {
      case PayloadOneofCase.RegisterRequest:
        if (RegisterRequest == null) {
          RegisterRequest = new global::C2S_RegisterRequest();
        }
        RegisterRequest.MergeFrom(other.RegisterRequest);
        break;
      case PayloadOneofCase.RegisterResponse:
        if (RegisterResponse == null) {
          RegisterResponse = new global::S2C_RegisterResponse();
        }
        RegisterResponse.MergeFrom(other.RegisterResponse);
        break;
      case PayloadOneofCase.LoginRequest:
        if (LoginRequest == null) {
          LoginRequest = new global::C2S_LoginRequest();
        }
        LoginRequest.MergeFrom(other.LoginRequest);
        break;
      case PayloadOneofCase.LoginResponse:
        if (LoginResponse == null) {
          LoginResponse = new global::S2C_LoginResponse();
        }
        LoginResponse.MergeFrom(other.LoginResponse);
        break;
      case PayloadOneofCase.LogoutRequest:
        if (LogoutRequest == null) {
          LogoutRequest = new global::C2S_LoggoutRequest();
        }
        LogoutRequest.MergeFrom(other.LogoutRequest);
        break;
      case PayloadOneofCase.CloseSocketNotification:
        if (CloseSocketNotification == null) {
          CloseSocketNotification = new global::S2C_CloseSocketNotification();
        }
        CloseSocketNotification.MergeFrom(other.CloseSocketNotification);
        break;
      case PayloadOneofCase.LobbyJoinRequest:
        if (LobbyJoinRequest == null) {
          LobbyJoinRequest = new global::C2S_LobbyJoinRequest();
        }
        LobbyJoinRequest.MergeFrom(other.LobbyJoinRequest);
        break;
      case PayloadOneofCase.LobbyJoinResponse:
        if (LobbyJoinResponse == null) {
          LobbyJoinResponse = new global::S2C_LobbyJoinResponse();
        }
        LobbyJoinResponse.MergeFrom(other.LobbyJoinResponse);
        break;
      case PayloadOneofCase.LobbyLeaveRequest:
        if (LobbyLeaveRequest == null) {
          LobbyLeaveRequest = new global::C2S_LobbyLeaveRequest();
        }
        LobbyLeaveRequest.MergeFrom(other.LobbyLeaveRequest);
        break;
      case PayloadOneofCase.LobbyLeaveResponse:
        if (LobbyLeaveResponse == null) {
          LobbyLeaveResponse = new global::S2C_LobbyLeaveResponse();
        }
        LobbyLeaveResponse.MergeFrom(other.LobbyLeaveResponse);
        break;
      case PayloadOneofCase.LobbyUserListRequest:
        if (LobbyUserListRequest == null) {
          LobbyUserListRequest = new global::C2S_LobbyUserListRequest();
        }
        LobbyUserListRequest.MergeFrom(other.LobbyUserListRequest);
        break;
      case PayloadOneofCase.LobbyUserListResponse:
        if (LobbyUserListResponse == null) {
          LobbyUserListResponse = new global::S2C_LobbyUserListResponse();
        }
        LobbyUserListResponse.MergeFrom(other.LobbyUserListResponse);
        break;
      case PayloadOneofCase.LobbyUserDetailRequest:
        if (LobbyUserDetailRequest == null) {
          LobbyUserDetailRequest = new global::C2S_LobbyUserDetailRequest();
        }
        LobbyUserDetailRequest.MergeFrom(other.LobbyUserDetailRequest);
        break;
      case PayloadOneofCase.LobbyUserDetailResponse:
        if (LobbyUserDetailResponse == null) {
          LobbyUserDetailResponse = new global::S2C_LobbyUserDetailResponse();
        }
        LobbyUserDetailResponse.MergeFrom(other.LobbyUserDetailResponse);
        break;
      case PayloadOneofCase.RoomListRequest:
        if (RoomListRequest == null) {
          RoomListRequest = new global::C2S_RoomListRequest();
        }
        RoomListRequest.MergeFrom(other.RoomListRequest);
        break;
      case PayloadOneofCase.RoomListResponse:
        if (RoomListResponse == null) {
          RoomListResponse = new global::S2C_RoomListResponse();
        }
        RoomListResponse.MergeFrom(other.RoomListResponse);
        break;
      case PayloadOneofCase.CreateRoomRequest:
        if (CreateRoomRequest == null) {
          CreateRoomRequest = new global::C2S_CreateRoomRequest();
        }
        CreateRoomRequest.MergeFrom(other.CreateRoomRequest);
        break;
      case PayloadOneofCase.CreateRoomResponse:
        if (CreateRoomResponse == null) {
          CreateRoomResponse = new global::S2C_CreateRoomResponse();
        }
        CreateRoomResponse.MergeFrom(other.CreateRoomResponse);
        break;
      case PayloadOneofCase.JoinRoomRequest:
        if (JoinRoomRequest == null) {
          JoinRoomRequest = new global::C2S_JoinRoomRequest();
        }
        JoinRoomRequest.MergeFrom(other.JoinRoomRequest);
        break;
      case PayloadOneofCase.JoinRoomResponse:
        if (JoinRoomResponse == null) {
          JoinRoomResponse = new global::S2C_JoinRoomResponse();
        }
        JoinRoomResponse.MergeFrom(other.JoinRoomResponse);
        break;
      case PayloadOneofCase.JoinRoomNotification:
        if (JoinRoomNotification == null) {
          JoinRoomNotification = new global::S2C_JoinRoomNotification();
        }
        JoinRoomNotification.MergeFrom(other.JoinRoomNotification);
        break;
      case PayloadOneofCase.LeaveRoomRequest:
        if (LeaveRoomRequest == null) {
          LeaveRoomRequest = new global::C2S_LeaveRoomRequest();
        }
        LeaveRoomRequest.MergeFrom(other.LeaveRoomRequest);
        break;
      case PayloadOneofCase.LeaveRoomResponse:
        if (LeaveRoomResponse == null) {
          LeaveRoomResponse = new global::S2C_LeaveRoomResponse();
        }
        LeaveRoomResponse.MergeFrom(other.LeaveRoomResponse);
        break;
      case PayloadOneofCase.LeaveRoomNotification:
        if (LeaveRoomNotification == null) {
          LeaveRoomNotification = new global::S2C_LeaveRoomNotification();
        }
        LeaveRoomNotification.MergeFrom(other.LeaveRoomNotification);
        break;
      case PayloadOneofCase.GamePrepareRequest:
        if (GamePrepareRequest == null) {
          GamePrepareRequest = new global::C2S_GamePrepareRequest();
        }
        GamePrepareRequest.MergeFrom(other.GamePrepareRequest);
        break;
      case PayloadOneofCase.GamePrepareResponse:
        if (GamePrepareResponse == null) {
          GamePrepareResponse = new global::S2C_GamePrepareResponse();
        }
        GamePrepareResponse.MergeFrom(other.GamePrepareResponse);
        break;
      case PayloadOneofCase.GamePrepareNotification:
        if (GamePrepareNotification == null) {
          GamePrepareNotification = new global::S2C_GamePrepareNotification();
        }
        GamePrepareNotification.MergeFrom(other.GamePrepareNotification);
        break;
      case PayloadOneofCase.GameStartRequest:
        if (GameStartRequest == null) {
          GameStartRequest = new global::C2S_GameStartRequest();
        }
        GameStartRequest.MergeFrom(other.GameStartRequest);
        break;
      case PayloadOneofCase.GameStartNotification:
        if (GameStartNotification == null) {
          GameStartNotification = new global::S2C_GameStartNotification();
        }
        GameStartNotification.MergeFrom(other.GameStartNotification);
        break;
      case PayloadOneofCase.RollDiceRequest:
        if (RollDiceRequest == null) {
          RollDiceRequest = new global::C2S_RollDiceRequest();
        }
        RollDiceRequest.MergeFrom(other.RollDiceRequest);
        break;
      case PayloadOneofCase.RollDiceResponse:
        if (RollDiceResponse == null) {
          RollDiceResponse = new global::S2C_RollDiceResponse();
        }
        RollDiceResponse.MergeFrom(other.RollDiceResponse);
        break;
      case PayloadOneofCase.RollDiceNotification:
        if (RollDiceNotification == null) {
          RollDiceNotification = new global::S2C_RollDiceNotification();
        }
        RollDiceNotification.MergeFrom(other.RollDiceNotification);
        break;
      case PayloadOneofCase.MovePlayerBoardRequest:
        if (MovePlayerBoardRequest == null) {
          MovePlayerBoardRequest = new global::C2S_MovePlayerBoardRequest();
        }
        MovePlayerBoardRequest.MergeFrom(other.MovePlayerBoardRequest);
        break;
      case PayloadOneofCase.MovePlayerBoardResponse:
        if (MovePlayerBoardResponse == null) {
          MovePlayerBoardResponse = new global::S2C_MovePlayerBoardResponse();
        }
        MovePlayerBoardResponse.MergeFrom(other.MovePlayerBoardResponse);
        break;
      case PayloadOneofCase.MovePlayerBoardNotification:
        if (MovePlayerBoardNotification == null) {
          MovePlayerBoardNotification = new global::S2C_MovePlayerBoardNotification();
        }
        MovePlayerBoardNotification.MergeFrom(other.MovePlayerBoardNotification);
        break;
      case PayloadOneofCase.PurchaseTileRequest:
        if (PurchaseTileRequest == null) {
          PurchaseTileRequest = new global::C2S_PurchaseTileRequest();
        }
        PurchaseTileRequest.MergeFrom(other.PurchaseTileRequest);
        break;
      case PayloadOneofCase.PurchaseTileResponse:
        if (PurchaseTileResponse == null) {
          PurchaseTileResponse = new global::S2C_PurchaseTileResponse();
        }
        PurchaseTileResponse.MergeFrom(other.PurchaseTileResponse);
        break;
      case PayloadOneofCase.PurchaseTileNotification:
        if (PurchaseTileNotification == null) {
          PurchaseTileNotification = new global::S2C_PurchaseTileNotification();
        }
        PurchaseTileNotification.MergeFrom(other.PurchaseTileNotification);
        break;
      case PayloadOneofCase.GameEndNotification:
        if (GameEndNotification == null) {
          GameEndNotification = new global::S2C_GameEndNotification();
        }
        GameEndNotification.MergeFrom(other.GameEndNotification);
        break;
      case PayloadOneofCase.PurchaseTrophyRequest:
        if (PurchaseTrophyRequest == null) {
          PurchaseTrophyRequest = new global::C2S_PurchaseTrophyRequest();
        }
        PurchaseTrophyRequest.MergeFrom(other.PurchaseTrophyRequest);
        break;
      case PayloadOneofCase.PurchaseTrophyResponse:
        if (PurchaseTrophyResponse == null) {
          PurchaseTrophyResponse = new global::S2C_PurchaseTrophyResponse();
        }
        PurchaseTrophyResponse.MergeFrom(other.PurchaseTrophyResponse);
        break;
      case PayloadOneofCase.PurchaseTrophyNotification:
        if (PurchaseTrophyNotification == null) {
          PurchaseTrophyNotification = new global::S2C_PurchaseTrophyNotification();
        }
        PurchaseTrophyNotification.MergeFrom(other.PurchaseTrophyNotification);
        break;
      case PayloadOneofCase.TilePenaltyRequest:
        if (TilePenaltyRequest == null) {
          TilePenaltyRequest = new global::C2S_TilePenaltyRequest();
        }
        TilePenaltyRequest.MergeFrom(other.TilePenaltyRequest);
        break;
      case PayloadOneofCase.TilePenaltyResponse:
        if (TilePenaltyResponse == null) {
          TilePenaltyResponse = new global::S2C_TilePenaltyResponse();
        }
        TilePenaltyResponse.MergeFrom(other.TilePenaltyResponse);
        break;
      case PayloadOneofCase.TilePenaltyNotification:
        if (TilePenaltyNotification == null) {
          TilePenaltyNotification = new global::S2C_TilePenaltyNotification();
        }
        TilePenaltyNotification.MergeFrom(other.TilePenaltyNotification);
        break;
      case PayloadOneofCase.DiceGameRequest:
        if (DiceGameRequest == null) {
          DiceGameRequest = new global::C2S_DiceGameRequest();
        }
        DiceGameRequest.MergeFrom(other.DiceGameRequest);
        break;
      case PayloadOneofCase.DiceGameResponse:
        if (DiceGameResponse == null) {
          DiceGameResponse = new global::S2C_DiceGameResponse();
        }
        DiceGameResponse.MergeFrom(other.DiceGameResponse);
        break;
      case PayloadOneofCase.DiceGameNotification:
        if (DiceGameNotification == null) {
          DiceGameNotification = new global::S2C_DiceGameNotification();
        }
        DiceGameNotification.MergeFrom(other.DiceGameNotification);
        break;
      case PayloadOneofCase.TurnEndRequest:
        if (TurnEndRequest == null) {
          TurnEndRequest = new global::C2S_TurnEndRequest();
        }
        TurnEndRequest.MergeFrom(other.TurnEndRequest);
        break;
      case PayloadOneofCase.TurnEndNotification:
        if (TurnEndNotification == null) {
          TurnEndNotification = new global::S2C_TurnEndNotification();
        }
        TurnEndNotification.MergeFrom(other.TurnEndNotification);
        break;
      case PayloadOneofCase.BackToTheRoomRequest:
        if (BackToTheRoomRequest == null) {
          BackToTheRoomRequest = new global::C2S_BackToTheRoomRequest();
        }
        BackToTheRoomRequest.MergeFrom(other.BackToTheRoomRequest);
        break;
      case PayloadOneofCase.BackToTheRoomResponse:
        if (BackToTheRoomResponse == null) {
          BackToTheRoomResponse = new global::S2C_BackToTheRoomResponse();
        }
        BackToTheRoomResponse.MergeFrom(other.BackToTheRoomResponse);
        break;
      case PayloadOneofCase.BackToTheRoomNotification:
        if (BackToTheRoomNotification == null) {
          BackToTheRoomNotification = new global::S2C_BackToTheRoomNotification();
        }
        BackToTheRoomNotification.MergeFrom(other.BackToTheRoomNotification);
        break;
      case PayloadOneofCase.StartMiniGameRequest:
        if (StartMiniGameRequest == null) {
          StartMiniGameRequest = new global::C2S_StartMiniGameRequest();
        }
        StartMiniGameRequest.MergeFrom(other.StartMiniGameRequest);
        break;
      case PayloadOneofCase.IceMiniGameReadyNotification:
        if (IceMiniGameReadyNotification == null) {
          IceMiniGameReadyNotification = new global::S2C_IceMiniGameReadyNotification();
        }
        IceMiniGameReadyNotification.MergeFrom(other.IceMiniGameReadyNotification);
        break;
      case PayloadOneofCase.IceGameReadyRequest:
        if (IceGameReadyRequest == null) {
          IceGameReadyRequest = new global::C2S_IceGameReadyRequest();
        }
        IceGameReadyRequest.MergeFrom(other.IceGameReadyRequest);
        break;
      case PayloadOneofCase.IceGameReadyNotification:
        if (IceGameReadyNotification == null) {
          IceGameReadyNotification = new global::S2C_IceGameReadyNotification();
        }
        IceGameReadyNotification.MergeFrom(other.IceGameReadyNotification);
        break;
      case PayloadOneofCase.IceMiniGameStartNotification:
        if (IceMiniGameStartNotification == null) {
          IceMiniGameStartNotification = new global::S2C_IceMiniGameStartNotification();
        }
        IceMiniGameStartNotification.MergeFrom(other.IceMiniGameStartNotification);
        break;
      case PayloadOneofCase.IcePlayerSyncRequest:
        if (IcePlayerSyncRequest == null) {
          IcePlayerSyncRequest = new global::C2S_IcePlayerSyncRequest();
        }
        IcePlayerSyncRequest.MergeFrom(other.IcePlayerSyncRequest);
        break;
      case PayloadOneofCase.IcePlayerSyncNotification:
        if (IcePlayerSyncNotification == null) {
          IcePlayerSyncNotification = new global::S2C_IcePlayerSyncNotification();
        }
        IcePlayerSyncNotification.MergeFrom(other.IcePlayerSyncNotification);
        break;
      case PayloadOneofCase.IcePlayerDamageRequest:
        if (IcePlayerDamageRequest == null) {
          IcePlayerDamageRequest = new global::C2S_IcePlayerDamageRequest();
        }
        IcePlayerDamageRequest.MergeFrom(other.IcePlayerDamageRequest);
        break;
      case PayloadOneofCase.IcePlayerDamageNotification:
        if (IcePlayerDamageNotification == null) {
          IcePlayerDamageNotification = new global::S2C_IcePlayerDamageNotification();
        }
        IcePlayerDamageNotification.MergeFrom(other.IcePlayerDamageNotification);
        break;
      case PayloadOneofCase.IcePlayerDeathNotification:
        if (IcePlayerDeathNotification == null) {
          IcePlayerDeathNotification = new global::S2C_IcePlayerDeathNotification();
        }
        IcePlayerDeathNotification.MergeFrom(other.IcePlayerDeathNotification);
        break;
      case PayloadOneofCase.IceGameOverNotification:
        if (IceGameOverNotification == null) {
          IceGameOverNotification = new global::S2C_IceGameOverNotification();
        }
        IceGameOverNotification.MergeFrom(other.IceGameOverNotification);
        break;
      case PayloadOneofCase.IceMapSyncNotification:
        if (IceMapSyncNotification == null) {
          IceMapSyncNotification = new global::S2C_IceMapSyncNotification();
        }
        IceMapSyncNotification.MergeFrom(other.IceMapSyncNotification);
        break;
      case PayloadOneofCase.IcePlayerExitNotification:
        if (IcePlayerExitNotification == null) {
          IcePlayerExitNotification = new global::S2C_IcePlayerExitNotification();
        }
        IcePlayerExitNotification.MergeFrom(other.IcePlayerExitNotification);
        break;
      case PayloadOneofCase.DropMiniGameReadyNotification:
        if (DropMiniGameReadyNotification == null) {
          DropMiniGameReadyNotification = new global::S2C_DropMiniGameReadyNotification();
        }
        DropMiniGameReadyNotification.MergeFrom(other.DropMiniGameReadyNotification);
        break;
      case PayloadOneofCase.DropGameReadyRequest:
        if (DropGameReadyRequest == null) {
          DropGameReadyRequest = new global::C2S_DropGameReadyRequest();
        }
        DropGameReadyRequest.MergeFrom(other.DropGameReadyRequest);
        break;
      case PayloadOneofCase.DropGameReadyNotification:
        if (DropGameReadyNotification == null) {
          DropGameReadyNotification = new global::S2C_DropGameReadyNotification();
        }
        DropGameReadyNotification.MergeFrom(other.DropGameReadyNotification);
        break;
      case PayloadOneofCase.DropMiniGameStartNotification:
        if (DropMiniGameStartNotification == null) {
          DropMiniGameStartNotification = new global::S2C_DropMiniGameStartNotification();
        }
        DropMiniGameStartNotification.MergeFrom(other.DropMiniGameStartNotification);
        break;
      case PayloadOneofCase.DropPlayerSyncRequest:
        if (DropPlayerSyncRequest == null) {
          DropPlayerSyncRequest = new global::C2S_DropPlayerSyncRequest();
        }
        DropPlayerSyncRequest.MergeFrom(other.DropPlayerSyncRequest);
        break;
      case PayloadOneofCase.DropPlayerSyncNotification:
        if (DropPlayerSyncNotification == null) {
          DropPlayerSyncNotification = new global::S2C_DropPlayerSyncNotification();
        }
        DropPlayerSyncNotification.MergeFrom(other.DropPlayerSyncNotification);
        break;
      case PayloadOneofCase.DropPlayerDeathNotification:
        if (DropPlayerDeathNotification == null) {
          DropPlayerDeathNotification = new global::S2C_DropPlayerDeathNotification();
        }
        DropPlayerDeathNotification.MergeFrom(other.DropPlayerDeathNotification);
        break;
      case PayloadOneofCase.DropLevelStartNotification:
        if (DropLevelStartNotification == null) {
          DropLevelStartNotification = new global::S2C_DropLevelStartNotification();
        }
        DropLevelStartNotification.MergeFrom(other.DropLevelStartNotification);
        break;
      case PayloadOneofCase.DropLevelEndNotification:
        if (DropLevelEndNotification == null) {
          DropLevelEndNotification = new global::S2C_DropLevelEndNotification();
        }
        DropLevelEndNotification.MergeFrom(other.DropLevelEndNotification);
        break;
      case PayloadOneofCase.DropGameOverNotification:
        if (DropGameOverNotification == null) {
          DropGameOverNotification = new global::S2C_DropGameOverNotification();
        }
        DropGameOverNotification.MergeFrom(other.DropGameOverNotification);
        break;
      case PayloadOneofCase.DanceMiniGameReadyNotification:
        if (DanceMiniGameReadyNotification == null) {
          DanceMiniGameReadyNotification = new global::S2C_DanceMiniGameReadyNotification();
        }
        DanceMiniGameReadyNotification.MergeFrom(other.DanceMiniGameReadyNotification);
        break;
      case PayloadOneofCase.DanceReadyRequest:
        if (DanceReadyRequest == null) {
          DanceReadyRequest = new global::C2S_DanceReadyRequest();
        }
        DanceReadyRequest.MergeFrom(other.DanceReadyRequest);
        break;
      case PayloadOneofCase.DanceReadyNotification:
        if (DanceReadyNotification == null) {
          DanceReadyNotification = new global::S2C_DanceReadyNotification();
        }
        DanceReadyNotification.MergeFrom(other.DanceReadyNotification);
        break;
      case PayloadOneofCase.DanceStartNotification:
        if (DanceStartNotification == null) {
          DanceStartNotification = new global::S2C_DanceStartNotification();
        }
        DanceStartNotification.MergeFrom(other.DanceStartNotification);
        break;
      case PayloadOneofCase.DanceTableCreateRequest:
        if (DanceTableCreateRequest == null) {
          DanceTableCreateRequest = new global::C2S_DanceTableCreateRequest();
        }
        DanceTableCreateRequest.MergeFrom(other.DanceTableCreateRequest);
        break;
      case PayloadOneofCase.DanceTableNotification:
        if (DanceTableNotification == null) {
          DanceTableNotification = new global::S2C_DanceTableNotification();
        }
        DanceTableNotification.MergeFrom(other.DanceTableNotification);
        break;
      case PayloadOneofCase.DanceKeyPressRequest:
        if (DanceKeyPressRequest == null) {
          DanceKeyPressRequest = new global::C2S_DanceKeyPressRequest();
        }
        DanceKeyPressRequest.MergeFrom(other.DanceKeyPressRequest);
        break;
      case PayloadOneofCase.DanceKeyPressResponse:
        if (DanceKeyPressResponse == null) {
          DanceKeyPressResponse = new global::S2C_DanceKeyPressResponse();
        }
        DanceKeyPressResponse.MergeFrom(other.DanceKeyPressResponse);
        break;
      case PayloadOneofCase.DanceKeyPressNotification:
        if (DanceKeyPressNotification == null) {
          DanceKeyPressNotification = new global::S2C_DanceKeyPressNotification();
        }
        DanceKeyPressNotification.MergeFrom(other.DanceKeyPressNotification);
        break;
      case PayloadOneofCase.DanceGameOverNotification:
        if (DanceGameOverNotification == null) {
          DanceGameOverNotification = new global::S2C_DanceGameOverNotification();
        }
        DanceGameOverNotification.MergeFrom(other.DanceGameOverNotification);
        break;
      case PayloadOneofCase.DanceCloseSocketNotification:
        if (DanceCloseSocketNotification == null) {
          DanceCloseSocketNotification = new global::S2C_DanceCloseSocketNotification();
        }
        DanceCloseSocketNotification.MergeFrom(other.DanceCloseSocketNotification);
        break;
      case PayloadOneofCase.DanceTableCompleteRequest:
        if (DanceTableCompleteRequest == null) {
          DanceTableCompleteRequest = new global::C2S_DanceTableCompleteRequest();
        }
        DanceTableCompleteRequest.MergeFrom(other.DanceTableCompleteRequest);
        break;
      case PayloadOneofCase.BombMiniGameReadyNotification:
        if (BombMiniGameReadyNotification == null) {
          BombMiniGameReadyNotification = new global::S2C_BombMiniGameReadyNotification();
        }
        BombMiniGameReadyNotification.MergeFrom(other.BombMiniGameReadyNotification);
        break;
      case PayloadOneofCase.BombGameReadyRequest:
        if (BombGameReadyRequest == null) {
          BombGameReadyRequest = new global::C2S_BombGameReadyRequest();
        }
        BombGameReadyRequest.MergeFrom(other.BombGameReadyRequest);
        break;
      case PayloadOneofCase.BombGameReadyNotification:
        if (BombGameReadyNotification == null) {
          BombGameReadyNotification = new global::S2C_BombGameReadyNotification();
        }
        BombGameReadyNotification.MergeFrom(other.BombGameReadyNotification);
        break;
      case PayloadOneofCase.BombMiniGameStartNotification:
        if (BombMiniGameStartNotification == null) {
          BombMiniGameStartNotification = new global::S2C_BombMiniGameStartNotification();
        }
        BombMiniGameStartNotification.MergeFrom(other.BombMiniGameStartNotification);
        break;
      case PayloadOneofCase.BombPlayerSyncRequest:
        if (BombPlayerSyncRequest == null) {
          BombPlayerSyncRequest = new global::C2S_BombPlayerSyncRequest();
        }
        BombPlayerSyncRequest.MergeFrom(other.BombPlayerSyncRequest);
        break;
      case PayloadOneofCase.BombPlayerSyncNotification:
        if (BombPlayerSyncNotification == null) {
          BombPlayerSyncNotification = new global::S2C_BombPlayerSyncNotification();
        }
        BombPlayerSyncNotification.MergeFrom(other.BombPlayerSyncNotification);
        break;
      case PayloadOneofCase.BombPlayerDeathNotification:
        if (BombPlayerDeathNotification == null) {
          BombPlayerDeathNotification = new global::S2C_BombPlayerDeathNotification();
        }
        BombPlayerDeathNotification.MergeFrom(other.BombPlayerDeathNotification);
        break;
      case PayloadOneofCase.BombMoveRequest:
        if (BombMoveRequest == null) {
          BombMoveRequest = new global::C2S_BombMoveRequest();
        }
        BombMoveRequest.MergeFrom(other.BombMoveRequest);
        break;
      case PayloadOneofCase.BombMoveNotification:
        if (BombMoveNotification == null) {
          BombMoveNotification = new global::S2C_BombMoveNotification();
        }
        BombMoveNotification.MergeFrom(other.BombMoveNotification);
        break;
      case PayloadOneofCase.BombGameOverNotification:
        if (BombGameOverNotification == null) {
          BombGameOverNotification = new global::S2C_BombGameOverNotification();
        }
        BombGameOverNotification.MergeFrom(other.BombGameOverNotification);
        break;
      case PayloadOneofCase.DartMiniGameReadyNotification:
        if (DartMiniGameReadyNotification == null) {
          DartMiniGameReadyNotification = new global::S2C_DartMiniGameReadyNotification();
        }
        DartMiniGameReadyNotification.MergeFrom(other.DartMiniGameReadyNotification);
        break;
      case PayloadOneofCase.DartGameReadyRequest:
        if (DartGameReadyRequest == null) {
          DartGameReadyRequest = new global::C2S_DartGameReadyRequest();
        }
        DartGameReadyRequest.MergeFrom(other.DartGameReadyRequest);
        break;
      case PayloadOneofCase.DartGameReadyNotification:
        if (DartGameReadyNotification == null) {
          DartGameReadyNotification = new global::S2C_DartGameReadyNotification();
        }
        DartGameReadyNotification.MergeFrom(other.DartGameReadyNotification);
        break;
      case PayloadOneofCase.DartMiniGameStartNotification:
        if (DartMiniGameStartNotification == null) {
          DartMiniGameStartNotification = new global::S2C_DartMiniGameStartNotification();
        }
        DartMiniGameStartNotification.MergeFrom(other.DartMiniGameStartNotification);
        break;
      case PayloadOneofCase.DartGameThrowRequest:
        if (DartGameThrowRequest == null) {
          DartGameThrowRequest = new global::C2S_DartGameThrowRequest();
        }
        DartGameThrowRequest.MergeFrom(other.DartGameThrowRequest);
        break;
      case PayloadOneofCase.DartGameThrowNotification:
        if (DartGameThrowNotification == null) {
          DartGameThrowNotification = new global::S2C_DartGameThrowNotification();
        }
        DartGameThrowNotification.MergeFrom(other.DartGameThrowNotification);
        break;
      case PayloadOneofCase.DartGameOverNotification:
        if (DartGameOverNotification == null) {
          DartGameOverNotification = new global::S2C_DartGameOverNotification();
        }
        DartGameOverNotification.MergeFrom(other.DartGameOverNotification);
        break;
      case PayloadOneofCase.DartPannelSyncRequest:
        if (DartPannelSyncRequest == null) {
          DartPannelSyncRequest = new global::C2S_DartPannelSyncRequest();
        }
        DartPannelSyncRequest.MergeFrom(other.DartPannelSyncRequest);
        break;
      case PayloadOneofCase.DartPannelSyncNotification:
        if (DartPannelSyncNotification == null) {
          DartPannelSyncNotification = new global::S2C_DartPannelSyncNotification();
        }
        DartPannelSyncNotification.MergeFrom(other.DartPannelSyncNotification);
        break;
      case PayloadOneofCase.DartSyncRequest:
        if (DartSyncRequest == null) {
          DartSyncRequest = new global::C2S_DartSyncRequest();
        }
        DartSyncRequest.MergeFrom(other.DartSyncRequest);
        break;
      case PayloadOneofCase.DartSyncNotification:
        if (DartSyncNotification == null) {
          DartSyncNotification = new global::S2C_DartSyncNotification();
        }
        DartSyncNotification.MergeFrom(other.DartSyncNotification);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          global::C2S_RegisterRequest subBuilder = new global::C2S_RegisterRequest();
          if (payloadCase_ == PayloadOneofCase.RegisterRequest) {
            subBuilder.MergeFrom(RegisterRequest);
          }
          input.ReadMessage(subBuilder);
          RegisterRequest = subBuilder;
          break;
        }
        case 18: {
          global::S2C_RegisterResponse subBuilder = new global::S2C_RegisterResponse();
          if (payloadCase_ == PayloadOneofCase.RegisterResponse) {
            subBuilder.MergeFrom(RegisterResponse);
          }
          input.ReadMessage(subBuilder);
          RegisterResponse = subBuilder;
          break;
        }
        case 26: {
          global::C2S_LoginRequest subBuilder = new global::C2S_LoginRequest();
          if (payloadCase_ == PayloadOneofCase.LoginRequest) {
            subBuilder.MergeFrom(LoginRequest);
          }
          input.ReadMessage(subBuilder);
          LoginRequest = subBuilder;
          break;
        }
        case 34: {
          global::S2C_LoginResponse subBuilder = new global::S2C_LoginResponse();
          if (payloadCase_ == PayloadOneofCase.LoginResponse) {
            subBuilder.MergeFrom(LoginResponse);
          }
          input.ReadMessage(subBuilder);
          LoginResponse = subBuilder;
          break;
        }
        case 42: {
          global::C2S_LoggoutRequest subBuilder = new global::C2S_LoggoutRequest();
          if (payloadCase_ == PayloadOneofCase.LogoutRequest) {
            subBuilder.MergeFrom(LogoutRequest);
          }
          input.ReadMessage(subBuilder);
          LogoutRequest = subBuilder;
          break;
        }
        case 66: {
          global::S2C_CloseSocketNotification subBuilder = new global::S2C_CloseSocketNotification();
          if (payloadCase_ == PayloadOneofCase.CloseSocketNotification) {
            subBuilder.MergeFrom(CloseSocketNotification);
          }
          input.ReadMessage(subBuilder);
          CloseSocketNotification = subBuilder;
          break;
        }
        case 90: {
          global::C2S_LobbyJoinRequest subBuilder = new global::C2S_LobbyJoinRequest();
          if (payloadCase_ == PayloadOneofCase.LobbyJoinRequest) {
            subBuilder.MergeFrom(LobbyJoinRequest);
          }
          input.ReadMessage(subBuilder);
          LobbyJoinRequest = subBuilder;
          break;
        }
        case 98: {
          global::S2C_LobbyJoinResponse subBuilder = new global::S2C_LobbyJoinResponse();
          if (payloadCase_ == PayloadOneofCase.LobbyJoinResponse) {
            subBuilder.MergeFrom(LobbyJoinResponse);
          }
          input.ReadMessage(subBuilder);
          LobbyJoinResponse = subBuilder;
          break;
        }
        case 106: {
          global::C2S_LobbyLeaveRequest subBuilder = new global::C2S_LobbyLeaveRequest();
          if (payloadCase_ == PayloadOneofCase.LobbyLeaveRequest) {
            subBuilder.MergeFrom(LobbyLeaveRequest);
          }
          input.ReadMessage(subBuilder);
          LobbyLeaveRequest = subBuilder;
          break;
        }
        case 114: {
          global::S2C_LobbyLeaveResponse subBuilder = new global::S2C_LobbyLeaveResponse();
          if (payloadCase_ == PayloadOneofCase.LobbyLeaveResponse) {
            subBuilder.MergeFrom(LobbyLeaveResponse);
          }
          input.ReadMessage(subBuilder);
          LobbyLeaveResponse = subBuilder;
          break;
        }
        case 122: {
          global::C2S_LobbyUserListRequest subBuilder = new global::C2S_LobbyUserListRequest();
          if (payloadCase_ == PayloadOneofCase.LobbyUserListRequest) {
            subBuilder.MergeFrom(LobbyUserListRequest);
          }
          input.ReadMessage(subBuilder);
          LobbyUserListRequest = subBuilder;
          break;
        }
        case 130: {
          global::S2C_LobbyUserListResponse subBuilder = new global::S2C_LobbyUserListResponse();
          if (payloadCase_ == PayloadOneofCase.LobbyUserListResponse) {
            subBuilder.MergeFrom(LobbyUserListResponse);
          }
          input.ReadMessage(subBuilder);
          LobbyUserListResponse = subBuilder;
          break;
        }
        case 138: {
          global::C2S_LobbyUserDetailRequest subBuilder = new global::C2S_LobbyUserDetailRequest();
          if (payloadCase_ == PayloadOneofCase.LobbyUserDetailRequest) {
            subBuilder.MergeFrom(LobbyUserDetailRequest);
          }
          input.ReadMessage(subBuilder);
          LobbyUserDetailRequest = subBuilder;
          break;
        }
        case 146: {
          global::S2C_LobbyUserDetailResponse subBuilder = new global::S2C_LobbyUserDetailResponse();
          if (payloadCase_ == PayloadOneofCase.LobbyUserDetailResponse) {
            subBuilder.MergeFrom(LobbyUserDetailResponse);
          }
          input.ReadMessage(subBuilder);
          LobbyUserDetailResponse = subBuilder;
          break;
        }
        case 250: {
          global::C2S_RoomListRequest subBuilder = new global::C2S_RoomListRequest();
          if (payloadCase_ == PayloadOneofCase.RoomListRequest) {
            subBuilder.MergeFrom(RoomListRequest);
          }
          input.ReadMessage(subBuilder);
          RoomListRequest = subBuilder;
          break;
        }
        case 258: {
          global::S2C_RoomListResponse subBuilder = new global::S2C_RoomListResponse();
          if (payloadCase_ == PayloadOneofCase.RoomListResponse) {
            subBuilder.MergeFrom(RoomListResponse);
          }
          input.ReadMessage(subBuilder);
          RoomListResponse = subBuilder;
          break;
        }
        case 266: {
          global::C2S_CreateRoomRequest subBuilder = new global::C2S_CreateRoomRequest();
          if (payloadCase_ == PayloadOneofCase.CreateRoomRequest) {
            subBuilder.MergeFrom(CreateRoomRequest);
          }
          input.ReadMessage(subBuilder);
          CreateRoomRequest = subBuilder;
          break;
        }
        case 274: {
          global::S2C_CreateRoomResponse subBuilder = new global::S2C_CreateRoomResponse();
          if (payloadCase_ == PayloadOneofCase.CreateRoomResponse) {
            subBuilder.MergeFrom(CreateRoomResponse);
          }
          input.ReadMessage(subBuilder);
          CreateRoomResponse = subBuilder;
          break;
        }
        case 282: {
          global::C2S_JoinRoomRequest subBuilder = new global::C2S_JoinRoomRequest();
          if (payloadCase_ == PayloadOneofCase.JoinRoomRequest) {
            subBuilder.MergeFrom(JoinRoomRequest);
          }
          input.ReadMessage(subBuilder);
          JoinRoomRequest = subBuilder;
          break;
        }
        case 290: {
          global::S2C_JoinRoomResponse subBuilder = new global::S2C_JoinRoomResponse();
          if (payloadCase_ == PayloadOneofCase.JoinRoomResponse) {
            subBuilder.MergeFrom(JoinRoomResponse);
          }
          input.ReadMessage(subBuilder);
          JoinRoomResponse = subBuilder;
          break;
        }
        case 298: {
          global::S2C_JoinRoomNotification subBuilder = new global::S2C_JoinRoomNotification();
          if (payloadCase_ == PayloadOneofCase.JoinRoomNotification) {
            subBuilder.MergeFrom(JoinRoomNotification);
          }
          input.ReadMessage(subBuilder);
          JoinRoomNotification = subBuilder;
          break;
        }
        case 306: {
          global::C2S_LeaveRoomRequest subBuilder = new global::C2S_LeaveRoomRequest();
          if (payloadCase_ == PayloadOneofCase.LeaveRoomRequest) {
            subBuilder.MergeFrom(LeaveRoomRequest);
          }
          input.ReadMessage(subBuilder);
          LeaveRoomRequest = subBuilder;
          break;
        }
        case 314: {
          global::S2C_LeaveRoomResponse subBuilder = new global::S2C_LeaveRoomResponse();
          if (payloadCase_ == PayloadOneofCase.LeaveRoomResponse) {
            subBuilder.MergeFrom(LeaveRoomResponse);
          }
          input.ReadMessage(subBuilder);
          LeaveRoomResponse = subBuilder;
          break;
        }
        case 322: {
          global::S2C_LeaveRoomNotification subBuilder = new global::S2C_LeaveRoomNotification();
          if (payloadCase_ == PayloadOneofCase.LeaveRoomNotification) {
            subBuilder.MergeFrom(LeaveRoomNotification);
          }
          input.ReadMessage(subBuilder);
          LeaveRoomNotification = subBuilder;
          break;
        }
        case 330: {
          global::C2S_GamePrepareRequest subBuilder = new global::C2S_GamePrepareRequest();
          if (payloadCase_ == PayloadOneofCase.GamePrepareRequest) {
            subBuilder.MergeFrom(GamePrepareRequest);
          }
          input.ReadMessage(subBuilder);
          GamePrepareRequest = subBuilder;
          break;
        }
        case 338: {
          global::S2C_GamePrepareResponse subBuilder = new global::S2C_GamePrepareResponse();
          if (payloadCase_ == PayloadOneofCase.GamePrepareResponse) {
            subBuilder.MergeFrom(GamePrepareResponse);
          }
          input.ReadMessage(subBuilder);
          GamePrepareResponse = subBuilder;
          break;
        }
        case 346: {
          global::S2C_GamePrepareNotification subBuilder = new global::S2C_GamePrepareNotification();
          if (payloadCase_ == PayloadOneofCase.GamePrepareNotification) {
            subBuilder.MergeFrom(GamePrepareNotification);
          }
          input.ReadMessage(subBuilder);
          GamePrepareNotification = subBuilder;
          break;
        }
        case 410: {
          global::C2S_GameStartRequest subBuilder = new global::C2S_GameStartRequest();
          if (payloadCase_ == PayloadOneofCase.GameStartRequest) {
            subBuilder.MergeFrom(GameStartRequest);
          }
          input.ReadMessage(subBuilder);
          GameStartRequest = subBuilder;
          break;
        }
        case 418: {
          global::S2C_GameStartNotification subBuilder = new global::S2C_GameStartNotification();
          if (payloadCase_ == PayloadOneofCase.GameStartNotification) {
            subBuilder.MergeFrom(GameStartNotification);
          }
          input.ReadMessage(subBuilder);
          GameStartNotification = subBuilder;
          break;
        }
        case 490: {
          global::C2S_RollDiceRequest subBuilder = new global::C2S_RollDiceRequest();
          if (payloadCase_ == PayloadOneofCase.RollDiceRequest) {
            subBuilder.MergeFrom(RollDiceRequest);
          }
          input.ReadMessage(subBuilder);
          RollDiceRequest = subBuilder;
          break;
        }
        case 498: {
          global::S2C_RollDiceResponse subBuilder = new global::S2C_RollDiceResponse();
          if (payloadCase_ == PayloadOneofCase.RollDiceResponse) {
            subBuilder.MergeFrom(RollDiceResponse);
          }
          input.ReadMessage(subBuilder);
          RollDiceResponse = subBuilder;
          break;
        }
        case 506: {
          global::S2C_RollDiceNotification subBuilder = new global::S2C_RollDiceNotification();
          if (payloadCase_ == PayloadOneofCase.RollDiceNotification) {
            subBuilder.MergeFrom(RollDiceNotification);
          }
          input.ReadMessage(subBuilder);
          RollDiceNotification = subBuilder;
          break;
        }
        case 514: {
          global::C2S_MovePlayerBoardRequest subBuilder = new global::C2S_MovePlayerBoardRequest();
          if (payloadCase_ == PayloadOneofCase.MovePlayerBoardRequest) {
            subBuilder.MergeFrom(MovePlayerBoardRequest);
          }
          input.ReadMessage(subBuilder);
          MovePlayerBoardRequest = subBuilder;
          break;
        }
        case 522: {
          global::S2C_MovePlayerBoardResponse subBuilder = new global::S2C_MovePlayerBoardResponse();
          if (payloadCase_ == PayloadOneofCase.MovePlayerBoardResponse) {
            subBuilder.MergeFrom(MovePlayerBoardResponse);
          }
          input.ReadMessage(subBuilder);
          MovePlayerBoardResponse = subBuilder;
          break;
        }
        case 530: {
          global::S2C_MovePlayerBoardNotification subBuilder = new global::S2C_MovePlayerBoardNotification();
          if (payloadCase_ == PayloadOneofCase.MovePlayerBoardNotification) {
            subBuilder.MergeFrom(MovePlayerBoardNotification);
          }
          input.ReadMessage(subBuilder);
          MovePlayerBoardNotification = subBuilder;
          break;
        }
        case 538: {
          global::C2S_PurchaseTileRequest subBuilder = new global::C2S_PurchaseTileRequest();
          if (payloadCase_ == PayloadOneofCase.PurchaseTileRequest) {
            subBuilder.MergeFrom(PurchaseTileRequest);
          }
          input.ReadMessage(subBuilder);
          PurchaseTileRequest = subBuilder;
          break;
        }
        case 546: {
          global::S2C_PurchaseTileResponse subBuilder = new global::S2C_PurchaseTileResponse();
          if (payloadCase_ == PayloadOneofCase.PurchaseTileResponse) {
            subBuilder.MergeFrom(PurchaseTileResponse);
          }
          input.ReadMessage(subBuilder);
          PurchaseTileResponse = subBuilder;
          break;
        }
        case 554: {
          global::S2C_PurchaseTileNotification subBuilder = new global::S2C_PurchaseTileNotification();
          if (payloadCase_ == PayloadOneofCase.PurchaseTileNotification) {
            subBuilder.MergeFrom(PurchaseTileNotification);
          }
          input.ReadMessage(subBuilder);
          PurchaseTileNotification = subBuilder;
          break;
        }
        case 562: {
          global::S2C_GameEndNotification subBuilder = new global::S2C_GameEndNotification();
          if (payloadCase_ == PayloadOneofCase.GameEndNotification) {
            subBuilder.MergeFrom(GameEndNotification);
          }
          input.ReadMessage(subBuilder);
          GameEndNotification = subBuilder;
          break;
        }
        case 570: {
          global::C2S_PurchaseTrophyRequest subBuilder = new global::C2S_PurchaseTrophyRequest();
          if (payloadCase_ == PayloadOneofCase.PurchaseTrophyRequest) {
            subBuilder.MergeFrom(PurchaseTrophyRequest);
          }
          input.ReadMessage(subBuilder);
          PurchaseTrophyRequest = subBuilder;
          break;
        }
        case 578: {
          global::S2C_PurchaseTrophyResponse subBuilder = new global::S2C_PurchaseTrophyResponse();
          if (payloadCase_ == PayloadOneofCase.PurchaseTrophyResponse) {
            subBuilder.MergeFrom(PurchaseTrophyResponse);
          }
          input.ReadMessage(subBuilder);
          PurchaseTrophyResponse = subBuilder;
          break;
        }
        case 586: {
          global::S2C_PurchaseTrophyNotification subBuilder = new global::S2C_PurchaseTrophyNotification();
          if (payloadCase_ == PayloadOneofCase.PurchaseTrophyNotification) {
            subBuilder.MergeFrom(PurchaseTrophyNotification);
          }
          input.ReadMessage(subBuilder);
          PurchaseTrophyNotification = subBuilder;
          break;
        }
        case 594: {
          global::C2S_TilePenaltyRequest subBuilder = new global::C2S_TilePenaltyRequest();
          if (payloadCase_ == PayloadOneofCase.TilePenaltyRequest) {
            subBuilder.MergeFrom(TilePenaltyRequest);
          }
          input.ReadMessage(subBuilder);
          TilePenaltyRequest = subBuilder;
          break;
        }
        case 602: {
          global::S2C_TilePenaltyResponse subBuilder = new global::S2C_TilePenaltyResponse();
          if (payloadCase_ == PayloadOneofCase.TilePenaltyResponse) {
            subBuilder.MergeFrom(TilePenaltyResponse);
          }
          input.ReadMessage(subBuilder);
          TilePenaltyResponse = subBuilder;
          break;
        }
        case 610: {
          global::S2C_TilePenaltyNotification subBuilder = new global::S2C_TilePenaltyNotification();
          if (payloadCase_ == PayloadOneofCase.TilePenaltyNotification) {
            subBuilder.MergeFrom(TilePenaltyNotification);
          }
          input.ReadMessage(subBuilder);
          TilePenaltyNotification = subBuilder;
          break;
        }
        case 618: {
          global::C2S_DiceGameRequest subBuilder = new global::C2S_DiceGameRequest();
          if (payloadCase_ == PayloadOneofCase.DiceGameRequest) {
            subBuilder.MergeFrom(DiceGameRequest);
          }
          input.ReadMessage(subBuilder);
          DiceGameRequest = subBuilder;
          break;
        }
        case 626: {
          global::S2C_DiceGameResponse subBuilder = new global::S2C_DiceGameResponse();
          if (payloadCase_ == PayloadOneofCase.DiceGameResponse) {
            subBuilder.MergeFrom(DiceGameResponse);
          }
          input.ReadMessage(subBuilder);
          DiceGameResponse = subBuilder;
          break;
        }
        case 634: {
          global::S2C_DiceGameNotification subBuilder = new global::S2C_DiceGameNotification();
          if (payloadCase_ == PayloadOneofCase.DiceGameNotification) {
            subBuilder.MergeFrom(DiceGameNotification);
          }
          input.ReadMessage(subBuilder);
          DiceGameNotification = subBuilder;
          break;
        }
        case 642: {
          global::C2S_TurnEndRequest subBuilder = new global::C2S_TurnEndRequest();
          if (payloadCase_ == PayloadOneofCase.TurnEndRequest) {
            subBuilder.MergeFrom(TurnEndRequest);
          }
          input.ReadMessage(subBuilder);
          TurnEndRequest = subBuilder;
          break;
        }
        case 650: {
          global::S2C_TurnEndNotification subBuilder = new global::S2C_TurnEndNotification();
          if (payloadCase_ == PayloadOneofCase.TurnEndNotification) {
            subBuilder.MergeFrom(TurnEndNotification);
          }
          input.ReadMessage(subBuilder);
          TurnEndNotification = subBuilder;
          break;
        }
        case 730: {
          global::C2S_BackToTheRoomRequest subBuilder = new global::C2S_BackToTheRoomRequest();
          if (payloadCase_ == PayloadOneofCase.BackToTheRoomRequest) {
            subBuilder.MergeFrom(BackToTheRoomRequest);
          }
          input.ReadMessage(subBuilder);
          BackToTheRoomRequest = subBuilder;
          break;
        }
        case 738: {
          global::S2C_BackToTheRoomResponse subBuilder = new global::S2C_BackToTheRoomResponse();
          if (payloadCase_ == PayloadOneofCase.BackToTheRoomResponse) {
            subBuilder.MergeFrom(BackToTheRoomResponse);
          }
          input.ReadMessage(subBuilder);
          BackToTheRoomResponse = subBuilder;
          break;
        }
        case 746: {
          global::S2C_BackToTheRoomNotification subBuilder = new global::S2C_BackToTheRoomNotification();
          if (payloadCase_ == PayloadOneofCase.BackToTheRoomNotification) {
            subBuilder.MergeFrom(BackToTheRoomNotification);
          }
          input.ReadMessage(subBuilder);
          BackToTheRoomNotification = subBuilder;
          break;
        }
        case 810: {
          global::C2S_StartMiniGameRequest subBuilder = new global::C2S_StartMiniGameRequest();
          if (payloadCase_ == PayloadOneofCase.StartMiniGameRequest) {
            subBuilder.MergeFrom(StartMiniGameRequest);
          }
          input.ReadMessage(subBuilder);
          StartMiniGameRequest = subBuilder;
          break;
        }
        case 1610: {
          global::S2C_IceMiniGameReadyNotification subBuilder = new global::S2C_IceMiniGameReadyNotification();
          if (payloadCase_ == PayloadOneofCase.IceMiniGameReadyNotification) {
            subBuilder.MergeFrom(IceMiniGameReadyNotification);
          }
          input.ReadMessage(subBuilder);
          IceMiniGameReadyNotification = subBuilder;
          break;
        }
        case 1618: {
          global::C2S_IceGameReadyRequest subBuilder = new global::C2S_IceGameReadyRequest();
          if (payloadCase_ == PayloadOneofCase.IceGameReadyRequest) {
            subBuilder.MergeFrom(IceGameReadyRequest);
          }
          input.ReadMessage(subBuilder);
          IceGameReadyRequest = subBuilder;
          break;
        }
        case 1626: {
          global::S2C_IceGameReadyNotification subBuilder = new global::S2C_IceGameReadyNotification();
          if (payloadCase_ == PayloadOneofCase.IceGameReadyNotification) {
            subBuilder.MergeFrom(IceGameReadyNotification);
          }
          input.ReadMessage(subBuilder);
          IceGameReadyNotification = subBuilder;
          break;
        }
        case 1634: {
          global::S2C_IceMiniGameStartNotification subBuilder = new global::S2C_IceMiniGameStartNotification();
          if (payloadCase_ == PayloadOneofCase.IceMiniGameStartNotification) {
            subBuilder.MergeFrom(IceMiniGameStartNotification);
          }
          input.ReadMessage(subBuilder);
          IceMiniGameStartNotification = subBuilder;
          break;
        }
        case 1642: {
          global::C2S_IcePlayerSyncRequest subBuilder = new global::C2S_IcePlayerSyncRequest();
          if (payloadCase_ == PayloadOneofCase.IcePlayerSyncRequest) {
            subBuilder.MergeFrom(IcePlayerSyncRequest);
          }
          input.ReadMessage(subBuilder);
          IcePlayerSyncRequest = subBuilder;
          break;
        }
        case 1650: {
          global::S2C_IcePlayerSyncNotification subBuilder = new global::S2C_IcePlayerSyncNotification();
          if (payloadCase_ == PayloadOneofCase.IcePlayerSyncNotification) {
            subBuilder.MergeFrom(IcePlayerSyncNotification);
          }
          input.ReadMessage(subBuilder);
          IcePlayerSyncNotification = subBuilder;
          break;
        }
        case 1658: {
          global::C2S_IcePlayerDamageRequest subBuilder = new global::C2S_IcePlayerDamageRequest();
          if (payloadCase_ == PayloadOneofCase.IcePlayerDamageRequest) {
            subBuilder.MergeFrom(IcePlayerDamageRequest);
          }
          input.ReadMessage(subBuilder);
          IcePlayerDamageRequest = subBuilder;
          break;
        }
        case 1666: {
          global::S2C_IcePlayerDamageNotification subBuilder = new global::S2C_IcePlayerDamageNotification();
          if (payloadCase_ == PayloadOneofCase.IcePlayerDamageNotification) {
            subBuilder.MergeFrom(IcePlayerDamageNotification);
          }
          input.ReadMessage(subBuilder);
          IcePlayerDamageNotification = subBuilder;
          break;
        }
        case 1674: {
          global::S2C_IcePlayerDeathNotification subBuilder = new global::S2C_IcePlayerDeathNotification();
          if (payloadCase_ == PayloadOneofCase.IcePlayerDeathNotification) {
            subBuilder.MergeFrom(IcePlayerDeathNotification);
          }
          input.ReadMessage(subBuilder);
          IcePlayerDeathNotification = subBuilder;
          break;
        }
        case 1682: {
          global::S2C_IceGameOverNotification subBuilder = new global::S2C_IceGameOverNotification();
          if (payloadCase_ == PayloadOneofCase.IceGameOverNotification) {
            subBuilder.MergeFrom(IceGameOverNotification);
          }
          input.ReadMessage(subBuilder);
          IceGameOverNotification = subBuilder;
          break;
        }
        case 1690: {
          global::S2C_IceMapSyncNotification subBuilder = new global::S2C_IceMapSyncNotification();
          if (payloadCase_ == PayloadOneofCase.IceMapSyncNotification) {
            subBuilder.MergeFrom(IceMapSyncNotification);
          }
          input.ReadMessage(subBuilder);
          IceMapSyncNotification = subBuilder;
          break;
        }
        case 1698: {
          global::S2C_IcePlayerExitNotification subBuilder = new global::S2C_IcePlayerExitNotification();
          if (payloadCase_ == PayloadOneofCase.IcePlayerExitNotification) {
            subBuilder.MergeFrom(IcePlayerExitNotification);
          }
          input.ReadMessage(subBuilder);
          IcePlayerExitNotification = subBuilder;
          break;
        }
        case 2410: {
          global::S2C_DropMiniGameReadyNotification subBuilder = new global::S2C_DropMiniGameReadyNotification();
          if (payloadCase_ == PayloadOneofCase.DropMiniGameReadyNotification) {
            subBuilder.MergeFrom(DropMiniGameReadyNotification);
          }
          input.ReadMessage(subBuilder);
          DropMiniGameReadyNotification = subBuilder;
          break;
        }
        case 2418: {
          global::C2S_DropGameReadyRequest subBuilder = new global::C2S_DropGameReadyRequest();
          if (payloadCase_ == PayloadOneofCase.DropGameReadyRequest) {
            subBuilder.MergeFrom(DropGameReadyRequest);
          }
          input.ReadMessage(subBuilder);
          DropGameReadyRequest = subBuilder;
          break;
        }
        case 2426: {
          global::S2C_DropGameReadyNotification subBuilder = new global::S2C_DropGameReadyNotification();
          if (payloadCase_ == PayloadOneofCase.DropGameReadyNotification) {
            subBuilder.MergeFrom(DropGameReadyNotification);
          }
          input.ReadMessage(subBuilder);
          DropGameReadyNotification = subBuilder;
          break;
        }
        case 2434: {
          global::S2C_DropMiniGameStartNotification subBuilder = new global::S2C_DropMiniGameStartNotification();
          if (payloadCase_ == PayloadOneofCase.DropMiniGameStartNotification) {
            subBuilder.MergeFrom(DropMiniGameStartNotification);
          }
          input.ReadMessage(subBuilder);
          DropMiniGameStartNotification = subBuilder;
          break;
        }
        case 2442: {
          global::C2S_DropPlayerSyncRequest subBuilder = new global::C2S_DropPlayerSyncRequest();
          if (payloadCase_ == PayloadOneofCase.DropPlayerSyncRequest) {
            subBuilder.MergeFrom(DropPlayerSyncRequest);
          }
          input.ReadMessage(subBuilder);
          DropPlayerSyncRequest = subBuilder;
          break;
        }
        case 2450: {
          global::S2C_DropPlayerSyncNotification subBuilder = new global::S2C_DropPlayerSyncNotification();
          if (payloadCase_ == PayloadOneofCase.DropPlayerSyncNotification) {
            subBuilder.MergeFrom(DropPlayerSyncNotification);
          }
          input.ReadMessage(subBuilder);
          DropPlayerSyncNotification = subBuilder;
          break;
        }
        case 2458: {
          global::S2C_DropPlayerDeathNotification subBuilder = new global::S2C_DropPlayerDeathNotification();
          if (payloadCase_ == PayloadOneofCase.DropPlayerDeathNotification) {
            subBuilder.MergeFrom(DropPlayerDeathNotification);
          }
          input.ReadMessage(subBuilder);
          DropPlayerDeathNotification = subBuilder;
          break;
        }
        case 2466: {
          global::S2C_DropLevelStartNotification subBuilder = new global::S2C_DropLevelStartNotification();
          if (payloadCase_ == PayloadOneofCase.DropLevelStartNotification) {
            subBuilder.MergeFrom(DropLevelStartNotification);
          }
          input.ReadMessage(subBuilder);
          DropLevelStartNotification = subBuilder;
          break;
        }
        case 2474: {
          global::S2C_DropLevelEndNotification subBuilder = new global::S2C_DropLevelEndNotification();
          if (payloadCase_ == PayloadOneofCase.DropLevelEndNotification) {
            subBuilder.MergeFrom(DropLevelEndNotification);
          }
          input.ReadMessage(subBuilder);
          DropLevelEndNotification = subBuilder;
          break;
        }
        case 2482: {
          global::S2C_DropGameOverNotification subBuilder = new global::S2C_DropGameOverNotification();
          if (payloadCase_ == PayloadOneofCase.DropGameOverNotification) {
            subBuilder.MergeFrom(DropGameOverNotification);
          }
          input.ReadMessage(subBuilder);
          DropGameOverNotification = subBuilder;
          break;
        }
        case 3210: {
          global::S2C_DanceMiniGameReadyNotification subBuilder = new global::S2C_DanceMiniGameReadyNotification();
          if (payloadCase_ == PayloadOneofCase.DanceMiniGameReadyNotification) {
            subBuilder.MergeFrom(DanceMiniGameReadyNotification);
          }
          input.ReadMessage(subBuilder);
          DanceMiniGameReadyNotification = subBuilder;
          break;
        }
        case 3218: {
          global::C2S_DanceReadyRequest subBuilder = new global::C2S_DanceReadyRequest();
          if (payloadCase_ == PayloadOneofCase.DanceReadyRequest) {
            subBuilder.MergeFrom(DanceReadyRequest);
          }
          input.ReadMessage(subBuilder);
          DanceReadyRequest = subBuilder;
          break;
        }
        case 3226: {
          global::S2C_DanceReadyNotification subBuilder = new global::S2C_DanceReadyNotification();
          if (payloadCase_ == PayloadOneofCase.DanceReadyNotification) {
            subBuilder.MergeFrom(DanceReadyNotification);
          }
          input.ReadMessage(subBuilder);
          DanceReadyNotification = subBuilder;
          break;
        }
        case 3234: {
          global::S2C_DanceStartNotification subBuilder = new global::S2C_DanceStartNotification();
          if (payloadCase_ == PayloadOneofCase.DanceStartNotification) {
            subBuilder.MergeFrom(DanceStartNotification);
          }
          input.ReadMessage(subBuilder);
          DanceStartNotification = subBuilder;
          break;
        }
        case 3242: {
          global::C2S_DanceTableCreateRequest subBuilder = new global::C2S_DanceTableCreateRequest();
          if (payloadCase_ == PayloadOneofCase.DanceTableCreateRequest) {
            subBuilder.MergeFrom(DanceTableCreateRequest);
          }
          input.ReadMessage(subBuilder);
          DanceTableCreateRequest = subBuilder;
          break;
        }
        case 3250: {
          global::S2C_DanceTableNotification subBuilder = new global::S2C_DanceTableNotification();
          if (payloadCase_ == PayloadOneofCase.DanceTableNotification) {
            subBuilder.MergeFrom(DanceTableNotification);
          }
          input.ReadMessage(subBuilder);
          DanceTableNotification = subBuilder;
          break;
        }
        case 3258: {
          global::C2S_DanceKeyPressRequest subBuilder = new global::C2S_DanceKeyPressRequest();
          if (payloadCase_ == PayloadOneofCase.DanceKeyPressRequest) {
            subBuilder.MergeFrom(DanceKeyPressRequest);
          }
          input.ReadMessage(subBuilder);
          DanceKeyPressRequest = subBuilder;
          break;
        }
        case 3266: {
          global::S2C_DanceKeyPressResponse subBuilder = new global::S2C_DanceKeyPressResponse();
          if (payloadCase_ == PayloadOneofCase.DanceKeyPressResponse) {
            subBuilder.MergeFrom(DanceKeyPressResponse);
          }
          input.ReadMessage(subBuilder);
          DanceKeyPressResponse = subBuilder;
          break;
        }
        case 3274: {
          global::S2C_DanceKeyPressNotification subBuilder = new global::S2C_DanceKeyPressNotification();
          if (payloadCase_ == PayloadOneofCase.DanceKeyPressNotification) {
            subBuilder.MergeFrom(DanceKeyPressNotification);
          }
          input.ReadMessage(subBuilder);
          DanceKeyPressNotification = subBuilder;
          break;
        }
        case 3282: {
          global::S2C_DanceGameOverNotification subBuilder = new global::S2C_DanceGameOverNotification();
          if (payloadCase_ == PayloadOneofCase.DanceGameOverNotification) {
            subBuilder.MergeFrom(DanceGameOverNotification);
          }
          input.ReadMessage(subBuilder);
          DanceGameOverNotification = subBuilder;
          break;
        }
        case 3290: {
          global::S2C_DanceCloseSocketNotification subBuilder = new global::S2C_DanceCloseSocketNotification();
          if (payloadCase_ == PayloadOneofCase.DanceCloseSocketNotification) {
            subBuilder.MergeFrom(DanceCloseSocketNotification);
          }
          input.ReadMessage(subBuilder);
          DanceCloseSocketNotification = subBuilder;
          break;
        }
        case 3298: {
          global::C2S_DanceTableCompleteRequest subBuilder = new global::C2S_DanceTableCompleteRequest();
          if (payloadCase_ == PayloadOneofCase.DanceTableCompleteRequest) {
            subBuilder.MergeFrom(DanceTableCompleteRequest);
          }
          input.ReadMessage(subBuilder);
          DanceTableCompleteRequest = subBuilder;
          break;
        }
        case 4010: {
          global::S2C_BombMiniGameReadyNotification subBuilder = new global::S2C_BombMiniGameReadyNotification();
          if (payloadCase_ == PayloadOneofCase.BombMiniGameReadyNotification) {
            subBuilder.MergeFrom(BombMiniGameReadyNotification);
          }
          input.ReadMessage(subBuilder);
          BombMiniGameReadyNotification = subBuilder;
          break;
        }
        case 4018: {
          global::C2S_BombGameReadyRequest subBuilder = new global::C2S_BombGameReadyRequest();
          if (payloadCase_ == PayloadOneofCase.BombGameReadyRequest) {
            subBuilder.MergeFrom(BombGameReadyRequest);
          }
          input.ReadMessage(subBuilder);
          BombGameReadyRequest = subBuilder;
          break;
        }
        case 4026: {
          global::S2C_BombGameReadyNotification subBuilder = new global::S2C_BombGameReadyNotification();
          if (payloadCase_ == PayloadOneofCase.BombGameReadyNotification) {
            subBuilder.MergeFrom(BombGameReadyNotification);
          }
          input.ReadMessage(subBuilder);
          BombGameReadyNotification = subBuilder;
          break;
        }
        case 4034: {
          global::S2C_BombMiniGameStartNotification subBuilder = new global::S2C_BombMiniGameStartNotification();
          if (payloadCase_ == PayloadOneofCase.BombMiniGameStartNotification) {
            subBuilder.MergeFrom(BombMiniGameStartNotification);
          }
          input.ReadMessage(subBuilder);
          BombMiniGameStartNotification = subBuilder;
          break;
        }
        case 4042: {
          global::C2S_BombPlayerSyncRequest subBuilder = new global::C2S_BombPlayerSyncRequest();
          if (payloadCase_ == PayloadOneofCase.BombPlayerSyncRequest) {
            subBuilder.MergeFrom(BombPlayerSyncRequest);
          }
          input.ReadMessage(subBuilder);
          BombPlayerSyncRequest = subBuilder;
          break;
        }
        case 4050: {
          global::S2C_BombPlayerSyncNotification subBuilder = new global::S2C_BombPlayerSyncNotification();
          if (payloadCase_ == PayloadOneofCase.BombPlayerSyncNotification) {
            subBuilder.MergeFrom(BombPlayerSyncNotification);
          }
          input.ReadMessage(subBuilder);
          BombPlayerSyncNotification = subBuilder;
          break;
        }
        case 4058: {
          global::S2C_BombPlayerDeathNotification subBuilder = new global::S2C_BombPlayerDeathNotification();
          if (payloadCase_ == PayloadOneofCase.BombPlayerDeathNotification) {
            subBuilder.MergeFrom(BombPlayerDeathNotification);
          }
          input.ReadMessage(subBuilder);
          BombPlayerDeathNotification = subBuilder;
          break;
        }
        case 4066: {
          global::C2S_BombMoveRequest subBuilder = new global::C2S_BombMoveRequest();
          if (payloadCase_ == PayloadOneofCase.BombMoveRequest) {
            subBuilder.MergeFrom(BombMoveRequest);
          }
          input.ReadMessage(subBuilder);
          BombMoveRequest = subBuilder;
          break;
        }
        case 4074: {
          global::S2C_BombMoveNotification subBuilder = new global::S2C_BombMoveNotification();
          if (payloadCase_ == PayloadOneofCase.BombMoveNotification) {
            subBuilder.MergeFrom(BombMoveNotification);
          }
          input.ReadMessage(subBuilder);
          BombMoveNotification = subBuilder;
          break;
        }
        case 4082: {
          global::S2C_BombGameOverNotification subBuilder = new global::S2C_BombGameOverNotification();
          if (payloadCase_ == PayloadOneofCase.BombGameOverNotification) {
            subBuilder.MergeFrom(BombGameOverNotification);
          }
          input.ReadMessage(subBuilder);
          BombGameOverNotification = subBuilder;
          break;
        }
        case 4810: {
          global::S2C_DartMiniGameReadyNotification subBuilder = new global::S2C_DartMiniGameReadyNotification();
          if (payloadCase_ == PayloadOneofCase.DartMiniGameReadyNotification) {
            subBuilder.MergeFrom(DartMiniGameReadyNotification);
          }
          input.ReadMessage(subBuilder);
          DartMiniGameReadyNotification = subBuilder;
          break;
        }
        case 4818: {
          global::C2S_DartGameReadyRequest subBuilder = new global::C2S_DartGameReadyRequest();
          if (payloadCase_ == PayloadOneofCase.DartGameReadyRequest) {
            subBuilder.MergeFrom(DartGameReadyRequest);
          }
          input.ReadMessage(subBuilder);
          DartGameReadyRequest = subBuilder;
          break;
        }
        case 4826: {
          global::S2C_DartGameReadyNotification subBuilder = new global::S2C_DartGameReadyNotification();
          if (payloadCase_ == PayloadOneofCase.DartGameReadyNotification) {
            subBuilder.MergeFrom(DartGameReadyNotification);
          }
          input.ReadMessage(subBuilder);
          DartGameReadyNotification = subBuilder;
          break;
        }
        case 4834: {
          global::S2C_DartMiniGameStartNotification subBuilder = new global::S2C_DartMiniGameStartNotification();
          if (payloadCase_ == PayloadOneofCase.DartMiniGameStartNotification) {
            subBuilder.MergeFrom(DartMiniGameStartNotification);
          }
          input.ReadMessage(subBuilder);
          DartMiniGameStartNotification = subBuilder;
          break;
        }
        case 4842: {
          global::C2S_DartGameThrowRequest subBuilder = new global::C2S_DartGameThrowRequest();
          if (payloadCase_ == PayloadOneofCase.DartGameThrowRequest) {
            subBuilder.MergeFrom(DartGameThrowRequest);
          }
          input.ReadMessage(subBuilder);
          DartGameThrowRequest = subBuilder;
          break;
        }
        case 4850: {
          global::S2C_DartGameThrowNotification subBuilder = new global::S2C_DartGameThrowNotification();
          if (payloadCase_ == PayloadOneofCase.DartGameThrowNotification) {
            subBuilder.MergeFrom(DartGameThrowNotification);
          }
          input.ReadMessage(subBuilder);
          DartGameThrowNotification = subBuilder;
          break;
        }
        case 4858: {
          global::S2C_DartGameOverNotification subBuilder = new global::S2C_DartGameOverNotification();
          if (payloadCase_ == PayloadOneofCase.DartGameOverNotification) {
            subBuilder.MergeFrom(DartGameOverNotification);
          }
          input.ReadMessage(subBuilder);
          DartGameOverNotification = subBuilder;
          break;
        }
        case 4866: {
          global::C2S_DartPannelSyncRequest subBuilder = new global::C2S_DartPannelSyncRequest();
          if (payloadCase_ == PayloadOneofCase.DartPannelSyncRequest) {
            subBuilder.MergeFrom(DartPannelSyncRequest);
          }
          input.ReadMessage(subBuilder);
          DartPannelSyncRequest = subBuilder;
          break;
        }
        case 4874: {
          global::S2C_DartPannelSyncNotification subBuilder = new global::S2C_DartPannelSyncNotification();
          if (payloadCase_ == PayloadOneofCase.DartPannelSyncNotification) {
            subBuilder.MergeFrom(DartPannelSyncNotification);
          }
          input.ReadMessage(subBuilder);
          DartPannelSyncNotification = subBuilder;
          break;
        }
        case 4882: {
          global::C2S_DartSyncRequest subBuilder = new global::C2S_DartSyncRequest();
          if (payloadCase_ == PayloadOneofCase.DartSyncRequest) {
            subBuilder.MergeFrom(DartSyncRequest);
          }
          input.ReadMessage(subBuilder);
          DartSyncRequest = subBuilder;
          break;
        }
        case 4890: {
          global::S2C_DartSyncNotification subBuilder = new global::S2C_DartSyncNotification();
          if (payloadCase_ == PayloadOneofCase.DartSyncNotification) {
            subBuilder.MergeFrom(DartSyncNotification);
          }
          input.ReadMessage(subBuilder);
          DartSyncNotification = subBuilder;
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
