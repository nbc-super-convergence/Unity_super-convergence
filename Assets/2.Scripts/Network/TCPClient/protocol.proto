syntax = "proto3";

//COMMON 
    message UserData {
        string sessionId = 1;
        string nickname = 2;
    }

    message RoomData {
        string roomId = 1;
        string ownerId = 2;
        string roomName = 3;
        string lobbyId = 4;
        RoomStateType state = 5;
        repeated UserData users = 6;
        int32 maxUser = 7;
        repeated string readyUsers = 8;
    }

    message Vector {
        float x = 1; 
        float y = 2; 
        float z = 3; 
    }

    message Rank {
        string sessionId = 1;
        int32 rank = 2; 
    }

    message BoardPlayerData {
        string sessionId = 1;
        int32 gold = 2;
        int32 trophy = 3;
        int32 tileLocation = 4;
    }
    
    message DiceGameData {
        string sessionId = 1;
        int32 value = 2;
        int32 rank = 3; 
        float distance = 4;
        Vector angle = 5;
        Vector location = 6;
        float power = 7;
    }

    message DartGameData {
        string sessionId = 1;
        int32 rank = 2; 
        float distance = 3;
        Vector angle = 4;
        Vector location = 5;
        float power = 6;
    }

    message DancePool {
        int32 teamNumber = 1;
        repeated DanceTable danceTables = 2;
    }
    
    message DanceTable {
        repeated DanceCommand commands = 1;   // 방향키 커맨드 목록
    }
    
    message DanceCommand {
        Direction direction = 1;
        string targetSessionId = 2;           // 입력해야 하는 플레이어
    }
    
    message PlayerInfo {
        string sessionId = 1; 
        int32 teamNumber = 2;                 // 개인전: 각 유저에게 부여, 팀전: 팀별로 부여
    }
    
    message TeamResult {
        repeated string sessionId = 1;        // 팀원의 세션 ID
        int32 score = 2;                      // 팀 점수
        int64 endTime = 3;                    // 춤표 완료할 때 마다 시간 갱신
    }



//ENUM
    enum RoomStateType  {
        WAIT = 0;
        PREPARE = 1;
        BOARD = 2;
        MINI = 3;
    }

    enum GlobalFailCode {
        NONE_FAILCODE = 0;
        UNKNOWN_ERROR = 1;
        INVALID_REQUEST = 2;
        AUTHENTICATION_FAILED = 3;
    
        // 100 ~ 199 AUTH SERVER ERROR
        ID_OR_PASSWORD_MISS = 100;
        NOT_MATCH_PASSWORD_CONFIRM = 101;
        ALREADY_EXIST_ID = 102;
        ALREADY_LOGGED_IN_ID = 103;
        VALIDAION_ERROR = 104;
        ALREADY_EXIST_NICKNAME = 105;
    
        // 200 ~ 299 LOBBY SERVER ERROR
        USER_NOT_FOUND = 200;
        ALREADY_IN_LOBBY = 201;
        USER_NOT_IN_LOBBY = 202;
        LOBBY_USER_LIST_ERROR = 203;
        WRONG_LOBBY = 204;
    
        // 300 ~ 399 ROOM SERVER ERROR
        ROOM_NOT_FOUND = 300;
        USER_ALREADY_IN_ROOM = 301;
        USER_NOT_IN_ROOM = 302;
        INVALID_ROOM_STATE = 303;
        OWNER_CANNOT_READY = 304;
        ROOM_IS_FULL = 305;
    
        // 400 ~ 499 BOARD SERVER ERROR
    
        // 500 ~ 599 ICE SERVER ERROR
        GAME_NOT_FOUND = 500;
        USER_IN_GAME_NOT_FOUND = 501;
    }

    enum State {
        IDLE = 0;
        MOVE = 1;
        DIE = 2;
        DANCE_UP = 3;
        DANCE_DOWN = 4;
        DANCE_LEFT = 5;
        DANCE_RIGHT = 6;
        DANCE_FAIL = 7;
        DANCE_WAIT = 8;
    }

    enum Direction {
        UP = 0;                               // 입력 방향의 각도
        DOWN = 180;
        LEFT = 90;
        RIGHT = 270;
    }

    enum GameEndReason {
        TIME_OVER = 0;                        // 시간 끝
        COMPLETE = 1;                         // 모든 테이블 완료
    }

//AUTH
    message C2S_RegisterRequest {
        string loginId = 1;            
        string password = 2;
        string passwordConfirm = 3;
        string nickname = 4;           
    }

    message S2C_RegisterResponse {
        bool success = 1;
        GlobalFailCode failCode = 2;
    }

    message C2S_LoginRequest {
        string loginId = 1;
        string password = 2;
    }

    message S2C_LoginResponse {
        bool success = 1;
        string sessionId = 2;
        GlobalFailCode failCode = 3;
    }

    message C2S_LoggoutRequest {
        string sessionId = 1;
    }

    message S2C_CloseSocketNotification {
        string sessionId = 1;
    }
    

//BOARD
    message C2S_GameStartRequest {
        string sessionId = 1;
        int32 turn = 2;
    }

    message S2C_GameStartNotification {
        bool success = 1;
        repeated PlayerData players = 2;
        GlobalFailCode failCode = 3;
        
        message PlayerData {
            string userId = 1;
            string nickname = 2;
            int32 position = 3;
        }
    }

    message C2S_RollDiceRequest {
        string sessionId = 1;
    }

    message S2C_RollDiceResponse {
        bool success = 1;
        int32 diceResult = 2;
        GlobalFailCode failCode = 3;
    }

    message S2C_RollDiceNotification {
        string sessionId = 1;
        int32 diceResult = 2;
    }

    message C2S_MovePlayerBoardRequest {
        string sessionId = 1;
        Vector targetPoint = 2;
        float rotation = 3; 
    }

    message  S2C_MovePlayerBoardResponse {
        bool success = 1;
        GlobalFailCode failCode = 2;
    }

    message  S2C_MovePlayerBoardNotification {
        string sessionId = 1;
        Vector targetPoint = 2;
        float rotation = 3;
    }

    message  C2S_PurchaseTileRequest {
        string sessionId = 1;
        int32 tile = 2;
    }

    message  S2C_PurchaseTileResponse {
        bool success = 1;
        int32 tile = 2;
        BoardPlayerData playerInfo = 3; 
        int32 purchaseGold = 4;
        GlobalFailCode failCode = 5;
    }

    message  S2C_PurchaseTileNotification {
        string sessionId = 1;
        int32 tile = 2;
        BoardPlayerData playerInfo = 3; 
        int32 purchaseGold = 4;
    }

    message S2C_GameEndNotification {
        repeated Rank rank = 1;
    }

    message C2S_BackToTheRoomRequest {
        string sessionId = 1;
    }

    message S2C_BackToTheRoomResponse {
        bool success = 1;
        RoomData room = 2;
        GlobalFailCode failCode = 3;
    }

    message S2C_BackToTheRoomNotification {
        string sessionId = 1;
    }

    message C2S_StartMiniGameRequest {
        string sessionId = 1;
    }

    message S2C_StartMiniGameNotification {
        int32 game = 1; // 랜덤으로 돌린 미니 게임 중 하나
    }

    message  C2S_PurchaseTrophyRequest {
        string sessionId = 1;
        int32 tile = 2;
    }
    
    message  S2C_PurchaseTrophyResponse {
        bool success = 1;
        int32 nextTile = 2;
        BoardPlayerData playerInfo = 3; 
        GlobalFailCode failCode = 4;
    }
    
    message  S2C_PurchaseTrophyNotification {
        string sessionId = 1;
        int32 beforeTile = 2;
        int32 nextTile = 3;
        repeated BoardPlayerData playersInfo = 4;
    }
    
    message  C2S_TilePenaltyRequest {
        string sessionId = 1;
        int32 tile = 2;
    }
    
    message  S2C_TilePenaltyResponse {
        bool success = 1;
        repeated BoardPlayerData playersInfo = 2;
        GlobalFailCode failCode = 3;
    }
    
    message  S2C_TilePenaltyNotification {
        string sessionId = 1;
        int32 tile = 2;
        repeated BoardPlayerData playersInfo = 3;
    }
    
    message C2S_DiceGameRequest{
        string sessionId = 1;
        float distance = 2;
        Vector angle = 3;
        Vector location = 4;
        float power = 5;
    }
    
    message S2C_DiceGameResponse{
        bool success = 1;
        repeated DiceGameData result = 2;
        GlobalFailCode failCode = 3;
    }
    
    message S2C_DiceGameNotification {
        repeated DiceGameData result = 1;
    }

    message C2S_TurnEndRequest{
        string sessionId = 1;
    }
    
    message S2C_TurnEndNotification{
        
    }
    


//LOBBY
    message C2S_LobbyJoinRequest {
        string sessionId = 1;
    }

    message S2C_LobbyJoinResponse {
        bool success = 1;
        UserData user = 2;
        GlobalFailCode failCode = 3;
    }

    message C2S_LobbyLeaveRequest {
        string sessionId = 1; 
    }

    message S2C_LobbyLeaveResponse {
        bool success = 1;
        GlobalFailCode failCode = 2;
    }

    message C2S_LobbyUserListRequest {
        string sessionId = 1;
    }

    message S2C_LobbyUserListResponse {
        bool success = 1;
        repeated string userList = 2;
        GlobalFailCode failCode = 3;
    }

    message C2S_LobbyUserDetailRequest {
        string sessionId = 1;
        string targetSessionId = 2; 
    }

    message S2C_LobbyUserDetailResponse {
        bool success = 1;
        UserData user = 2;
        GlobalFailCode failCode = 3;
    }

//ROOM
    message C2S_RoomListRequest {
        string sessionId = 1;
    }

    message S2C_RoomListResponse{
        bool success = 1;
        repeated RoomData rooms = 2;
        GlobalFailCode failCode = 3;
    }

    message C2S_CreateRoomRequest {
        string sessionId = 1;
        string roomName = 2;
    }

    message S2C_CreateRoomResponse {
        bool success = 1;
        RoomData room = 2;
        GlobalFailCode failCode = 3;
    }

    message C2S_JoinRoomRequest {
        string sessionId = 1;
        string roomId = 2;
    }

    message S2C_JoinRoomResponse {
        bool success = 1;
        RoomData room = 2;
        GlobalFailCode failCode = 3;
    }

    message S2C_JoinRoomNotification {
        RoomData room = 1;
    }

    message C2S_LeaveRoomRequest{
        string sessionId = 1;
    }

    message S2C_LeaveRoomResponse{
        bool success = 1;
        GlobalFailCode failCode = 2;
    }

    message S2C_LeaveRoomNotification {
        RoomData room = 1;
    }

    message C2S_GamePrepareRequest {
        string sessionId = 1;
        bool isReady = 2;
    }

    message S2C_GamePrepareResponse {
        bool success = 1;
        bool isReady = 2;
        GlobalFailCode failCode = 3;
    } 

    message S2C_GamePrepareNotification{
        UserData user = 1;
        bool isReady = 2;
        RoomStateType state = 3;
    }

//ICE
    message S2C_IceMiniGameReadyNotification {
        repeated startPlayers players = 1;

        message startPlayers {
            string sessionId = 1; 
            Vector position = 2; 
            float rotation = 3;
        } 
    }

    message C2S_IceGameReadyRequest {
        string sessionId = 1;
    }

    message S2C_IceGameReadyNotification {
        string sessionId = 1;
    }

    message S2C_IceMiniGameStartNotification {
    }

    message C2S_IcePlayerSyncRequest {
        string sessionId = 1;
        Vector position = 2;
        float rotation = 3;
        State state = 4;
    }

    message S2C_IcePlayerSyncNotification {
        string sessionId = 1;
        Vector position = 2;
        float rotation = 3;
        State state = 4;
    }

    message C2S_IcePlayerDamageRequest {
        string sessionId = 1;
    }
    
    message S2C_IcePlayerDamageNotification {
        string sessionId = 1;
    }

    message S2C_IcePlayerDeathNotification {
        string sessionId = 1;
    }

    message S2C_IceMapSyncNotification {
    }

    message S2C_IceGameOverNotification {
        repeated Rank ranks = 1;
        int64 endTime = 2; 
    }

    message S2C_IcePlayerExitNotification {
        string sessionId = 1;
    }
//DROPPER
    message S2C_DropMiniGameReadyNotification {
        repeated startPlayers players = 1;

        message startPlayers { 
            string sessionId = 1; 
            int32 slot = 2; //0, 2, 6, 8
            float rotation = 3;
        } 
    }

    message C2S_DropGameReadyRequest {
        string sessionId = 1;
    }

    message S2C_DropGameReadyNotification {
        string sessionId = 1;
    }

    message S2C_DropMiniGameStartNotification {
        int64 startTime = 1; //NOW + 4
    }

    message C2S_DropPlayerSyncRequest {
        string sessionId = 1;
        int32 slot = 2; //0~8 사이.
        float rotation = 3;
        State state = 4;
    }

    message S2C_DropPlayerSyncNotification { 
        string sessionId = 1;
        int32 slot = 2; //무효 == -1
        float rotation = 3;
        State state = 4;
    }

    message S2C_DropPlayerDeathNotification {
        string sessionId = 1;
    }

    message S2C_DropLevelStartNotification {
    }

    message S2C_DropLevelEndNotification {
        repeated int32 holes = 1; //0~8사이 N개의 수
    }

    message S2C_DropGameOverNotification {
        repeated Rank ranks = 1; 
        int64 endTime = 2; 
    }

// DANCE
    message S2C_DanceMiniGameReadyNotification {
        repeated PlayerInfo players = 1;
    }
    
    message C2S_DanceReadyRequest {
        string sessionId = 1;
    }
    
    message S2C_DanceReadyNotification {
        string sessionId = 1;
    }
    
    message S2C_DanceStartNotification {
        int64 startTime = 1; //NOW + 4
    }
        
    message C2S_DanceTableCreateRequest {
        string sessionId = 1;                 // 방장 세션 ID
        repeated DancePool dancePools = 2;     // 생성된 춤표들
    }
    
    message S2C_DanceTableNotification {
        repeated DancePool dancePools = 1;     // 새로운 테이블
    }
    
    message C2S_DanceKeyPressRequest {
        string sessionId = 1;
        Direction pressKey = 2;               // 눌린 키
    }
    
    message S2C_DanceKeyPressResponse {
        bool success = 1;                     // 요청 성공 여부
        bool correct = 2;                     // 올바른 입력이었는지
        State state = 3;                      // 애니메이션
        GlobalFailCode failCode = 4;
    }
    
    message S2C_DanceKeyPressNotification {
        int32 teamNumber = 1;                 // 입력한 플레이어팀
        bool correct = 2;                     // 올바른 입력이었는지
        State state = 3;                      // 애니메이션        
    }
    
    message S2C_DanceGameOverNotification {
        repeated int32 TeamRank = 1;          // 팀 등수
        repeated TeamResult result = 2;       // 팀별 게임 결과
        GameEndReason reason = 3;             // 게임 종료 이유 1. 시간 끝 2. 모든 테이블 완료
        int64 endTime = 4;
    }
    
    message S2C_DanceCloseSocketNotification {
        string disconnectedSessionId = 1;     // 나간 유저
        string replacementSessionId = 2;      // 대신 입력할 유저
    }
    
    message  C2S_DanceTableCompleteRequest{
        string sessionId = 1;                 // 테이블을 완료한 유저의 팀 넘버
        int64 endTime = 2;                    // 테이블을 완료한 시간
    }

//Bomb
    //폭탄 미니게임 시작 알림
    message S2C_BombMiniGameReadyNotification{
        repeated startPlayers players = 1;

        message startPlayers {
            string sessionId= 1; 
            Vector position = 2; 
            float rotation = 3;
            string bombSessionId = 4;  //최초 폭탄 소지자
        }
    }

    // 설명서, 준비창

    //폭탄 미니게임 준비 완료
    message C2S_BombGameReadyRequest {
        string sessionId= 1; // 준비 완료한 플레이어 아이디
    }

    //폭탄 미니게임 준비 완료 알림
    message S2C_BombGameReadyNotification {
        string sessionId= 1; // 준비 완료한 인원 공유
    }

    //폭탄 게임 시작 알림
    message S2C_BombMiniGameStartNotification{
    }


    // 인 게임

    //플레이어 이동
    // 빙판과 같은 형태
    message C2S_BombPlayerSyncRequest{
        string sessionId= 1;
        Vector position = 2;
        float rotation = 3;
        State state = 4;
    }

    //상태 동기화
    // 빙판과 같은 형태
    message S2C_BombPlayerSyncNotification {
        string sessionId= 1;
        Vector position = 2;
        float rotation = 3;
        State state = 4;
    }

    //폭탄 터짐
    message S2C_BombPlayerDeathNotification{
        string sessionId= 1; // 터질 때 들고있던 유저
        string bombSessionId = 2; // 새로운 폭탄 유저
    }

    //폭탄 건넴 
    message C2S_BombMoveRequest {
        string sessionId  = 1; // 폭탄 받는 유저 
        string bombUserId = 2; // 폭탄 주는 유저
    }

    message S2C_BombMoveNotification {
        string sessionId = 1; // 폭탄 받는 유저 
    }


    //END. 게임 종료 알림
    message S2C_BombGameOverNotification {
        repeated Rank ranks = 1;
        int64 endTime = 2; // 일단 ice랑 똑같이 +6초 해서?

        message Rank { 
            string sessionId = 1;
            int32 rank = 2; 
        }
    }

//Dart
    // 미니게임 시작 노티 
    message S2C_DartMiniGameReadyNotification {
        repeated startPlayers players = 1;

        message startPlayers {
            string sessionId = 1; 
            Vector position = 2; 
            float rotation = 3;
        } 
    }

    // 미니게임 레디 판넬 - 준비 
    message C2S_DartGameReadyRequest {
        string sessionId = 1;
    }

    message S2C_DartGameReadyNotification {
        string sessionId = 1;
    }

    // 미니게임 - 던지기 요청
    message C2S_DartGameThrowRequest{
        string sessionId = 1;
        float distance = 2;
        Vector angle = 3;
        Vector location = 4;
        float power = 5;
    }
    message S2C_DartMiniGameStartNotification {
        int64 startTime = 1; 
    }

    // 미니게임 - 던지기 알림 
    message S2C_DartGameThrowNotification {
        repeated DartGameData result = 1;
    }

    // 미니게임 종료 
    message S2C_DartGameOverNotification {
        repeated Rank ranks = 1;
        int64 endTime = 2; 

        message Rank {
            string sessionId = 1;
            int32 rank = 2; 
            int32 totalPoint = 3;
        }
    }

// 게임패킷
    message GamePacket {
        oneof payload {
            // Auth (1~9)
                C2S_RegisterRequest registerRequest = 1;
                S2C_RegisterResponse registerResponse = 2;
                C2S_LoginRequest loginRequest = 3;
                S2C_LoginResponse loginResponse = 4;
                C2S_LoggoutRequest logoutRequest = 5;

                S2C_CloseSocketNotification closeSocketNotification =  8;

                // Lobby (11-30)
                C2S_LobbyJoinRequest lobbyJoinRequest = 11;
                S2C_LobbyJoinResponse lobbyJoinResponse = 12;
                C2S_LobbyLeaveRequest lobbyLeaveRequest = 13;
                S2C_LobbyLeaveResponse lobbyLeaveResponse = 14;
                C2S_LobbyUserListRequest lobbyUserListRequest = 15;
                S2C_LobbyUserListResponse lobbyUserListResponse = 16;
                C2S_LobbyUserDetailRequest lobbyUserDetailRequest = 17;
                S2C_LobbyUserDetailResponse lobbyUserDetailResponse = 18;

                // Room (31-50)
                C2S_RoomListRequest roomListRequest = 31;
                S2C_RoomListResponse roomListResponse = 32;
                C2S_CreateRoomRequest createRoomRequest = 33;
                S2C_CreateRoomResponse createRoomResponse = 34;
                C2S_JoinRoomRequest joinRoomRequest = 35;
                S2C_JoinRoomResponse joinRoomResponse = 36;
                S2C_JoinRoomNotification joinRoomNotification = 37;
                C2S_LeaveRoomRequest leaveRoomRequest = 38;
                S2C_LeaveRoomResponse leaveRoomResponse = 39;
                S2C_LeaveRoomNotification leaveRoomNotification = 40;
                C2S_GamePrepareRequest gamePrepareRequest = 41;
                S2C_GamePrepareResponse gamePrepareResponse = 42;
                S2C_GamePrepareNotification gamePrepareNotification = 43;

                // Game start (51-60)
                C2S_GameStartRequest gameStartRequest = 51;
                S2C_GameStartNotification gameStartNotification = 52;

                // Game Play (61-90)
                C2S_RollDiceRequest rollDiceRequest = 61;
                S2C_RollDiceResponse rollDiceResponse = 62;
                S2C_RollDiceNotification rollDiceNotification = 63;
                C2S_MovePlayerBoardRequest movePlayerBoardRequest = 64;
                S2C_MovePlayerBoardResponse movePlayerBoardResponse = 65;
                S2C_MovePlayerBoardNotification movePlayerBoardNotification = 66;
                C2S_PurchaseTileRequest purchaseTileRequest = 67;
                S2C_PurchaseTileResponse purchaseTileResponse = 68;
                S2C_PurchaseTileNotification purchaseTileNotification = 69;
                S2C_GameEndNotification gameEndNotification = 70;
                C2S_PurchaseTrophyRequest purchaseTrophyRequest = 71;
                S2C_PurchaseTrophyResponse purchaseTrophyResponse = 72;
                S2C_PurchaseTrophyNotification purchaseTrophyNotification = 73;
                C2S_TilePenaltyRequest tilePenaltyRequest = 74;
                S2C_TilePenaltyResponse tilePenaltyResponse = 75;
                S2C_TilePenaltyNotification tilePenaltyNotification = 76;
                C2S_DiceGameRequest diceGameRequest = 77;
                S2C_DiceGameResponse diceGameResponse = 78;
                S2C_DiceGameNotification diceGameNotification = 79;
                C2S_TurnEndRequest turnEndRequest = 80;
                S2C_TurnEndNotification turnEndNotification = 81; 

                // Post Game (91-100)
                C2S_BackToTheRoomRequest backToTheRoomRequest = 91;
                S2C_BackToTheRoomResponse backToTheRoomResponse = 92;
                S2C_BackToTheRoomNotification backToTheRoomNotification = 93;

                // Mini Game (101-110)
                C2S_StartMiniGameRequest startMiniGameRequest = 101;

                // ice  (201)
                S2C_IceMiniGameReadyNotification iceMiniGameReadyNotification = 201;
                C2S_IceGameReadyRequest iceGameReadyRequest = 202; 
                S2C_IceGameReadyNotification iceGameReadyNotification = 203;
                S2C_IceMiniGameStartNotification iceMiniGameStartNotification = 204;
                C2S_IcePlayerSyncRequest icePlayerSyncRequest = 205;
                S2C_IcePlayerSyncNotification icePlayerSyncNotification = 206;
                C2S_IcePlayerDamageRequest icePlayerDamageRequest = 207;
                S2C_IcePlayerDamageNotification icePlayerDamageNotification = 208;
                S2C_IcePlayerDeathNotification icePlayerDeathNotification = 209;
                S2C_IceGameOverNotification iceGameOverNotification = 210;
                S2C_IceMapSyncNotification iceMapSyncNotification = 211;
                S2C_IcePlayerExitNotification icePlayerExitNotification = 212;

                //dropper (301)
                S2C_DropMiniGameReadyNotification dropMiniGameReadyNotification = 301;
                C2S_DropGameReadyRequest dropGameReadyRequest = 302;
                S2C_DropGameReadyNotification dropGameReadyNotification = 303;
                S2C_DropMiniGameStartNotification dropMiniGameStartNotification = 304;
                C2S_DropPlayerSyncRequest dropPlayerSyncRequest = 305;
                S2C_DropPlayerSyncNotification dropPlayerSyncNotification = 306;
                S2C_DropPlayerDeathNotification dropPlayerDeathNotification = 307;
                S2C_DropLevelStartNotification dropLevelStartNotification = 308;
                S2C_DropLevelEndNotification dropLevelEndNotification = 309;
                S2C_DropGameOverNotification dropGameOverNotification = 310;

             // dance (401)
            S2C_DanceMiniGameReadyNotification danceMiniGameReadyNotification = 401;
            C2S_DanceReadyRequest danceReadyRequest = 402;
            S2C_DanceReadyNotification danceReadyNotification = 403;
            S2C_DanceStartNotification danceStartNotification = 404;
            C2S_DanceTableCreateRequest danceTableCreateRequest = 405;
            S2C_DanceTableNotification danceTableNotification = 406;
            C2S_DanceKeyPressRequest danceKeyPressRequest = 407;
            S2C_DanceKeyPressResponse danceKeyPressResponse = 408;
            S2C_DanceKeyPressNotification danceKeyPressNotification = 409;
            S2C_DanceGameOverNotification danceGameOverNotification = 410;
            S2C_DanceCloseSocketNotification danceCloseSocketNotification = 411;
            C2S_DanceTableCompleteRequest danceTableCompleteRequest = 412;

             //Bomb (501)
             S2C_BombMiniGameReadyNotification bombMiniGameReadyNotification = 501;
             C2S_BombGameReadyRequest bombGameReadyRequest = 502;
             S2C_BombGameReadyNotification bombGameReadyNotification = 503;
             S2C_BombMiniGameStartNotification bombMiniGameStartNotification = 504;
             C2S_BombPlayerSyncRequest bombPlayerSyncRequest = 505;
             S2C_BombPlayerSyncNotification bombPlayerSyncNotification = 506;
             S2C_BombPlayerDeathNotification bombPlayerDeathNotification = 507;
             C2S_BombMoveRequest bombMoveRequest = 508;
             S2C_BombMoveNotification bombMoveNotification = 509;
             S2C_BombGameOverNotification bombGameOverNotification = 510; 

            // Dart(601)
            S2C_DartMiniGameReadyNotification dartMiniGameReadyNotification = 601;
            C2S_DartGameReadyRequest dartGameReadyRequest = 602;
            S2C_DartGameReadyNotification dartGameReadyNotification = 603;
            S2C_DartMiniGameStartNotification dartMiniGameStartNotification = 604;
            C2S_DartGameThrowRequest dartGameThrowRequest = 605;
            S2C_DartGameThrowNotification dartGameThrowNotification = 606;
            S2C_DartGameOverNotification dartGameOverNotification = 607;
        }
    }